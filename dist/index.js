var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/ws/browser.js
var require_browser = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/chroma-js/chroma.js
var require_chroma = __commonJS({
  "node_modules/chroma-js/chroma.js"(exports, module) {
    (function() {
      var Color3, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs3, atan22, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos2, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb3, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log3, luminance_x, m2, max5, multiply, normal, num2rgb, overlay, pow3, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root3, round, screen, sin2, sqrt5, temperature2rgb, type2, unpack, w3cx11, xyz_lab, xyz_rgb, slice5 = [].slice;
      type2 = function() {
        var classToType, len, name, o, ref;
        classToType = {};
        ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
        for (o = 0, len = ref.length; o < len; o++) {
          name = ref[o];
          classToType["[object " + name + "]"] = name.toLowerCase();
        }
        return function(obj) {
          var strType;
          strType = Object.prototype.toString.call(obj);
          return classToType[strType] || "object";
        };
      }();
      limit = function(x5, min4, max6) {
        if (min4 == null) {
          min4 = 0;
        }
        if (max6 == null) {
          max6 = 1;
        }
        if (x5 < min4) {
          x5 = min4;
        }
        if (x5 > max6) {
          x5 = max6;
        }
        return x5;
      };
      unpack = function(args) {
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        } else {
          return args[0];
        }
      };
      clip_rgb = function(rgb3) {
        var i3, o;
        rgb3._clipped = false;
        rgb3._unclipped = rgb3.slice(0);
        for (i3 = o = 0; o < 3; i3 = ++o) {
          if (i3 < 3) {
            if (rgb3[i3] < 0 || rgb3[i3] > 255) {
              rgb3._clipped = true;
            }
            if (rgb3[i3] < 0) {
              rgb3[i3] = 0;
            }
            if (rgb3[i3] > 255) {
              rgb3[i3] = 255;
            }
          } else if (i3 === 3) {
            if (rgb3[i3] < 0) {
              rgb3[i3] = 0;
            }
            if (rgb3[i3] > 1) {
              rgb3[i3] = 1;
            }
          }
        }
        if (!rgb3._clipped) {
          delete rgb3._unclipped;
        }
        return rgb3;
      };
      PI = Math.PI, round = Math.round, cos2 = Math.cos, floor = Math.floor, pow3 = Math.pow, log3 = Math.log, sin2 = Math.sin, sqrt5 = Math.sqrt, atan22 = Math.atan2, max5 = Math.max, abs3 = Math.abs;
      TWOPI = PI * 2;
      PITHIRD = PI / 3;
      DEG2RAD = PI / 180;
      RAD2DEG = 180 / PI;
      chroma = function() {
        if (arguments[0] instanceof Color3) {
          return arguments[0];
        }
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, arguments, function() {
        });
      };
      chroma["default"] = chroma;
      _interpolators = [];
      if (typeof module !== "undefined" && module !== null && module.exports != null) {
        module.exports = chroma;
      }
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return chroma;
        });
      } else {
        root3 = typeof exports !== "undefined" && exports !== null ? exports : this;
        root3.chroma = chroma;
      }
      chroma.version = "1.4.1";
      _input = {};
      _guess_formats = [];
      _guess_formats_sorted = false;
      Color3 = function() {
        function Color4() {
          var arg, args, chk, len, len1, me3, mode2, o, w3;
          me3 = this;
          args = [];
          for (o = 0, len = arguments.length; o < len; o++) {
            arg = arguments[o];
            if (arg != null) {
              args.push(arg);
            }
          }
          if (args.length > 1) {
            mode2 = args[args.length - 1];
          }
          if (_input[mode2] != null) {
            me3._rgb = clip_rgb(_input[mode2](unpack(args.slice(0, -1))));
          } else {
            if (!_guess_formats_sorted) {
              _guess_formats = _guess_formats.sort(function(a4, b4) {
                return b4.p - a4.p;
              });
              _guess_formats_sorted = true;
            }
            for (w3 = 0, len1 = _guess_formats.length; w3 < len1; w3++) {
              chk = _guess_formats[w3];
              mode2 = chk.test.apply(chk, args);
              if (mode2) {
                break;
              }
            }
            if (mode2) {
              me3._rgb = clip_rgb(_input[mode2].apply(_input, args));
            }
          }
          if (me3._rgb == null) {
            console.warn("unknown format: " + args);
          }
          if (me3._rgb == null) {
            me3._rgb = [0, 0, 0];
          }
          if (me3._rgb.length === 3) {
            me3._rgb.push(1);
          }
        }
        Color4.prototype.toString = function() {
          return this.hex();
        };
        return Color4;
      }();
      chroma._input = _input;
      chroma.brewer = brewer = {
        OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
        PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
        BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
        Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
        BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
        YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
        YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
        Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
        RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
        Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
        YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
        Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
        GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
        Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
        YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
        PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
        Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
        PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
        Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
        Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
        RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
        RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
        PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
        PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
        RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
        BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
        RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
        PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
        Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
        Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
        Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
        Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
        Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
        Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
        Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
        Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
      };
      (function() {
        var key, results;
        results = [];
        for (key in brewer) {
          results.push(brewer[key.toLowerCase()] = brewer[key]);
        }
        return results;
      })();
      w3cx11 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      };
      chroma.colors = colors = w3cx11;
      lab2rgb = function() {
        var a4, args, b4, g2, l, r, x5, y4, z4;
        args = unpack(arguments);
        l = args[0], a4 = args[1], b4 = args[2];
        y4 = (l + 16) / 116;
        x5 = isNaN(a4) ? y4 : y4 + a4 / 500;
        z4 = isNaN(b4) ? y4 : y4 - b4 / 200;
        y4 = LAB_CONSTANTS.Yn * lab_xyz(y4);
        x5 = LAB_CONSTANTS.Xn * lab_xyz(x5);
        z4 = LAB_CONSTANTS.Zn * lab_xyz(z4);
        r = xyz_rgb(3.2404542 * x5 - 1.5371385 * y4 - 0.4985314 * z4);
        g2 = xyz_rgb(-0.969266 * x5 + 1.8760108 * y4 + 0.041556 * z4);
        b4 = xyz_rgb(0.0556434 * x5 - 0.2040259 * y4 + 1.0572252 * z4);
        return [r, g2, b4, args.length > 3 ? args[3] : 1];
      };
      xyz_rgb = function(r) {
        return 255 * (r <= 304e-5 ? 12.92 * r : 1.055 * pow3(r, 1 / 2.4) - 0.055);
      };
      lab_xyz = function(t) {
        if (t > LAB_CONSTANTS.t1) {
          return t * t * t;
        } else {
          return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
        }
      };
      LAB_CONSTANTS = {
        Kn: 18,
        Xn: 0.95047,
        Yn: 1,
        Zn: 1.08883,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 8856452e-9
      };
      rgb2lab = function() {
        var b4, g2, r, ref, ref1, x5, y4, z4;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        ref1 = rgb2xyz(r, g2, b4), x5 = ref1[0], y4 = ref1[1], z4 = ref1[2];
        return [116 * y4 - 16, 500 * (x5 - y4), 200 * (y4 - z4)];
      };
      rgb_xyz = function(r) {
        if ((r /= 255) <= 0.04045) {
          return r / 12.92;
        } else {
          return pow3((r + 0.055) / 1.055, 2.4);
        }
      };
      xyz_lab = function(t) {
        if (t > LAB_CONSTANTS.t3) {
          return pow3(t, 1 / 3);
        } else {
          return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
        }
      };
      rgb2xyz = function() {
        var b4, g2, r, ref, x5, y4, z4;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        r = rgb_xyz(r);
        g2 = rgb_xyz(g2);
        b4 = rgb_xyz(b4);
        x5 = xyz_lab((0.4124564 * r + 0.3575761 * g2 + 0.1804375 * b4) / LAB_CONSTANTS.Xn);
        y4 = xyz_lab((0.2126729 * r + 0.7151522 * g2 + 0.072175 * b4) / LAB_CONSTANTS.Yn);
        z4 = xyz_lab((0.0193339 * r + 0.119192 * g2 + 0.9503041 * b4) / LAB_CONSTANTS.Zn);
        return [x5, y4, z4];
      };
      chroma.lab = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["lab"]), function() {
        });
      };
      _input.lab = lab2rgb;
      Color3.prototype.lab = function() {
        return rgb2lab(this._rgb);
      };
      bezier = function(colors2) {
        var I4, I0, I1, c6, lab0, lab1, lab2, lab3, ref, ref1, ref2;
        colors2 = function() {
          var len, o, results;
          results = [];
          for (o = 0, len = colors2.length; o < len; o++) {
            c6 = colors2[o];
            results.push(chroma(c6));
          }
          return results;
        }();
        if (colors2.length === 2) {
          ref = function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors2.length; o < len; o++) {
              c6 = colors2[o];
              results.push(c6.lab());
            }
            return results;
          }(), lab0 = ref[0], lab1 = ref[1];
          I4 = function(t) {
            var i3, lab;
            lab = function() {
              var o, results;
              results = [];
              for (i3 = o = 0; o <= 2; i3 = ++o) {
                results.push(lab0[i3] + t * (lab1[i3] - lab0[i3]));
              }
              return results;
            }();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors2.length === 3) {
          ref1 = function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors2.length; o < len; o++) {
              c6 = colors2[o];
              results.push(c6.lab());
            }
            return results;
          }(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
          I4 = function(t) {
            var i3, lab;
            lab = function() {
              var o, results;
              results = [];
              for (i3 = o = 0; o <= 2; i3 = ++o) {
                results.push((1 - t) * (1 - t) * lab0[i3] + 2 * (1 - t) * t * lab1[i3] + t * t * lab2[i3]);
              }
              return results;
            }();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors2.length === 4) {
          ref2 = function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors2.length; o < len; o++) {
              c6 = colors2[o];
              results.push(c6.lab());
            }
            return results;
          }(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
          I4 = function(t) {
            var i3, lab;
            lab = function() {
              var o, results;
              results = [];
              for (i3 = o = 0; o <= 2; i3 = ++o) {
                results.push((1 - t) * (1 - t) * (1 - t) * lab0[i3] + 3 * (1 - t) * (1 - t) * t * lab1[i3] + 3 * (1 - t) * t * t * lab2[i3] + t * t * t * lab3[i3]);
              }
              return results;
            }();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors2.length === 5) {
          I0 = bezier(colors2.slice(0, 3));
          I1 = bezier(colors2.slice(2, 5));
          I4 = function(t) {
            if (t < 0.5) {
              return I0(t * 2);
            } else {
              return I1((t - 0.5) * 2);
            }
          };
        }
        return I4;
      };
      chroma.bezier = function(colors2) {
        var f3;
        f3 = bezier(colors2);
        f3.scale = function() {
          return chroma.scale(f3);
        };
        return f3;
      };
      chroma.cubehelix = function(start2, rotations, hue3, gamma3, lightness) {
        var dh, dl, f3;
        if (start2 == null) {
          start2 = 300;
        }
        if (rotations == null) {
          rotations = -1.5;
        }
        if (hue3 == null) {
          hue3 = 1;
        }
        if (gamma3 == null) {
          gamma3 = 1;
        }
        if (lightness == null) {
          lightness = [0, 1];
        }
        dh = 0;
        if (type2(lightness) === "array") {
          dl = lightness[1] - lightness[0];
        } else {
          dl = 0;
          lightness = [lightness, lightness];
        }
        f3 = function(fract) {
          var a4, amp, b4, cos_a, g2, h2, l, r, sin_a;
          a4 = TWOPI * ((start2 + 120) / 360 + rotations * fract);
          l = pow3(lightness[0] + dl * fract, gamma3);
          h2 = dh !== 0 ? hue3[0] + fract * dh : hue3;
          amp = h2 * l * (1 - l) / 2;
          cos_a = cos2(a4);
          sin_a = sin2(a4);
          r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          g2 = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          b4 = l + amp * (1.97294 * cos_a);
          return chroma(clip_rgb([r * 255, g2 * 255, b4 * 255, 1]));
        };
        f3.start = function(s2) {
          if (s2 == null) {
            return start2;
          }
          start2 = s2;
          return f3;
        };
        f3.rotations = function(r) {
          if (r == null) {
            return rotations;
          }
          rotations = r;
          return f3;
        };
        f3.gamma = function(g2) {
          if (g2 == null) {
            return gamma3;
          }
          gamma3 = g2;
          return f3;
        };
        f3.hue = function(h2) {
          if (h2 == null) {
            return hue3;
          }
          hue3 = h2;
          if (type2(hue3) === "array") {
            dh = hue3[1] - hue3[0];
            if (dh === 0) {
              hue3 = hue3[1];
            }
          } else {
            dh = 0;
          }
          return f3;
        };
        f3.lightness = function(h2) {
          if (h2 == null) {
            return lightness;
          }
          if (type2(h2) === "array") {
            lightness = h2;
            dl = h2[1] - h2[0];
          } else {
            lightness = [h2, h2];
            dl = 0;
          }
          return f3;
        };
        f3.scale = function() {
          return chroma.scale(f3);
        };
        f3.hue(hue3);
        return f3;
      };
      chroma.random = function() {
        var code, digits, i3, o;
        digits = "0123456789abcdef";
        code = "#";
        for (i3 = o = 0; o < 6; i3 = ++o) {
          code += digits.charAt(floor(Math.random() * 16));
        }
        return new Color3(code);
      };
      _interpolators = [];
      interpolate = function(col1, col2, f3, m3) {
        var interpol, len, o, res;
        if (f3 == null) {
          f3 = 0.5;
        }
        if (m3 == null) {
          m3 = "rgb";
        }
        if (type2(col1) !== "object") {
          col1 = chroma(col1);
        }
        if (type2(col2) !== "object") {
          col2 = chroma(col2);
        }
        for (o = 0, len = _interpolators.length; o < len; o++) {
          interpol = _interpolators[o];
          if (m3 === interpol[0]) {
            res = interpol[1](col1, col2, f3, m3);
            break;
          }
        }
        if (res == null) {
          throw "color mode " + m3 + " is not supported";
        }
        return res.alpha(col1.alpha() + f3 * (col2.alpha() - col1.alpha()));
      };
      chroma.interpolate = interpolate;
      Color3.prototype.interpolate = function(col2, f3, m3) {
        return interpolate(this, col2, f3, m3);
      };
      chroma.mix = interpolate;
      Color3.prototype.mix = Color3.prototype.interpolate;
      _input.rgb = function() {
        var k4, ref, results, v2;
        ref = unpack(arguments);
        results = [];
        for (k4 in ref) {
          v2 = ref[k4];
          results.push(v2);
        }
        return results;
      };
      chroma.rgb = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["rgb"]), function() {
        });
      };
      Color3.prototype.rgb = function(round2) {
        if (round2 == null) {
          round2 = true;
        }
        if (round2) {
          return this._rgb.map(Math.round).slice(0, 3);
        } else {
          return this._rgb.slice(0, 3);
        }
      };
      Color3.prototype.rgba = function(round2) {
        if (round2 == null) {
          round2 = true;
        }
        if (!round2) {
          return this._rgb.slice(0);
        }
        return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
      };
      _guess_formats.push({
        p: 3,
        test: function(n2) {
          var a4;
          a4 = unpack(arguments);
          if (type2(a4) === "array" && a4.length === 3) {
            return "rgb";
          }
          if (a4.length === 4 && type2(a4[3]) === "number" && a4[3] >= 0 && a4[3] <= 1) {
            return "rgb";
          }
        }
      });
      _input.lrgb = _input.rgb;
      interpolate_lrgb = function(col1, col2, f3, m3) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color3(sqrt5(pow3(xyz0[0], 2) * (1 - f3) + pow3(xyz1[0], 2) * f3), sqrt5(pow3(xyz0[1], 2) * (1 - f3) + pow3(xyz1[1], 2) * f3), sqrt5(pow3(xyz0[2], 2) * (1 - f3) + pow3(xyz1[2], 2) * f3), m3);
      };
      _average_lrgb = function(colors2) {
        var col, f3, len, o, rgb3, xyz;
        f3 = 1 / colors2.length;
        xyz = [0, 0, 0, 0];
        for (o = 0, len = colors2.length; o < len; o++) {
          col = colors2[o];
          rgb3 = col._rgb;
          xyz[0] += pow3(rgb3[0], 2) * f3;
          xyz[1] += pow3(rgb3[1], 2) * f3;
          xyz[2] += pow3(rgb3[2], 2) * f3;
          xyz[3] += rgb3[3] * f3;
        }
        xyz[0] = sqrt5(xyz[0]);
        xyz[1] = sqrt5(xyz[1]);
        xyz[2] = sqrt5(xyz[2]);
        if (xyz[3] > 1) {
          xyz[3] = 1;
        }
        return new Color3(clip_rgb(xyz));
      };
      _interpolators.push(["lrgb", interpolate_lrgb]);
      chroma.average = function(colors2, mode2) {
        var A6, alpha, c6, cnt, dx, dy, first, i3, l, len, o, xyz, xyz2;
        if (mode2 == null) {
          mode2 = "rgb";
        }
        l = colors2.length;
        colors2 = colors2.map(function(c7) {
          return chroma(c7);
        });
        first = colors2.splice(0, 1)[0];
        if (mode2 === "lrgb") {
          return _average_lrgb(colors2);
        }
        xyz = first.get(mode2);
        cnt = [];
        dx = 0;
        dy = 0;
        for (i3 in xyz) {
          xyz[i3] = xyz[i3] || 0;
          cnt.push(isNaN(xyz[i3]) ? 0 : 1);
          if (mode2.charAt(i3) === "h" && !isNaN(xyz[i3])) {
            A6 = xyz[i3] / 180 * PI;
            dx += cos2(A6);
            dy += sin2(A6);
          }
        }
        alpha = first.alpha();
        for (o = 0, len = colors2.length; o < len; o++) {
          c6 = colors2[o];
          xyz2 = c6.get(mode2);
          alpha += c6.alpha();
          for (i3 in xyz) {
            if (!isNaN(xyz2[i3])) {
              cnt[i3] += 1;
              if (mode2.charAt(i3) === "h") {
                A6 = xyz2[i3] / 180 * PI;
                dx += cos2(A6);
                dy += sin2(A6);
              } else {
                xyz[i3] += xyz2[i3];
              }
            }
          }
        }
        for (i3 in xyz) {
          if (mode2.charAt(i3) === "h") {
            A6 = atan22(dy / cnt[i3], dx / cnt[i3]) / PI * 180;
            while (A6 < 0) {
              A6 += 360;
            }
            while (A6 >= 360) {
              A6 -= 360;
            }
            xyz[i3] = A6;
          } else {
            xyz[i3] = xyz[i3] / cnt[i3];
          }
        }
        return chroma(xyz, mode2).alpha(alpha / l);
      };
      hex2rgb = function(hex3) {
        var a4, b4, g2, r, rgb3, u;
        if (hex3.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
          if (hex3.length === 4 || hex3.length === 7) {
            hex3 = hex3.substr(1);
          }
          if (hex3.length === 3) {
            hex3 = hex3.split("");
            hex3 = hex3[0] + hex3[0] + hex3[1] + hex3[1] + hex3[2] + hex3[2];
          }
          u = parseInt(hex3, 16);
          r = u >> 16;
          g2 = u >> 8 & 255;
          b4 = u & 255;
          return [r, g2, b4, 1];
        }
        if (hex3.match(/^#?([A-Fa-f0-9]{8})$/)) {
          if (hex3.length === 9) {
            hex3 = hex3.substr(1);
          }
          u = parseInt(hex3, 16);
          r = u >> 24 & 255;
          g2 = u >> 16 & 255;
          b4 = u >> 8 & 255;
          a4 = round((u & 255) / 255 * 100) / 100;
          return [r, g2, b4, a4];
        }
        if (_input.css != null && (rgb3 = _input.css(hex3))) {
          return rgb3;
        }
        throw "unknown color: " + hex3;
      };
      rgb2hex = function(channels, mode2) {
        var a4, b4, g2, hxa, r, str, u;
        if (mode2 == null) {
          mode2 = "auto";
        }
        r = channels[0], g2 = channels[1], b4 = channels[2], a4 = channels[3];
        if (mode2 === "auto") {
          mode2 = a4 < 1 ? "rgba" : "rgb";
        }
        r = Math.round(r);
        g2 = Math.round(g2);
        b4 = Math.round(b4);
        u = r << 16 | g2 << 8 | b4;
        str = "000000" + u.toString(16);
        str = str.substr(str.length - 6);
        hxa = "0" + round(a4 * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        return "#" + function() {
          switch (mode2.toLowerCase()) {
            case "rgba":
              return str + hxa;
            case "argb":
              return hxa + str;
            default:
              return str;
          }
        }();
      };
      _input.hex = function(h2) {
        return hex2rgb(h2);
      };
      chroma.hex = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["hex"]), function() {
        });
      };
      Color3.prototype.hex = function(mode2) {
        if (mode2 == null) {
          mode2 = "auto";
        }
        return rgb2hex(this._rgb, mode2);
      };
      _guess_formats.push({
        p: 4,
        test: function(n2) {
          if (arguments.length === 1 && type2(n2) === "string") {
            return "hex";
          }
        }
      });
      hsl2rgb3 = function() {
        var args, b4, c6, g2, h2, i3, l, o, r, ref, s2, t12, t2, t3;
        args = unpack(arguments);
        h2 = args[0], s2 = args[1], l = args[2];
        if (s2 === 0) {
          r = g2 = b4 = l * 255;
        } else {
          t3 = [0, 0, 0];
          c6 = [0, 0, 0];
          t2 = l < 0.5 ? l * (1 + s2) : l + s2 - l * s2;
          t12 = 2 * l - t2;
          h2 /= 360;
          t3[0] = h2 + 1 / 3;
          t3[1] = h2;
          t3[2] = h2 - 1 / 3;
          for (i3 = o = 0; o <= 2; i3 = ++o) {
            if (t3[i3] < 0) {
              t3[i3] += 1;
            }
            if (t3[i3] > 1) {
              t3[i3] -= 1;
            }
            if (6 * t3[i3] < 1) {
              c6[i3] = t12 + (t2 - t12) * 6 * t3[i3];
            } else if (2 * t3[i3] < 1) {
              c6[i3] = t2;
            } else if (3 * t3[i3] < 2) {
              c6[i3] = t12 + (t2 - t12) * (2 / 3 - t3[i3]) * 6;
            } else {
              c6[i3] = t12;
            }
          }
          ref = [round(c6[0] * 255), round(c6[1] * 255), round(c6[2] * 255)], r = ref[0], g2 = ref[1], b4 = ref[2];
        }
        if (args.length > 3) {
          return [r, g2, b4, args[3]];
        } else {
          return [r, g2, b4];
        }
      };
      rgb2hsl = function(r, g2, b4) {
        var h2, l, min4, ref, s2;
        if (r !== void 0 && r.length >= 3) {
          ref = r, r = ref[0], g2 = ref[1], b4 = ref[2];
        }
        r /= 255;
        g2 /= 255;
        b4 /= 255;
        min4 = Math.min(r, g2, b4);
        max5 = Math.max(r, g2, b4);
        l = (max5 + min4) / 2;
        if (max5 === min4) {
          s2 = 0;
          h2 = Number.NaN;
        } else {
          s2 = l < 0.5 ? (max5 - min4) / (max5 + min4) : (max5 - min4) / (2 - max5 - min4);
        }
        if (r === max5) {
          h2 = (g2 - b4) / (max5 - min4);
        } else if (g2 === max5) {
          h2 = 2 + (b4 - r) / (max5 - min4);
        } else if (b4 === max5) {
          h2 = 4 + (r - g2) / (max5 - min4);
        }
        h2 *= 60;
        if (h2 < 0) {
          h2 += 360;
        }
        return [h2, s2, l];
      };
      chroma.hsl = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["hsl"]), function() {
        });
      };
      _input.hsl = hsl2rgb3;
      Color3.prototype.hsl = function() {
        return rgb2hsl(this._rgb);
      };
      hsv2rgb = function() {
        var args, b4, f3, g2, h2, i3, p2, q5, r, ref, ref1, ref2, ref3, ref4, ref5, s2, t, v2;
        args = unpack(arguments);
        h2 = args[0], s2 = args[1], v2 = args[2];
        v2 *= 255;
        if (s2 === 0) {
          r = g2 = b4 = v2;
        } else {
          if (h2 === 360) {
            h2 = 0;
          }
          if (h2 > 360) {
            h2 -= 360;
          }
          if (h2 < 0) {
            h2 += 360;
          }
          h2 /= 60;
          i3 = floor(h2);
          f3 = h2 - i3;
          p2 = v2 * (1 - s2);
          q5 = v2 * (1 - s2 * f3);
          t = v2 * (1 - s2 * (1 - f3));
          switch (i3) {
            case 0:
              ref = [v2, t, p2], r = ref[0], g2 = ref[1], b4 = ref[2];
              break;
            case 1:
              ref1 = [q5, v2, p2], r = ref1[0], g2 = ref1[1], b4 = ref1[2];
              break;
            case 2:
              ref2 = [p2, v2, t], r = ref2[0], g2 = ref2[1], b4 = ref2[2];
              break;
            case 3:
              ref3 = [p2, q5, v2], r = ref3[0], g2 = ref3[1], b4 = ref3[2];
              break;
            case 4:
              ref4 = [t, p2, v2], r = ref4[0], g2 = ref4[1], b4 = ref4[2];
              break;
            case 5:
              ref5 = [v2, p2, q5], r = ref5[0], g2 = ref5[1], b4 = ref5[2];
          }
        }
        return [r, g2, b4, args.length > 3 ? args[3] : 1];
      };
      rgb2hsv = function() {
        var b4, delta, g2, h2, min4, r, ref, s2, v2;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        min4 = Math.min(r, g2, b4);
        max5 = Math.max(r, g2, b4);
        delta = max5 - min4;
        v2 = max5 / 255;
        if (max5 === 0) {
          h2 = Number.NaN;
          s2 = 0;
        } else {
          s2 = delta / max5;
          if (r === max5) {
            h2 = (g2 - b4) / delta;
          }
          if (g2 === max5) {
            h2 = 2 + (b4 - r) / delta;
          }
          if (b4 === max5) {
            h2 = 4 + (r - g2) / delta;
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
        }
        return [h2, s2, v2];
      };
      chroma.hsv = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["hsv"]), function() {
        });
      };
      _input.hsv = hsv2rgb;
      Color3.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };
      num2rgb = function(num) {
        var b4, g2, r;
        if (type2(num) === "number" && num >= 0 && num <= 16777215) {
          r = num >> 16;
          g2 = num >> 8 & 255;
          b4 = num & 255;
          return [r, g2, b4, 1];
        }
        console.warn("unknown num color: " + num);
        return [0, 0, 0, 1];
      };
      rgb2num = function() {
        var b4, g2, r, ref;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        return (r << 16) + (g2 << 8) + b4;
      };
      chroma.num = function(num) {
        return new Color3(num, "num");
      };
      Color3.prototype.num = function(mode2) {
        if (mode2 == null) {
          mode2 = "rgb";
        }
        return rgb2num(this._rgb, mode2);
      };
      _input.num = num2rgb;
      _guess_formats.push({
        p: 1,
        test: function(n2) {
          if (arguments.length === 1 && type2(n2) === "number" && n2 >= 0 && n2 <= 16777215) {
            return "num";
          }
        }
      });
      hcg2rgb = function() {
        var _c, _g, args, b4, c6, f3, g2, h2, i3, p2, q5, r, ref, ref1, ref2, ref3, ref4, ref5, t, v2;
        args = unpack(arguments);
        h2 = args[0], c6 = args[1], _g = args[2];
        c6 = c6 / 100;
        g2 = g2 / 100 * 255;
        _c = c6 * 255;
        if (c6 === 0) {
          r = g2 = b4 = _g;
        } else {
          if (h2 === 360) {
            h2 = 0;
          }
          if (h2 > 360) {
            h2 -= 360;
          }
          if (h2 < 0) {
            h2 += 360;
          }
          h2 /= 60;
          i3 = floor(h2);
          f3 = h2 - i3;
          p2 = _g * (1 - c6);
          q5 = p2 + _c * (1 - f3);
          t = p2 + _c * f3;
          v2 = p2 + _c;
          switch (i3) {
            case 0:
              ref = [v2, t, p2], r = ref[0], g2 = ref[1], b4 = ref[2];
              break;
            case 1:
              ref1 = [q5, v2, p2], r = ref1[0], g2 = ref1[1], b4 = ref1[2];
              break;
            case 2:
              ref2 = [p2, v2, t], r = ref2[0], g2 = ref2[1], b4 = ref2[2];
              break;
            case 3:
              ref3 = [p2, q5, v2], r = ref3[0], g2 = ref3[1], b4 = ref3[2];
              break;
            case 4:
              ref4 = [t, p2, v2], r = ref4[0], g2 = ref4[1], b4 = ref4[2];
              break;
            case 5:
              ref5 = [v2, p2, q5], r = ref5[0], g2 = ref5[1], b4 = ref5[2];
          }
        }
        return [r, g2, b4, args.length > 3 ? args[3] : 1];
      };
      rgb2hcg = function() {
        var _g, b4, c6, delta, g2, h2, min4, r, ref;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        min4 = Math.min(r, g2, b4);
        max5 = Math.max(r, g2, b4);
        delta = max5 - min4;
        c6 = delta * 100 / 255;
        _g = min4 / (255 - delta) * 100;
        if (delta === 0) {
          h2 = Number.NaN;
        } else {
          if (r === max5) {
            h2 = (g2 - b4) / delta;
          }
          if (g2 === max5) {
            h2 = 2 + (b4 - r) / delta;
          }
          if (b4 === max5) {
            h2 = 4 + (r - g2) / delta;
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
        }
        return [h2, c6, _g];
      };
      chroma.hcg = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["hcg"]), function() {
        });
      };
      _input.hcg = hcg2rgb;
      Color3.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
      };
      css2rgb = function(css) {
        var aa2, ab, hsl3, i3, m3, o, rgb3, w3;
        css = css.toLowerCase();
        if (chroma.colors != null && chroma.colors[css]) {
          return hex2rgb(chroma.colors[css]);
        }
        if (m3 = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
          rgb3 = m3.slice(1, 4);
          for (i3 = o = 0; o <= 2; i3 = ++o) {
            rgb3[i3] = +rgb3[i3];
          }
          rgb3[3] = 1;
        } else if (m3 = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb3 = m3.slice(1, 5);
          for (i3 = w3 = 0; w3 <= 3; i3 = ++w3) {
            rgb3[i3] = +rgb3[i3];
          }
        } else if (m3 = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          rgb3 = m3.slice(1, 4);
          for (i3 = aa2 = 0; aa2 <= 2; i3 = ++aa2) {
            rgb3[i3] = round(rgb3[i3] * 2.55);
          }
          rgb3[3] = 1;
        } else if (m3 = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb3 = m3.slice(1, 5);
          for (i3 = ab = 0; ab <= 2; i3 = ++ab) {
            rgb3[i3] = round(rgb3[i3] * 2.55);
          }
          rgb3[3] = +rgb3[3];
        } else if (m3 = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          hsl3 = m3.slice(1, 4);
          hsl3[1] *= 0.01;
          hsl3[2] *= 0.01;
          rgb3 = hsl2rgb3(hsl3);
          rgb3[3] = 1;
        } else if (m3 = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          hsl3 = m3.slice(1, 4);
          hsl3[1] *= 0.01;
          hsl3[2] *= 0.01;
          rgb3 = hsl2rgb3(hsl3);
          rgb3[3] = +m3[4];
        }
        return rgb3;
      };
      rgb2css = function(rgba3) {
        var mode2;
        mode2 = rgba3[3] < 1 ? "rgba" : "rgb";
        if (mode2 === "rgb") {
          return mode2 + "(" + rgba3.slice(0, 3).map(round).join(",") + ")";
        } else if (mode2 === "rgba") {
          return mode2 + "(" + rgba3.slice(0, 3).map(round).join(",") + "," + rgba3[3] + ")";
        } else {
        }
      };
      rnd = function(a4) {
        return round(a4 * 100) / 100;
      };
      hsl2css = function(hsl3, alpha) {
        var mode2;
        mode2 = alpha < 1 ? "hsla" : "hsl";
        hsl3[0] = rnd(hsl3[0] || 0);
        hsl3[1] = rnd(hsl3[1] * 100) + "%";
        hsl3[2] = rnd(hsl3[2] * 100) + "%";
        if (mode2 === "hsla") {
          hsl3[3] = alpha;
        }
        return mode2 + "(" + hsl3.join(",") + ")";
      };
      _input.css = function(h2) {
        return css2rgb(h2);
      };
      chroma.css = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["css"]), function() {
        });
      };
      Color3.prototype.css = function(mode2) {
        if (mode2 == null) {
          mode2 = "rgb";
        }
        if (mode2.slice(0, 3) === "rgb") {
          return rgb2css(this._rgb);
        } else if (mode2.slice(0, 3) === "hsl") {
          return hsl2css(this.hsl(), this.alpha());
        }
      };
      _input.named = function(name) {
        return hex2rgb(w3cx11[name]);
      };
      _guess_formats.push({
        p: 5,
        test: function(n2) {
          if (arguments.length === 1 && w3cx11[n2] != null) {
            return "named";
          }
        }
      });
      Color3.prototype.name = function(n2) {
        var h2, k4;
        if (arguments.length) {
          if (w3cx11[n2]) {
            this._rgb = hex2rgb(w3cx11[n2]);
          }
          this._rgb[3] = 1;
          this;
        }
        h2 = this.hex("rgb");
        for (k4 in w3cx11) {
          if (h2 === w3cx11[k4]) {
            return k4;
          }
        }
        return h2;
      };
      lch2lab = function() {
        var c6, h2, l, ref;
        ref = unpack(arguments), l = ref[0], c6 = ref[1], h2 = ref[2];
        h2 = h2 * DEG2RAD;
        return [l, cos2(h2) * c6, sin2(h2) * c6];
      };
      lch2rgb = function() {
        var L3, a4, args, b4, c6, g2, h2, l, r, ref, ref1;
        args = unpack(arguments);
        l = args[0], c6 = args[1], h2 = args[2];
        ref = lch2lab(l, c6, h2), L3 = ref[0], a4 = ref[1], b4 = ref[2];
        ref1 = lab2rgb(L3, a4, b4), r = ref1[0], g2 = ref1[1], b4 = ref1[2];
        return [r, g2, b4, args.length > 3 ? args[3] : 1];
      };
      lab2lch = function() {
        var a4, b4, c6, h2, l, ref;
        ref = unpack(arguments), l = ref[0], a4 = ref[1], b4 = ref[2];
        c6 = sqrt5(a4 * a4 + b4 * b4);
        h2 = (atan22(b4, a4) * RAD2DEG + 360) % 360;
        if (round(c6 * 1e4) === 0) {
          h2 = Number.NaN;
        }
        return [l, c6, h2];
      };
      rgb2lch = function() {
        var a4, b4, g2, l, r, ref, ref1;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        ref1 = rgb2lab(r, g2, b4), l = ref1[0], a4 = ref1[1], b4 = ref1[2];
        return lab2lch(l, a4, b4);
      };
      chroma.lch = function() {
        var args;
        args = unpack(arguments);
        return new Color3(args, "lch");
      };
      chroma.hcl = function() {
        var args;
        args = unpack(arguments);
        return new Color3(args, "hcl");
      };
      _input.lch = lch2rgb;
      _input.hcl = function() {
        var c6, h2, l, ref;
        ref = unpack(arguments), h2 = ref[0], c6 = ref[1], l = ref[2];
        return lch2rgb([l, c6, h2]);
      };
      Color3.prototype.lch = function() {
        return rgb2lch(this._rgb);
      };
      Color3.prototype.hcl = function() {
        return rgb2lch(this._rgb).reverse();
      };
      rgb2cmyk = function(mode2) {
        var b4, c6, f3, g2, k4, m3, r, ref, y4;
        if (mode2 == null) {
          mode2 = "rgb";
        }
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        r = r / 255;
        g2 = g2 / 255;
        b4 = b4 / 255;
        k4 = 1 - Math.max(r, Math.max(g2, b4));
        f3 = k4 < 1 ? 1 / (1 - k4) : 0;
        c6 = (1 - r - k4) * f3;
        m3 = (1 - g2 - k4) * f3;
        y4 = (1 - b4 - k4) * f3;
        return [c6, m3, y4, k4];
      };
      cmyk2rgb = function() {
        var alpha, args, b4, c6, g2, k4, m3, r, y4;
        args = unpack(arguments);
        c6 = args[0], m3 = args[1], y4 = args[2], k4 = args[3];
        alpha = args.length > 4 ? args[4] : 1;
        if (k4 === 1) {
          return [0, 0, 0, alpha];
        }
        r = c6 >= 1 ? 0 : 255 * (1 - c6) * (1 - k4);
        g2 = m3 >= 1 ? 0 : 255 * (1 - m3) * (1 - k4);
        b4 = y4 >= 1 ? 0 : 255 * (1 - y4) * (1 - k4);
        return [r, g2, b4, alpha];
      };
      _input.cmyk = function() {
        return cmyk2rgb(unpack(arguments));
      };
      chroma.cmyk = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["cmyk"]), function() {
        });
      };
      Color3.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
      };
      _input.gl = function() {
        var i3, k4, o, rgb3, v2;
        rgb3 = function() {
          var ref, results;
          ref = unpack(arguments);
          results = [];
          for (k4 in ref) {
            v2 = ref[k4];
            results.push(v2);
          }
          return results;
        }.apply(this, arguments);
        for (i3 = o = 0; o <= 2; i3 = ++o) {
          rgb3[i3] *= 255;
        }
        return rgb3;
      };
      chroma.gl = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["gl"]), function() {
        });
      };
      Color3.prototype.gl = function() {
        var rgb3;
        rgb3 = this._rgb;
        return [rgb3[0] / 255, rgb3[1] / 255, rgb3[2] / 255, rgb3[3]];
      };
      rgb2luminance = function(r, g2, b4) {
        var ref;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        r = luminance_x(r);
        g2 = luminance_x(g2);
        b4 = luminance_x(b4);
        return 0.2126 * r + 0.7152 * g2 + 0.0722 * b4;
      };
      luminance_x = function(x5) {
        x5 /= 255;
        if (x5 <= 0.03928) {
          return x5 / 12.92;
        } else {
          return pow3((x5 + 0.055) / 1.055, 2.4);
        }
      };
      interpolate_rgb = function(col1, col2, f3, m3) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color3(xyz0[0] + f3 * (xyz1[0] - xyz0[0]), xyz0[1] + f3 * (xyz1[1] - xyz0[1]), xyz0[2] + f3 * (xyz1[2] - xyz0[2]), m3);
      };
      _interpolators.push(["rgb", interpolate_rgb]);
      Color3.prototype.luminance = function(lum, mode2) {
        var cur_lum, eps2, max_iter, rgba3, test;
        if (mode2 == null) {
          mode2 = "rgb";
        }
        if (!arguments.length) {
          return rgb2luminance(this._rgb);
        }
        rgba3 = this._rgb;
        if (lum === 0) {
          rgba3 = [0, 0, 0, this._rgb[3]];
        } else if (lum === 1) {
          rgba3 = [255, 255, 255, this[3]];
        } else {
          cur_lum = rgb2luminance(this._rgb);
          eps2 = 1e-7;
          max_iter = 20;
          test = function(l, h2) {
            var lm, m3;
            m3 = l.interpolate(h2, 0.5, mode2);
            lm = m3.luminance();
            if (Math.abs(lum - lm) < eps2 || !max_iter--) {
              return m3;
            }
            if (lm > lum) {
              return test(l, m3);
            }
            return test(m3, h2);
          };
          if (cur_lum > lum) {
            rgba3 = test(chroma("black"), this).rgba();
          } else {
            rgba3 = test(this, chroma("white")).rgba();
          }
        }
        return chroma(rgba3).alpha(this.alpha());
      };
      temperature2rgb = function(kelvin) {
        var b4, g2, r, temp;
        temp = kelvin / 100;
        if (temp < 66) {
          r = 255;
          g2 = -155.25485562709179 - 0.44596950469579133 * (g2 = temp - 2) + 104.49216199393888 * log3(g2);
          b4 = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b4 = temp - 10) + 115.67994401066147 * log3(b4);
        } else {
          r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log3(r);
          g2 = 325.4494125711974 + 0.07943456536662342 * (g2 = temp - 50) - 28.0852963507957 * log3(g2);
          b4 = 255;
        }
        return [r, g2, b4];
      };
      rgb2temperature = function() {
        var b4, eps2, g2, maxTemp, minTemp, r, ref, rgb3, temp;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        minTemp = 1e3;
        maxTemp = 4e4;
        eps2 = 0.4;
        while (maxTemp - minTemp > eps2) {
          temp = (maxTemp + minTemp) * 0.5;
          rgb3 = temperature2rgb(temp);
          if (rgb3[2] / rgb3[0] >= b4 / r) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round(temp);
      };
      chroma.temperature = chroma.kelvin = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["temperature"]), function() {
        });
      };
      _input.temperature = _input.kelvin = _input.K = temperature2rgb;
      Color3.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
      };
      Color3.prototype.kelvin = Color3.prototype.temperature;
      chroma.contrast = function(a4, b4) {
        var l1, l2, ref, ref1;
        if ((ref = type2(a4)) === "string" || ref === "number") {
          a4 = new Color3(a4);
        }
        if ((ref1 = type2(b4)) === "string" || ref1 === "number") {
          b4 = new Color3(b4);
        }
        l1 = a4.luminance();
        l2 = b4.luminance();
        if (l1 > l2) {
          return (l1 + 0.05) / (l2 + 0.05);
        } else {
          return (l2 + 0.05) / (l1 + 0.05);
        }
      };
      chroma.distance = function(a4, b4, mode2) {
        var d2, i3, l1, l2, ref, ref1, sum_sq;
        if (mode2 == null) {
          mode2 = "lab";
        }
        if ((ref = type2(a4)) === "string" || ref === "number") {
          a4 = new Color3(a4);
        }
        if ((ref1 = type2(b4)) === "string" || ref1 === "number") {
          b4 = new Color3(b4);
        }
        l1 = a4.get(mode2);
        l2 = b4.get(mode2);
        sum_sq = 0;
        for (i3 in l1) {
          d2 = (l1[i3] || 0) - (l2[i3] || 0);
          sum_sq += d2 * d2;
        }
        return Math.sqrt(sum_sq);
      };
      chroma.deltaE = function(a4, b4, L3, C8) {
        var L1, L22, a1, a22, b1, b22, c1, c22, c42, dH2, delA, delB, delC, delL, f3, h1, ref, ref1, ref2, ref3, sc, sh, sl2, t, v1, v2, v3;
        if (L3 == null) {
          L3 = 1;
        }
        if (C8 == null) {
          C8 = 1;
        }
        if ((ref = type2(a4)) === "string" || ref === "number") {
          a4 = new Color3(a4);
        }
        if ((ref1 = type2(b4)) === "string" || ref1 === "number") {
          b4 = new Color3(b4);
        }
        ref2 = a4.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
        ref3 = b4.lab(), L22 = ref3[0], a22 = ref3[1], b22 = ref3[2];
        c1 = sqrt5(a1 * a1 + b1 * b1);
        c22 = sqrt5(a22 * a22 + b22 * b22);
        sl2 = L1 < 16 ? 0.511 : 0.040975 * L1 / (1 + 0.01765 * L1);
        sc = 0.0638 * c1 / (1 + 0.0131 * c1) + 0.638;
        h1 = c1 < 1e-6 ? 0 : atan22(b1, a1) * 180 / PI;
        while (h1 < 0) {
          h1 += 360;
        }
        while (h1 >= 360) {
          h1 -= 360;
        }
        t = h1 >= 164 && h1 <= 345 ? 0.56 + abs3(0.2 * cos2(PI * (h1 + 168) / 180)) : 0.36 + abs3(0.4 * cos2(PI * (h1 + 35) / 180));
        c42 = c1 * c1 * c1 * c1;
        f3 = sqrt5(c42 / (c42 + 1900));
        sh = sc * (f3 * t + 1 - f3);
        delL = L1 - L22;
        delC = c1 - c22;
        delA = a1 - a22;
        delB = b1 - b22;
        dH2 = delA * delA + delB * delB - delC * delC;
        v1 = delL / (L3 * sl2);
        v2 = delC / (C8 * sc);
        v3 = sh;
        return sqrt5(v1 * v1 + v2 * v2 + dH2 / (v3 * v3));
      };
      Color3.prototype.get = function(modechan) {
        var channel, i3, me3, mode2, ref, src;
        me3 = this;
        ref = modechan.split("."), mode2 = ref[0], channel = ref[1];
        src = me3[mode2]();
        if (channel) {
          i3 = mode2.indexOf(channel);
          if (i3 > -1) {
            return src[i3];
          } else {
            return console.warn("unknown channel " + channel + " in mode " + mode2);
          }
        } else {
          return src;
        }
      };
      Color3.prototype.set = function(modechan, value) {
        var channel, i3, me3, mode2, ref, src;
        me3 = this;
        ref = modechan.split("."), mode2 = ref[0], channel = ref[1];
        if (channel) {
          src = me3[mode2]();
          i3 = mode2.indexOf(channel);
          if (i3 > -1) {
            if (type2(value) === "string") {
              switch (value.charAt(0)) {
                case "+":
                  src[i3] += +value;
                  break;
                case "-":
                  src[i3] += +value;
                  break;
                case "*":
                  src[i3] *= +value.substr(1);
                  break;
                case "/":
                  src[i3] /= +value.substr(1);
                  break;
                default:
                  src[i3] = +value;
              }
            } else {
              src[i3] = value;
            }
          } else {
            console.warn("unknown channel " + channel + " in mode " + mode2);
          }
        } else {
          src = value;
        }
        return chroma(src, mode2).alpha(me3.alpha());
      };
      Color3.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };
      Color3.prototype.alpha = function(a4) {
        if (arguments.length) {
          return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a4]);
        }
        return this._rgb[3];
      };
      Color3.prototype.darken = function(amount) {
        var lab, me3;
        if (amount == null) {
          amount = 1;
        }
        me3 = this;
        lab = me3.lab();
        lab[0] -= LAB_CONSTANTS.Kn * amount;
        return chroma.lab(lab).alpha(me3.alpha());
      };
      Color3.prototype.brighten = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.darken(-amount);
      };
      Color3.prototype.darker = Color3.prototype.darken;
      Color3.prototype.brighter = Color3.prototype.brighten;
      Color3.prototype.saturate = function(amount) {
        var lch, me3;
        if (amount == null) {
          amount = 1;
        }
        me3 = this;
        lch = me3.lch();
        lch[1] += amount * LAB_CONSTANTS.Kn;
        if (lch[1] < 0) {
          lch[1] = 0;
        }
        return chroma.lch(lch).alpha(me3.alpha());
      };
      Color3.prototype.desaturate = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.saturate(-amount);
      };
      Color3.prototype.premultiply = function() {
        var a4, rgb3;
        rgb3 = this.rgb();
        a4 = this.alpha();
        return chroma(rgb3[0] * a4, rgb3[1] * a4, rgb3[2] * a4, a4);
      };
      blend = function(bottom, top, mode2) {
        if (!blend[mode2]) {
          throw "unknown blend mode " + mode2;
        }
        return blend[mode2](bottom, top);
      };
      blend_f = function(f3) {
        return function(bottom, top) {
          var c0, c1;
          c0 = chroma(top).rgb();
          c1 = chroma(bottom).rgb();
          return chroma(f3(c0, c1), "rgb");
        };
      };
      each = function(f3) {
        return function(c0, c1) {
          var i3, o, out;
          out = [];
          for (i3 = o = 0; o <= 3; i3 = ++o) {
            out[i3] = f3(c0[i3], c1[i3]);
          }
          return out;
        };
      };
      normal = function(a4, b4) {
        return a4;
      };
      multiply = function(a4, b4) {
        return a4 * b4 / 255;
      };
      darken = function(a4, b4) {
        if (a4 > b4) {
          return b4;
        } else {
          return a4;
        }
      };
      lighten = function(a4, b4) {
        if (a4 > b4) {
          return a4;
        } else {
          return b4;
        }
      };
      screen = function(a4, b4) {
        return 255 * (1 - (1 - a4 / 255) * (1 - b4 / 255));
      };
      overlay = function(a4, b4) {
        if (b4 < 128) {
          return 2 * a4 * b4 / 255;
        } else {
          return 255 * (1 - 2 * (1 - a4 / 255) * (1 - b4 / 255));
        }
      };
      burn = function(a4, b4) {
        return 255 * (1 - (1 - b4 / 255) / (a4 / 255));
      };
      dodge = function(a4, b4) {
        if (a4 === 255) {
          return 255;
        }
        a4 = 255 * (b4 / 255) / (1 - a4 / 255);
        if (a4 > 255) {
          return 255;
        } else {
          return a4;
        }
      };
      blend.normal = blend_f(each(normal));
      blend.multiply = blend_f(each(multiply));
      blend.screen = blend_f(each(screen));
      blend.overlay = blend_f(each(overlay));
      blend.darken = blend_f(each(darken));
      blend.lighten = blend_f(each(lighten));
      blend.dodge = blend_f(each(dodge));
      blend.burn = blend_f(each(burn));
      chroma.blend = blend;
      chroma.analyze = function(data) {
        var len, o, r, val;
        r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        for (o = 0, len = data.length; o < len; o++) {
          val = data[o];
          if (val != null && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) {
              r.min = val;
            }
            if (val > r.max) {
              r.max = val;
            }
            r.count += 1;
          }
        }
        r.domain = [r.min, r.max];
        r.limits = function(mode2, num) {
          return chroma.limits(r, mode2, num);
        };
        return r;
      };
      chroma.scale = function(colors2, positions) {
        var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f3, getClass, getColor, resetCache, setColors, tmap;
        _mode = "rgb";
        _nacol = chroma("#ccc");
        _spread = 0;
        _fixed = false;
        _domain = [0, 1];
        _pos = [];
        _padding = [0, 0];
        _classes = false;
        _colors = [];
        _out = false;
        _min = 0;
        _max = 1;
        _correctLightness = false;
        _colorCache = {};
        _useCache = true;
        _gamma = 1;
        setColors = function(colors3) {
          var c6, col, o, ref, ref1, w3;
          if (colors3 == null) {
            colors3 = ["#fff", "#000"];
          }
          if (colors3 != null && type2(colors3) === "string" && chroma.brewer != null) {
            colors3 = chroma.brewer[colors3] || chroma.brewer[colors3.toLowerCase()] || colors3;
          }
          if (type2(colors3) === "array") {
            if (colors3.length === 1) {
              colors3 = [colors3[0], colors3[0]];
            }
            colors3 = colors3.slice(0);
            for (c6 = o = 0, ref = colors3.length - 1; 0 <= ref ? o <= ref : o >= ref; c6 = 0 <= ref ? ++o : --o) {
              col = colors3[c6];
              if (type2(col) === "string") {
                colors3[c6] = chroma(col);
              }
            }
            _pos.length = 0;
            for (c6 = w3 = 0, ref1 = colors3.length - 1; 0 <= ref1 ? w3 <= ref1 : w3 >= ref1; c6 = 0 <= ref1 ? ++w3 : --w3) {
              _pos.push(c6 / (colors3.length - 1));
            }
          }
          resetCache();
          return _colors = colors3;
        };
        getClass = function(value) {
          var i3, n2;
          if (_classes != null) {
            n2 = _classes.length - 1;
            i3 = 0;
            while (i3 < n2 && value >= _classes[i3]) {
              i3++;
            }
            return i3 - 1;
          }
          return 0;
        };
        tmap = function(t) {
          return t;
        };
        classifyValue = function(value) {
          var i3, maxc, minc, n2, val;
          val = value;
          if (_classes.length > 2) {
            n2 = _classes.length - 1;
            i3 = getClass(value);
            minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
            maxc = _classes[n2 - 1] + (_classes[n2] - _classes[n2 - 1]) * (1 - _spread * 0.5);
            val = _min + (_classes[i3] + (_classes[i3 + 1] - _classes[i3]) * 0.5 - minc) / (maxc - minc) * (_max - _min);
          }
          return val;
        };
        getColor = function(val, bypassMap) {
          var c6, col, i3, k4, o, p2, ref, t;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val) || val === null) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              c6 = getClass(val);
              t = c6 / (_classes.length - 2);
            } else if (_max !== _min) {
              t = (val - _min) / (_max - _min);
            } else {
              t = 1;
            }
          } else {
            t = val;
          }
          if (!bypassMap) {
            t = tmap(t);
          }
          if (_gamma !== 1) {
            t = pow3(t, _gamma);
          }
          t = _padding[0] + t * (1 - _padding[0] - _padding[1]);
          t = Math.min(1, Math.max(0, t));
          k4 = Math.floor(t * 1e4);
          if (_useCache && _colorCache[k4]) {
            col = _colorCache[k4];
          } else {
            if (type2(_colors) === "array") {
              for (i3 = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i3 = 0 <= ref ? ++o : --o) {
                p2 = _pos[i3];
                if (t <= p2) {
                  col = _colors[i3];
                  break;
                }
                if (t >= p2 && i3 === _pos.length - 1) {
                  col = _colors[i3];
                  break;
                }
                if (t > p2 && t < _pos[i3 + 1]) {
                  t = (t - p2) / (_pos[i3 + 1] - p2);
                  col = chroma.interpolate(_colors[i3], _colors[i3 + 1], t, _mode);
                  break;
                }
              }
            } else if (type2(_colors) === "function") {
              col = _colors(t);
            }
            if (_useCache) {
              _colorCache[k4] = col;
            }
          }
          return col;
        };
        resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors2);
        f3 = function(v2) {
          var c6;
          c6 = chroma(getColor(v2));
          if (_out && c6[_out]) {
            return c6[_out]();
          } else {
            return c6;
          }
        };
        f3.classes = function(classes) {
          var d2;
          if (classes != null) {
            if (type2(classes) === "array") {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              d2 = chroma.analyze(_domain);
              if (classes === 0) {
                _classes = [d2.min, d2.max];
              } else {
                _classes = chroma.limits(d2, "e", classes);
              }
            }
            return f3;
          }
          return _classes;
        };
        f3.domain = function(domain) {
          var c6, d2, k4, len, o, ref, w3;
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          k4 = _colors.length;
          if (domain.length === k4 && _min !== _max) {
            for (o = 0, len = domain.length; o < len; o++) {
              d2 = domain[o];
              _pos.push((d2 - _min) / (_max - _min));
            }
          } else {
            for (c6 = w3 = 0, ref = k4 - 1; 0 <= ref ? w3 <= ref : w3 >= ref; c6 = 0 <= ref ? ++w3 : --w3) {
              _pos.push(c6 / (k4 - 1));
            }
          }
          _domain = [_min, _max];
          return f3;
        };
        f3.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f3;
        };
        f3.range = function(colors3, _pos2) {
          setColors(colors3, _pos2);
          return f3;
        };
        f3.out = function(_o2) {
          _out = _o2;
          return f3;
        };
        f3.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f3;
        };
        f3.correctLightness = function(v2) {
          if (v2 == null) {
            v2 = true;
          }
          _correctLightness = v2;
          resetCache();
          if (_correctLightness) {
            tmap = function(t) {
              var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t02, t12;
              L0 = getColor(0, true).lab()[0];
              L1 = getColor(1, true).lab()[0];
              pol = L0 > L1;
              L_actual = getColor(t, true).lab()[0];
              L_ideal = L0 + (L1 - L0) * t;
              L_diff = L_actual - L_ideal;
              t02 = 0;
              t12 = 1;
              max_iter = 20;
              while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t02 = t;
                    t += (t12 - t) * 0.5;
                  } else {
                    t12 = t;
                    t += (t02 - t) * 0.5;
                  }
                  L_actual = getColor(t, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t;
            };
          } else {
            tmap = function(t) {
              return t;
            };
          }
          return f3;
        };
        f3.padding = function(p2) {
          if (p2 != null) {
            if (type2(p2) === "number") {
              p2 = [p2, p2];
            }
            _padding = p2;
            return f3;
          } else {
            return _padding;
          }
        };
        f3.colors = function(numColors, out) {
          var dd, dm, i3, o, ref, result, results, samples, w3;
          if (arguments.length < 2) {
            out = "hex";
          }
          result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f3(0.5)];
          } else if (numColors > 1) {
            dm = _domain[0];
            dd = _domain[1] - dm;
            result = function() {
              results = [];
              for (var o2 = 0; 0 <= numColors ? o2 < numColors : o2 > numColors; 0 <= numColors ? o2++ : o2--) {
                results.push(o2);
              }
              return results;
            }.apply(this).map(function(i4) {
              return f3(dm + i4 / (numColors - 1) * dd);
            });
          } else {
            colors2 = [];
            samples = [];
            if (_classes && _classes.length > 2) {
              for (i3 = w3 = 1, ref = _classes.length; 1 <= ref ? w3 < ref : w3 > ref; i3 = 1 <= ref ? ++w3 : --w3) {
                samples.push((_classes[i3 - 1] + _classes[i3]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v2) {
              return f3(v2);
            });
          }
          if (chroma[out]) {
            result = result.map(function(c6) {
              return c6[out]();
            });
          }
          return result;
        };
        f3.cache = function(c6) {
          if (c6 != null) {
            _useCache = c6;
            return f3;
          } else {
            return _useCache;
          }
        };
        f3.gamma = function(g2) {
          if (g2 != null) {
            _gamma = g2;
            return f3;
          } else {
            return _gamma;
          }
        };
        f3.nodata = function(d2) {
          if (d2 != null) {
            _nacol = chroma(d2);
            return f3;
          } else {
            return _nacol;
          }
        };
        return f3;
      };
      if (chroma.scales == null) {
        chroma.scales = {};
      }
      chroma.scales.cool = function() {
        return chroma.scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);
      };
      chroma.scales.hot = function() {
        return chroma.scale(["#000", "#f00", "#ff0", "#fff"], [0, 0.25, 0.75, 1]).mode("rgb");
      };
      chroma.analyze = function(data, key, filter3) {
        var add, k4, len, o, r, val, visit;
        r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (filter3 == null) {
          filter3 = function() {
            return true;
          };
        }
        add = function(val2) {
          if (val2 != null && !isNaN(val2)) {
            r.values.push(val2);
            r.sum += val2;
            if (val2 < r.min) {
              r.min = val2;
            }
            if (val2 > r.max) {
              r.max = val2;
            }
            r.count += 1;
          }
        };
        visit = function(val2, k5) {
          if (filter3(val2, k5)) {
            if (key != null && type2(key) === "function") {
              return add(key(val2));
            } else if (key != null && type2(key) === "string" || type2(key) === "number") {
              return add(val2[key]);
            } else {
              return add(val2);
            }
          }
        };
        if (type2(data) === "array") {
          for (o = 0, len = data.length; o < len; o++) {
            val = data[o];
            visit(val);
          }
        } else {
          for (k4 in data) {
            val = data[k4];
            visit(val, k4);
          }
        }
        r.domain = [r.min, r.max];
        r.limits = function(mode2, num) {
          return chroma.limits(r, mode2, num);
        };
        return r;
      };
      chroma.limits = function(data, mode2, num) {
        var aa2, ab, ac, ad, ae4, af, ag, ah, ai, aj, ak, al2, am, assignments, best, centroids, cluster, clusterSizes, dist, i3, j5, kClusters, limits, max_log, min4, min_log, mindist, n2, nb_iters, newCentroids, o, p2, pb, pr2, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum3, tmpKMeansBreaks, v2, value, values, w3;
        if (mode2 == null) {
          mode2 = "equal";
        }
        if (num == null) {
          num = 7;
        }
        if (type2(data) === "array") {
          data = chroma.analyze(data);
        }
        min4 = data.min;
        max5 = data.max;
        sum3 = data.sum;
        values = data.values.sort(function(a4, b4) {
          return a4 - b4;
        });
        if (num === 1) {
          return [min4, max5];
        }
        limits = [];
        if (mode2.substr(0, 1) === "c") {
          limits.push(min4);
          limits.push(max5);
        }
        if (mode2.substr(0, 1) === "e") {
          limits.push(min4);
          for (i3 = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i3 = 1 <= ref ? ++o : --o) {
            limits.push(min4 + i3 / num * (max5 - min4));
          }
          limits.push(max5);
        } else if (mode2.substr(0, 1) === "l") {
          if (min4 <= 0) {
            throw "Logarithmic scales are only possible for values > 0";
          }
          min_log = Math.LOG10E * log3(min4);
          max_log = Math.LOG10E * log3(max5);
          limits.push(min4);
          for (i3 = w3 = 1, ref1 = num - 1; 1 <= ref1 ? w3 <= ref1 : w3 >= ref1; i3 = 1 <= ref1 ? ++w3 : --w3) {
            limits.push(pow3(10, min_log + i3 / num * (max_log - min_log)));
          }
          limits.push(max5);
        } else if (mode2.substr(0, 1) === "q") {
          limits.push(min4);
          for (i3 = aa2 = 1, ref2 = num - 1; 1 <= ref2 ? aa2 <= ref2 : aa2 >= ref2; i3 = 1 <= ref2 ? ++aa2 : --aa2) {
            p2 = (values.length - 1) * i3 / num;
            pb = floor(p2);
            if (pb === p2) {
              limits.push(values[pb]);
            } else {
              pr2 = p2 - pb;
              limits.push(values[pb] * (1 - pr2) + values[pb + 1] * pr2);
            }
          }
          limits.push(max5);
        } else if (mode2.substr(0, 1) === "k") {
          n2 = values.length;
          assignments = new Array(n2);
          clusterSizes = new Array(num);
          repeat = true;
          nb_iters = 0;
          centroids = null;
          centroids = [];
          centroids.push(min4);
          for (i3 = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i3 = 1 <= ref3 ? ++ab : --ab) {
            centroids.push(min4 + i3 / num * (max5 - min4));
          }
          centroids.push(max5);
          while (repeat) {
            for (j5 = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j5 = 0 <= ref4 ? ++ac : --ac) {
              clusterSizes[j5] = 0;
            }
            for (i3 = ad = 0, ref5 = n2 - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i3 = 0 <= ref5 ? ++ad : --ad) {
              value = values[i3];
              mindist = Number.MAX_VALUE;
              for (j5 = ae4 = 0, ref6 = num - 1; 0 <= ref6 ? ae4 <= ref6 : ae4 >= ref6; j5 = 0 <= ref6 ? ++ae4 : --ae4) {
                dist = abs3(centroids[j5] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j5;
                }
              }
              clusterSizes[best]++;
              assignments[i3] = best;
            }
            newCentroids = new Array(num);
            for (j5 = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j5 = 0 <= ref7 ? ++af : --af) {
              newCentroids[j5] = null;
            }
            for (i3 = ag = 0, ref8 = n2 - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i3 = 0 <= ref8 ? ++ag : --ag) {
              cluster = assignments[i3];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i3];
              } else {
                newCentroids[cluster] += values[i3];
              }
            }
            for (j5 = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j5 = 0 <= ref9 ? ++ah : --ah) {
              newCentroids[j5] *= 1 / clusterSizes[j5];
            }
            repeat = false;
            for (j5 = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j5 = 0 <= ref10 ? ++ai : --ai) {
              if (newCentroids[j5] !== centroids[i3]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          kClusters = {};
          for (j5 = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j5 = 0 <= ref11 ? ++aj : --aj) {
            kClusters[j5] = [];
          }
          for (i3 = ak = 0, ref12 = n2 - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i3 = 0 <= ref12 ? ++ak : --ak) {
            cluster = assignments[i3];
            kClusters[cluster].push(values[i3]);
          }
          tmpKMeansBreaks = [];
          for (j5 = al2 = 0, ref13 = num - 1; 0 <= ref13 ? al2 <= ref13 : al2 >= ref13; j5 = 0 <= ref13 ? ++al2 : --al2) {
            tmpKMeansBreaks.push(kClusters[j5][0]);
            tmpKMeansBreaks.push(kClusters[j5][kClusters[j5].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a4, b4) {
            return a4 - b4;
          });
          limits.push(tmpKMeansBreaks[0]);
          for (i3 = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i3 = am += 2) {
            v2 = tmpKMeansBreaks[i3];
            if (!isNaN(v2) && limits.indexOf(v2) === -1) {
              limits.push(v2);
            }
          }
        }
        return limits;
      };
      hsi2rgb = function(h2, s2, i3) {
        var args, b4, g2, r;
        args = unpack(arguments);
        h2 = args[0], s2 = args[1], i3 = args[2];
        if (isNaN(h2)) {
          h2 = 0;
        }
        h2 /= 360;
        if (h2 < 1 / 3) {
          b4 = (1 - s2) / 3;
          r = (1 + s2 * cos2(TWOPI * h2) / cos2(PITHIRD - TWOPI * h2)) / 3;
          g2 = 1 - (b4 + r);
        } else if (h2 < 2 / 3) {
          h2 -= 1 / 3;
          r = (1 - s2) / 3;
          g2 = (1 + s2 * cos2(TWOPI * h2) / cos2(PITHIRD - TWOPI * h2)) / 3;
          b4 = 1 - (r + g2);
        } else {
          h2 -= 2 / 3;
          g2 = (1 - s2) / 3;
          b4 = (1 + s2 * cos2(TWOPI * h2) / cos2(PITHIRD - TWOPI * h2)) / 3;
          r = 1 - (g2 + b4);
        }
        r = limit(i3 * r * 3);
        g2 = limit(i3 * g2 * 3);
        b4 = limit(i3 * b4 * 3);
        return [r * 255, g2 * 255, b4 * 255, args.length > 3 ? args[3] : 1];
      };
      rgb2hsi = function() {
        var b4, g2, h2, i3, min4, r, ref, s2;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b4 = ref[2];
        TWOPI = Math.PI * 2;
        r /= 255;
        g2 /= 255;
        b4 /= 255;
        min4 = Math.min(r, g2, b4);
        i3 = (r + g2 + b4) / 3;
        s2 = 1 - min4 / i3;
        if (s2 === 0) {
          h2 = 0;
        } else {
          h2 = (r - g2 + (r - b4)) / 2;
          h2 /= Math.sqrt((r - g2) * (r - g2) + (r - b4) * (g2 - b4));
          h2 = Math.acos(h2);
          if (b4 > g2) {
            h2 = TWOPI - h2;
          }
          h2 /= TWOPI;
        }
        return [h2 * 360, s2, i3];
      };
      chroma.hsi = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice5.call(arguments).concat(["hsi"]), function() {
        });
      };
      _input.hsi = hsi2rgb;
      Color3.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
      };
      interpolate_hsx = function(col1, col2, f3, m3) {
        var dh, hue3, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
        if (m3 === "hsl") {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m3 === "hsv") {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m3 === "hcg") {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m3 === "hsi") {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m3 === "lch" || m3 === "hcl") {
          m3 = "hcl";
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        }
        if (m3.substr(0, 1) === "h") {
          hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
          hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
        }
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh = hue1 + 360 - hue0;
          } else {
            dh = hue1 - hue0;
          }
          hue3 = hue0 + f3 * dh;
        } else if (!isNaN(hue0)) {
          hue3 = hue0;
          if ((lbv1 === 1 || lbv1 === 0) && m3 !== "hsv") {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue3 = hue1;
          if ((lbv0 === 1 || lbv0 === 0) && m3 !== "hsv") {
            sat = sat1;
          }
        } else {
          hue3 = Number.NaN;
        }
        if (sat == null) {
          sat = sat0 + f3 * (sat1 - sat0);
        }
        lbv = lbv0 + f3 * (lbv1 - lbv0);
        return res = chroma[m3](hue3, sat, lbv);
      };
      _interpolators = _interpolators.concat(function() {
        var len, o, ref, results;
        ref = ["hsv", "hsl", "hsi", "hcl", "lch", "hcg"];
        results = [];
        for (o = 0, len = ref.length; o < len; o++) {
          m2 = ref[o];
          results.push([m2, interpolate_hsx]);
        }
        return results;
      }());
      interpolate_num = function(col1, col2, f3, m3) {
        var n1, n2;
        n1 = col1.num();
        n2 = col2.num();
        return chroma.num(n1 + (n2 - n1) * f3, "num");
      };
      _interpolators.push(["num", interpolate_num]);
      interpolate_lab = function(col1, col2, f3, m3) {
        var res, xyz0, xyz1;
        xyz0 = col1.lab();
        xyz1 = col2.lab();
        return res = new Color3(xyz0[0] + f3 * (xyz1[0] - xyz0[0]), xyz0[1] + f3 * (xyz1[1] - xyz0[1]), xyz0[2] + f3 * (xyz1[2] - xyz0[2]), m3);
      };
      _interpolators.push(["lab", interpolate_lab]);
    }).call(exports);
  }
});

// node_modules/d3-array/src/ascending.js
function ascending(a4, b4) {
  return a4 == null || b4 == null ? NaN : a4 < b4 ? -1 : a4 > b4 ? 1 : a4 >= b4 ? 0 : NaN;
}
var init_ascending = __esm({
  "node_modules/d3-array/src/ascending.js"() {
  }
});

// node_modules/d3-array/src/descending.js
function descending(a4, b4) {
  return a4 == null || b4 == null ? NaN : b4 < a4 ? -1 : b4 > a4 ? 1 : b4 >= a4 ? 0 : NaN;
}
var init_descending = __esm({
  "node_modules/d3-array/src/descending.js"() {
  }
});

// node_modules/d3-array/src/bisector.js
function bisector(f3) {
  let compare1, compare2, delta;
  if (f3.length !== 2) {
    compare1 = ascending;
    compare2 = (d2, x5) => ascending(f3(d2), x5);
    delta = (d2, x5) => f3(d2) - x5;
  } else {
    compare1 = f3 === ascending || f3 === descending ? f3 : zero;
    compare2 = f3;
    delta = f3;
  }
  function left(a4, x5, lo2 = 0, hi = a4.length) {
    if (lo2 < hi) {
      if (compare1(x5, x5) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a4[mid], x5) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function right(a4, x5, lo2 = 0, hi = a4.length) {
    if (lo2 < hi) {
      if (compare1(x5, x5) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a4[mid], x5) <= 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function center(a4, x5, lo2 = 0, hi = a4.length) {
    const i3 = left(a4, x5, lo2, hi - 1);
    return i3 > lo2 && delta(a4[i3 - 1], x5) > -delta(a4[i3], x5) ? i3 - 1 : i3;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}
var init_bisector = __esm({
  "node_modules/d3-array/src/bisector.js"() {
    init_ascending();
    init_descending();
  }
});

// node_modules/d3-array/src/number.js
function number(x5) {
  return x5 === null ? NaN : +x5;
}
function* numbers(values, valueof) {
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}
var init_number = __esm({
  "node_modules/d3-array/src/number.js"() {
  }
});

// node_modules/d3-array/src/bisect.js
var ascendingBisect, bisectRight, bisectLeft, bisectCenter, bisect_default;
var init_bisect = __esm({
  "node_modules/d3-array/src/bisect.js"() {
    init_ascending();
    init_bisector();
    init_number();
    ascendingBisect = bisector(ascending);
    bisectRight = ascendingBisect.right;
    bisectLeft = ascendingBisect.left;
    bisectCenter = bisector(number).center;
    bisect_default = bisectRight;
  }
});

// node_modules/d3-array/src/blur.js
function blur(values, r) {
  if (!((r = +r) >= 0))
    throw new RangeError("invalid r");
  let length3 = values.length;
  if (!((length3 = Math.floor(length3)) >= 0))
    throw new RangeError("invalid length");
  if (!length3 || !r)
    return values;
  const blur3 = blurf(r);
  const temp = values.slice();
  blur3(values, temp, 0, length3, 1);
  blur3(temp, values, 0, length3, 1);
  blur3(values, temp, 0, length3, 1);
  return values;
}
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0))
      throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0))
      throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0))
      throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0))
      throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry)
      return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
    } else if (blury) {
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    }
    return data;
  };
}
function blurh(blur3, T3, S5, w3, h2) {
  for (let y4 = 0, n2 = w3 * h2; y4 < n2; ) {
    blur3(T3, S5, y4, y4 += w3, 1);
  }
}
function blurv(blur3, T3, S5, w3, h2) {
  for (let x5 = 0, n2 = w3 * h2; x5 < w3; ++x5) {
    blur3(T3, S5, x5, x5 + n2, w3);
  }
}
function blurfImage(radius) {
  const blur3 = blurf(radius);
  return (T3, S5, start2, stop, step) => {
    start2 <<= 2, stop <<= 2, step <<= 2;
    blur3(T3, S5, start2 + 0, stop + 0, step);
    blur3(T3, S5, start2 + 1, stop + 1, step);
    blur3(T3, S5, start2 + 2, stop + 2, step);
    blur3(T3, S5, start2 + 3, stop + 3, step);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius)
    return bluri(radius);
  const t = radius - radius0;
  const w3 = 2 * radius + 1;
  return (T3, S5, start2, stop, step) => {
    if (!((stop -= step) >= start2))
      return;
    let sum3 = radius0 * S5[start2];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i3 = start2, j5 = start2 + s0; i3 < j5; i3 += step) {
      sum3 += S5[Math.min(stop, i3)];
    }
    for (let i3 = start2, j5 = stop; i3 <= j5; i3 += step) {
      sum3 += S5[Math.min(stop, i3 + s0)];
      T3[i3] = (sum3 + t * (S5[Math.max(start2, i3 - s1)] + S5[Math.min(stop, i3 + s1)])) / w3;
      sum3 -= S5[Math.max(start2, i3 - s0)];
    }
  };
}
function bluri(radius) {
  const w3 = 2 * radius + 1;
  return (T3, S5, start2, stop, step) => {
    if (!((stop -= step) >= start2))
      return;
    let sum3 = radius * S5[start2];
    const s2 = step * radius;
    for (let i3 = start2, j5 = start2 + s2; i3 < j5; i3 += step) {
      sum3 += S5[Math.min(stop, i3)];
    }
    for (let i3 = start2, j5 = stop; i3 <= j5; i3 += step) {
      sum3 += S5[Math.min(stop, i3 + s2)];
      T3[i3] = sum3 / w3;
      sum3 -= S5[Math.max(start2, i3 - s2)];
    }
  };
}
var blur2, blurImage;
var init_blur = __esm({
  "node_modules/d3-array/src/blur.js"() {
    blur2 = Blur2(blurf);
    blurImage = Blur2(blurfImage);
  }
});

// node_modules/d3-array/src/count.js
function count(values, valueof) {
  let count3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count3;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        ++count3;
      }
    }
  }
  return count3;
}
var init_count = __esm({
  "node_modules/d3-array/src/count.js"() {
  }
});

// node_modules/d3-array/src/cross.js
function length(array5) {
  return array5.length | 0;
}
function empty(length3) {
  return !(length3 > 0);
}
function arrayify(values) {
  return typeof values !== "object" || "length" in values ? values : Array.from(values);
}
function reducer(reduce2) {
  return (values) => reduce2(...values);
}
function cross(...values) {
  const reduce2 = typeof values[values.length - 1] === "function" && reducer(values.pop());
  values = values.map(arrayify);
  const lengths = values.map(length);
  const j5 = values.length - 1;
  const index2 = new Array(j5 + 1).fill(0);
  const product = [];
  if (j5 < 0 || lengths.some(empty))
    return product;
  while (true) {
    product.push(index2.map((j6, i4) => values[i4][j6]));
    let i3 = j5;
    while (++index2[i3] === lengths[i3]) {
      if (i3 === 0)
        return reduce2 ? product.map(reduce2) : product;
      index2[i3--] = 0;
    }
  }
}
var init_cross = __esm({
  "node_modules/d3-array/src/cross.js"() {
  }
});

// node_modules/d3-array/src/cumsum.js
function cumsum(values, valueof) {
  var sum3 = 0, index2 = 0;
  return Float64Array.from(values, valueof === void 0 ? (v2) => sum3 += +v2 || 0 : (v2) => sum3 += +valueof(v2, index2++, values) || 0);
}
var init_cumsum = __esm({
  "node_modules/d3-array/src/cumsum.js"() {
  }
});

// node_modules/d3-array/src/variance.js
function variance(values, valueof) {
  let count3 = 0;
  let delta;
  let mean2 = 0;
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        delta = value - mean2;
        mean2 += delta / ++count3;
        sum3 += delta * (value - mean2);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        delta = value - mean2;
        mean2 += delta / ++count3;
        sum3 += delta * (value - mean2);
      }
    }
  }
  if (count3 > 1)
    return sum3 / (count3 - 1);
}
var init_variance = __esm({
  "node_modules/d3-array/src/variance.js"() {
  }
});

// node_modules/d3-array/src/deviation.js
function deviation(values, valueof) {
  const v2 = variance(values, valueof);
  return v2 ? Math.sqrt(v2) : v2;
}
var init_deviation = __esm({
  "node_modules/d3-array/src/deviation.js"() {
    init_variance();
  }
});

// node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min4;
  let max5;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min4 === void 0) {
          if (value >= value)
            min4 = max5 = value;
        } else {
          if (min4 > value)
            min4 = value;
          if (max5 < value)
            max5 = value;
        }
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null) {
        if (min4 === void 0) {
          if (value >= value)
            min4 = max5 = value;
        } else {
          if (min4 > value)
            min4 = value;
          if (max5 < value)
            max5 = value;
        }
      }
    }
  }
  return [min4, max5];
}
var init_extent = __esm({
  "node_modules/d3-array/src/extent.js"() {
  }
});

// node_modules/d3-array/src/fsum.js
function fsum(values, valueof) {
  const adder = new Adder();
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        adder.add(value);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index2, values)) {
        adder.add(value);
      }
    }
  }
  return +adder;
}
function fcumsum(values, valueof) {
  const adder = new Adder();
  let index2 = -1;
  return Float64Array.from(
    values,
    valueof === void 0 ? (v2) => adder.add(+v2 || 0) : (v2) => adder.add(+valueof(v2, ++index2, values) || 0)
  );
}
var Adder;
var init_fsum = __esm({
  "node_modules/d3-array/src/fsum.js"() {
    Adder = class {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x5) {
        const p2 = this._partials;
        let i3 = 0;
        for (let j5 = 0; j5 < this._n && j5 < 32; j5++) {
          const y4 = p2[j5], hi = x5 + y4, lo2 = Math.abs(x5) < Math.abs(y4) ? x5 - (hi - y4) : y4 - (hi - x5);
          if (lo2)
            p2[i3++] = lo2;
          x5 = hi;
        }
        p2[i3] = x5;
        this._n = i3 + 1;
        return this;
      }
      valueOf() {
        const p2 = this._partials;
        let n2 = this._n, x5, y4, lo2, hi = 0;
        if (n2 > 0) {
          hi = p2[--n2];
          while (n2 > 0) {
            x5 = hi;
            y4 = p2[--n2];
            hi = x5 + y4;
            lo2 = y4 - (hi - x5);
            if (lo2)
              break;
          }
          if (n2 > 0 && (lo2 < 0 && p2[n2 - 1] < 0 || lo2 > 0 && p2[n2 - 1] > 0)) {
            y4 = lo2 * 2;
            x5 = hi + y4;
            if (y4 == x5 - hi)
              hi = x5;
          }
        }
        return hi;
      }
    };
  }
});

// node_modules/internmap/src/index.js
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var InternMap, InternSet;
var init_src = __esm({
  "node_modules/internmap/src/index.js"() {
    InternMap = class extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
        if (entries != null)
          for (const [key2, value] of entries)
            this.set(key2, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    };
    InternSet = class extends Set {
      constructor(values, key = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
        if (values != null)
          for (const value of values)
            this.add(value);
      }
      has(value) {
        return super.has(intern_get(this, value));
      }
      add(value) {
        return super.add(intern_set(this, value));
      }
      delete(value) {
        return super.delete(intern_delete(this, value));
      }
    };
  }
});

// node_modules/d3-array/src/identity.js
function identity(x5) {
  return x5;
}
var init_identity = __esm({
  "node_modules/d3-array/src/identity.js"() {
  }
});

// node_modules/d3-array/src/group.js
function group(values, ...keys) {
  return nest(values, identity, identity, keys);
}
function groups(values, ...keys) {
  return nest(values, Array.from, identity, keys);
}
function flatten(groups2, keys) {
  for (let i3 = 1, n2 = keys.length; i3 < n2; ++i3) {
    groups2 = groups2.flatMap((g2) => g2.pop().map(([key, value]) => [...g2, key, value]));
  }
  return groups2;
}
function flatGroup(values, ...keys) {
  return flatten(groups(values, ...keys), keys);
}
function flatRollup(values, reduce2, ...keys) {
  return flatten(rollups(values, reduce2, ...keys), keys);
}
function rollup(values, reduce2, ...keys) {
  return nest(values, identity, reduce2, keys);
}
function rollups(values, reduce2, ...keys) {
  return nest(values, Array.from, reduce2, keys);
}
function index(values, ...keys) {
  return nest(values, identity, unique, keys);
}
function indexes(values, ...keys) {
  return nest(values, Array.from, unique, keys);
}
function unique(values) {
  if (values.length !== 1)
    throw new Error("duplicate key");
  return values[0];
}
function nest(values, map7, reduce2, keys) {
  return function regroup(values2, i3) {
    if (i3 >= keys.length)
      return reduce2(values2);
    const groups2 = new InternMap();
    const keyof2 = keys[i3++];
    let index2 = -1;
    for (const value of values2) {
      const key = keyof2(value, ++index2, values2);
      const group2 = groups2.get(key);
      if (group2)
        group2.push(value);
      else
        groups2.set(key, [value]);
    }
    for (const [key, values3] of groups2) {
      groups2.set(key, regroup(values3, i3));
    }
    return map7(groups2);
  }(values, 0);
}
var init_group = __esm({
  "node_modules/d3-array/src/group.js"() {
    init_src();
    init_identity();
  }
});

// node_modules/d3-array/src/permute.js
function permute(source, keys) {
  return Array.from(keys, (key) => source[key]);
}
var init_permute = __esm({
  "node_modules/d3-array/src/permute.js"() {
  }
});

// node_modules/d3-array/src/sort.js
function sort(values, ...F5) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  values = Array.from(values);
  let [f3] = F5;
  if (f3 && f3.length !== 2 || F5.length > 1) {
    const index2 = Uint32Array.from(values, (d2, i3) => i3);
    if (F5.length > 1) {
      F5 = F5.map((f4) => values.map(f4));
      index2.sort((i3, j5) => {
        for (const f4 of F5) {
          const c6 = ascendingDefined(f4[i3], f4[j5]);
          if (c6)
            return c6;
        }
      });
    } else {
      f3 = values.map(f3);
      index2.sort((i3, j5) => ascendingDefined(f3[i3], f3[j5]));
    }
    return permute(values, index2);
  }
  return values.sort(compareDefined(f3));
}
function compareDefined(compare = ascending) {
  if (compare === ascending)
    return ascendingDefined;
  if (typeof compare !== "function")
    throw new TypeError("compare is not a function");
  return (a4, b4) => {
    const x5 = compare(a4, b4);
    if (x5 || x5 === 0)
      return x5;
    return (compare(b4, b4) === 0) - (compare(a4, a4) === 0);
  };
}
function ascendingDefined(a4, b4) {
  return (a4 == null || !(a4 >= a4)) - (b4 == null || !(b4 >= b4)) || (a4 < b4 ? -1 : a4 > b4 ? 1 : 0);
}
var init_sort = __esm({
  "node_modules/d3-array/src/sort.js"() {
    init_ascending();
    init_permute();
  }
});

// node_modules/d3-array/src/groupSort.js
function groupSort(values, reduce2, key) {
  return (reduce2.length !== 2 ? sort(rollup(values, reduce2, key), ([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)) : sort(group(values, key), ([ak, av], [bk, bv]) => reduce2(av, bv) || ascending(ak, bk))).map(([key2]) => key2);
}
var init_groupSort = __esm({
  "node_modules/d3-array/src/groupSort.js"() {
    init_ascending();
    init_group();
    init_sort();
  }
});

// node_modules/d3-array/src/array.js
var array, slice, map;
var init_array = __esm({
  "node_modules/d3-array/src/array.js"() {
    array = Array.prototype;
    slice = array.slice;
    map = array.map;
  }
});

// node_modules/d3-array/src/constant.js
function constant(x5) {
  return () => x5;
}
var init_constant = __esm({
  "node_modules/d3-array/src/constant.js"() {
  }
});

// node_modules/d3-array/src/ticks.js
function tickSpec(start2, stop, count3) {
  const step = (stop - start2) / Math.max(0, count3), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i22, inc2;
  if (power < 0) {
    inc2 = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc2);
    i22 = Math.round(stop * inc2);
    if (i1 / inc2 < start2)
      ++i1;
    if (i22 / inc2 > stop)
      --i22;
    inc2 = -inc2;
  } else {
    inc2 = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc2);
    i22 = Math.round(stop / inc2);
    if (i1 * inc2 < start2)
      ++i1;
    if (i22 * inc2 > stop)
      --i22;
  }
  if (i22 < i1 && 0.5 <= count3 && count3 < 2)
    return tickSpec(start2, stop, count3 * 2);
  return [i1, i22, inc2];
}
function ticks(start2, stop, count3) {
  stop = +stop, start2 = +start2, count3 = +count3;
  if (!(count3 > 0))
    return [];
  if (start2 === stop)
    return [start2];
  const reverse2 = stop < start2, [i1, i22, inc2] = reverse2 ? tickSpec(stop, start2, count3) : tickSpec(start2, stop, count3);
  if (!(i22 >= i1))
    return [];
  const n2 = i22 - i1 + 1, ticks2 = new Array(n2);
  if (reverse2) {
    if (inc2 < 0)
      for (let i3 = 0; i3 < n2; ++i3)
        ticks2[i3] = (i22 - i3) / -inc2;
    else
      for (let i3 = 0; i3 < n2; ++i3)
        ticks2[i3] = (i22 - i3) * inc2;
  } else {
    if (inc2 < 0)
      for (let i3 = 0; i3 < n2; ++i3)
        ticks2[i3] = (i1 + i3) / -inc2;
    else
      for (let i3 = 0; i3 < n2; ++i3)
        ticks2[i3] = (i1 + i3) * inc2;
  }
  return ticks2;
}
function tickIncrement(start2, stop, count3) {
  stop = +stop, start2 = +start2, count3 = +count3;
  return tickSpec(start2, stop, count3)[2];
}
function tickStep(start2, stop, count3) {
  stop = +stop, start2 = +start2, count3 = +count3;
  const reverse2 = stop < start2, inc2 = reverse2 ? tickIncrement(stop, start2, count3) : tickIncrement(start2, stop, count3);
  return (reverse2 ? -1 : 1) * (inc2 < 0 ? 1 / -inc2 : inc2);
}
var e10, e5, e2;
var init_ticks = __esm({
  "node_modules/d3-array/src/ticks.js"() {
    e10 = Math.sqrt(50);
    e5 = Math.sqrt(10);
    e2 = Math.sqrt(2);
  }
});

// node_modules/d3-array/src/nice.js
function nice(start2, stop, count3) {
  let prestep;
  while (true) {
    const step = tickIncrement(start2, stop, count3);
    if (step === prestep || step === 0 || !isFinite(step)) {
      return [start2, stop];
    } else if (step > 0) {
      start2 = Math.floor(start2 / step) * step;
      stop = Math.ceil(stop / step) * step;
    } else if (step < 0) {
      start2 = Math.ceil(start2 * step) / step;
      stop = Math.floor(stop * step) / step;
    }
    prestep = step;
  }
}
var init_nice = __esm({
  "node_modules/d3-array/src/nice.js"() {
    init_ticks();
  }
});

// node_modules/d3-array/src/threshold/sturges.js
function thresholdSturges(values) {
  return Math.max(1, Math.ceil(Math.log(count(values)) / Math.LN2) + 1);
}
var init_sturges = __esm({
  "node_modules/d3-array/src/threshold/sturges.js"() {
    init_count();
  }
});

// node_modules/d3-array/src/bin.js
function bin() {
  var value = identity, domain = extent, threshold3 = thresholdSturges;
  function histogram(data) {
    if (!Array.isArray(data))
      data = Array.from(data);
    var i3, n2 = data.length, x5, step, values = new Array(n2);
    for (i3 = 0; i3 < n2; ++i3) {
      values[i3] = value(data[i3], i3, data);
    }
    var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold3(values, x0, x1);
    if (!Array.isArray(tz)) {
      const max5 = x1, tn2 = +tz;
      if (domain === extent)
        [x0, x1] = nice(x0, x1, tn2);
      tz = ticks(x0, x1, tn2);
      if (tz[0] <= x0)
        step = tickIncrement(x0, x1, tn2);
      if (tz[tz.length - 1] >= x1) {
        if (max5 >= x1 && domain === extent) {
          const step2 = tickIncrement(x0, x1, tn2);
          if (isFinite(step2)) {
            if (step2 > 0) {
              x1 = (Math.floor(x1 / step2) + 1) * step2;
            } else if (step2 < 0) {
              x1 = (Math.ceil(x1 * -step2) + 1) / -step2;
            }
          }
        } else {
          tz.pop();
        }
      }
    }
    var m2 = tz.length, a4 = 0, b4 = m2;
    while (tz[a4] <= x0)
      ++a4;
    while (tz[b4 - 1] > x1)
      --b4;
    if (a4 || b4 < m2)
      tz = tz.slice(a4, b4), m2 = b4 - a4;
    var bins = new Array(m2 + 1), bin2;
    for (i3 = 0; i3 <= m2; ++i3) {
      bin2 = bins[i3] = [];
      bin2.x0 = i3 > 0 ? tz[i3 - 1] : x0;
      bin2.x1 = i3 < m2 ? tz[i3] : x1;
    }
    if (isFinite(step)) {
      if (step > 0) {
        for (i3 = 0; i3 < n2; ++i3) {
          if ((x5 = values[i3]) != null && x0 <= x5 && x5 <= x1) {
            bins[Math.min(m2, Math.floor((x5 - x0) / step))].push(data[i3]);
          }
        }
      } else if (step < 0) {
        for (i3 = 0; i3 < n2; ++i3) {
          if ((x5 = values[i3]) != null && x0 <= x5 && x5 <= x1) {
            const j5 = Math.floor((x0 - x5) * step);
            bins[Math.min(m2, j5 + (tz[j5] <= x5))].push(data[i3]);
          }
        }
      }
    } else {
      for (i3 = 0; i3 < n2; ++i3) {
        if ((x5 = values[i3]) != null && x0 <= x5 && x5 <= x1) {
          bins[bisect_default(tz, x5, 0, m2)].push(data[i3]);
        }
      }
    }
    return bins;
  }
  histogram.value = function(_3) {
    return arguments.length ? (value = typeof _3 === "function" ? _3 : constant(_3), histogram) : value;
  };
  histogram.domain = function(_3) {
    return arguments.length ? (domain = typeof _3 === "function" ? _3 : constant([_3[0], _3[1]]), histogram) : domain;
  };
  histogram.thresholds = function(_3) {
    return arguments.length ? (threshold3 = typeof _3 === "function" ? _3 : constant(Array.isArray(_3) ? slice.call(_3) : _3), histogram) : threshold3;
  };
  return histogram;
}
var init_bin = __esm({
  "node_modules/d3-array/src/bin.js"() {
    init_array();
    init_bisect();
    init_constant();
    init_extent();
    init_identity();
    init_nice();
    init_ticks();
    init_sturges();
  }
});

// node_modules/d3-array/src/max.js
function max2(values, valueof) {
  let max5;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max5 < value || max5 === void 0 && value >= value)) {
        max5 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (max5 < value || max5 === void 0 && value >= value)) {
        max5 = value;
      }
    }
  }
  return max5;
}
var init_max = __esm({
  "node_modules/d3-array/src/max.js"() {
  }
});

// node_modules/d3-array/src/maxIndex.js
function maxIndex(values, valueof) {
  let max5;
  let maxIndex2 = -1;
  let index2 = -1;
  if (valueof === void 0) {
    for (const value of values) {
      ++index2;
      if (value != null && (max5 < value || max5 === void 0 && value >= value)) {
        max5 = value, maxIndex2 = index2;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (max5 < value || max5 === void 0 && value >= value)) {
        max5 = value, maxIndex2 = index2;
      }
    }
  }
  return maxIndex2;
}
var init_maxIndex = __esm({
  "node_modules/d3-array/src/maxIndex.js"() {
  }
});

// node_modules/d3-array/src/min.js
function min(values, valueof) {
  let min4;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (min4 > value || min4 === void 0 && value >= value)) {
        min4 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (min4 > value || min4 === void 0 && value >= value)) {
        min4 = value;
      }
    }
  }
  return min4;
}
var init_min = __esm({
  "node_modules/d3-array/src/min.js"() {
  }
});

// node_modules/d3-array/src/minIndex.js
function minIndex(values, valueof) {
  let min4;
  let minIndex2 = -1;
  let index2 = -1;
  if (valueof === void 0) {
    for (const value of values) {
      ++index2;
      if (value != null && (min4 > value || min4 === void 0 && value >= value)) {
        min4 = value, minIndex2 = index2;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (min4 > value || min4 === void 0 && value >= value)) {
        min4 = value, minIndex2 = index2;
      }
    }
  }
  return minIndex2;
}
var init_minIndex = __esm({
  "node_modules/d3-array/src/minIndex.js"() {
  }
});

// node_modules/d3-array/src/quickselect.js
function quickselect(array5, k4, left = 0, right = Infinity, compare) {
  k4 = Math.floor(k4);
  left = Math.floor(Math.max(0, left));
  right = Math.floor(Math.min(array5.length - 1, right));
  if (!(left <= k4 && k4 <= right))
    return array5;
  compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
  while (right > left) {
    if (right - left > 600) {
      const n2 = right - left + 1;
      const m2 = k4 - left + 1;
      const z4 = Math.log(n2);
      const s2 = 0.5 * Math.exp(2 * z4 / 3);
      const sd = 0.5 * Math.sqrt(z4 * s2 * (n2 - s2) / n2) * (m2 - n2 / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k4 - m2 * s2 / n2 + sd));
      const newRight = Math.min(right, Math.floor(k4 + (n2 - m2) * s2 / n2 + sd));
      quickselect(array5, k4, newLeft, newRight, compare);
    }
    const t = array5[k4];
    let i3 = left;
    let j5 = right;
    swap(array5, left, k4);
    if (compare(array5[right], t) > 0)
      swap(array5, left, right);
    while (i3 < j5) {
      swap(array5, i3, j5), ++i3, --j5;
      while (compare(array5[i3], t) < 0)
        ++i3;
      while (compare(array5[j5], t) > 0)
        --j5;
    }
    if (compare(array5[left], t) === 0)
      swap(array5, left, j5);
    else
      ++j5, swap(array5, j5, right);
    if (j5 <= k4)
      left = j5 + 1;
    if (k4 <= j5)
      right = j5 - 1;
  }
  return array5;
}
function swap(array5, i3, j5) {
  const t = array5[i3];
  array5[i3] = array5[j5];
  array5[j5] = t;
}
var init_quickselect = __esm({
  "node_modules/d3-array/src/quickselect.js"() {
    init_sort();
  }
});

// node_modules/d3-array/src/greatest.js
function greatest(values, compare = ascending) {
  let max5;
  let defined = false;
  if (compare.length === 1) {
    let maxValue;
    for (const element of values) {
      const value = compare(element);
      if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {
        max5 = element;
        maxValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, max5) > 0 : compare(value, value) === 0) {
        max5 = value;
        defined = true;
      }
    }
  }
  return max5;
}
var init_greatest = __esm({
  "node_modules/d3-array/src/greatest.js"() {
    init_ascending();
  }
});

// node_modules/d3-array/src/quantile.js
function quantile(values, p2, valueof) {
  values = Float64Array.from(numbers(values, valueof));
  if (!(n2 = values.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n2 < 2)
    return min(values);
  if (p2 >= 1)
    return max2(values);
  var n2, i3 = (n2 - 1) * p2, i0 = Math.floor(i3), value0 = max2(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i3 - i0);
}
function quantileSorted(values, p2, valueof = number) {
  if (!(n2 = values.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n2 < 2)
    return +valueof(values[0], 0, values);
  if (p2 >= 1)
    return +valueof(values[n2 - 1], n2 - 1, values);
  var n2, i3 = (n2 - 1) * p2, i0 = Math.floor(i3), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i3 - i0);
}
function quantileIndex(values, p2, valueof = number) {
  if (isNaN(p2 = +p2))
    return;
  numbers2 = Float64Array.from(values, (_3, i4) => number(valueof(values[i4], i4, values)));
  if (p2 <= 0)
    return minIndex(numbers2);
  if (p2 >= 1)
    return maxIndex(numbers2);
  var numbers2, index2 = Uint32Array.from(values, (_3, i4) => i4), j5 = numbers2.length - 1, i3 = Math.floor(j5 * p2);
  quickselect(index2, i3, 0, j5, (i4, j6) => ascendingDefined(numbers2[i4], numbers2[j6]));
  i3 = greatest(index2.subarray(0, i3 + 1), (i4) => numbers2[i4]);
  return i3 >= 0 ? i3 : -1;
}
var init_quantile = __esm({
  "node_modules/d3-array/src/quantile.js"() {
    init_max();
    init_maxIndex();
    init_min();
    init_minIndex();
    init_quickselect();
    init_number();
    init_sort();
    init_greatest();
  }
});

// node_modules/d3-array/src/threshold/freedmanDiaconis.js
function thresholdFreedmanDiaconis(values, min4, max5) {
  const c6 = count(values), d2 = quantile(values, 0.75) - quantile(values, 0.25);
  return c6 && d2 ? Math.ceil((max5 - min4) / (2 * d2 * Math.pow(c6, -1 / 3))) : 1;
}
var init_freedmanDiaconis = __esm({
  "node_modules/d3-array/src/threshold/freedmanDiaconis.js"() {
    init_count();
    init_quantile();
  }
});

// node_modules/d3-array/src/threshold/scott.js
function thresholdScott(values, min4, max5) {
  const c6 = count(values), d2 = deviation(values);
  return c6 && d2 ? Math.ceil((max5 - min4) * Math.cbrt(c6) / (3.49 * d2)) : 1;
}
var init_scott = __esm({
  "node_modules/d3-array/src/threshold/scott.js"() {
    init_count();
    init_deviation();
  }
});

// node_modules/d3-array/src/mean.js
function mean(values, valueof) {
  let count3 = 0;
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count3, sum3 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        ++count3, sum3 += value;
      }
    }
  }
  if (count3)
    return sum3 / count3;
}
var init_mean = __esm({
  "node_modules/d3-array/src/mean.js"() {
  }
});

// node_modules/d3-array/src/median.js
function median(values, valueof) {
  return quantile(values, 0.5, valueof);
}
function medianIndex(values, valueof) {
  return quantileIndex(values, 0.5, valueof);
}
var init_median = __esm({
  "node_modules/d3-array/src/median.js"() {
    init_quantile();
  }
});

// node_modules/d3-array/src/merge.js
function* flatten2(arrays) {
  for (const array5 of arrays) {
    yield* array5;
  }
}
function merge(arrays) {
  return Array.from(flatten2(arrays));
}
var init_merge = __esm({
  "node_modules/d3-array/src/merge.js"() {
  }
});

// node_modules/d3-array/src/mode.js
function mode(values, valueof) {
  const counts = new InternMap();
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  }
  let modeValue;
  let modeCount = 0;
  for (const [value, count3] of counts) {
    if (count3 > modeCount) {
      modeCount = count3;
      modeValue = value;
    }
  }
  return modeValue;
}
var init_mode = __esm({
  "node_modules/d3-array/src/mode.js"() {
    init_src();
  }
});

// node_modules/d3-array/src/pairs.js
function pairs(values, pairof = pair) {
  const pairs2 = [];
  let previous;
  let first = false;
  for (const value of values) {
    if (first)
      pairs2.push(pairof(previous, value));
    previous = value;
    first = true;
  }
  return pairs2;
}
function pair(a4, b4) {
  return [a4, b4];
}
var init_pairs = __esm({
  "node_modules/d3-array/src/pairs.js"() {
  }
});

// node_modules/d3-array/src/range.js
function range(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n2 = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n2 < 3 ? 1 : +step;
  var i3 = -1, n2 = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range2 = new Array(n2);
  while (++i3 < n2) {
    range2[i3] = start2 + i3 * step;
  }
  return range2;
}
var init_range = __esm({
  "node_modules/d3-array/src/range.js"() {
  }
});

// node_modules/d3-array/src/rank.js
function rank(values, valueof = ascending) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  let V5 = Array.from(values);
  const R4 = new Float64Array(V5.length);
  if (valueof.length !== 2)
    V5 = V5.map(valueof), valueof = ascending;
  const compareIndex = (i3, j5) => valueof(V5[i3], V5[j5]);
  let k4, r;
  values = Uint32Array.from(V5, (_3, i3) => i3);
  values.sort(valueof === ascending ? (i3, j5) => ascendingDefined(V5[i3], V5[j5]) : compareDefined(compareIndex));
  values.forEach((j5, i3) => {
    const c6 = compareIndex(j5, k4 === void 0 ? j5 : k4);
    if (c6 >= 0) {
      if (k4 === void 0 || c6 > 0)
        k4 = j5, r = i3;
      R4[j5] = r;
    } else {
      R4[j5] = NaN;
    }
  });
  return R4;
}
var init_rank = __esm({
  "node_modules/d3-array/src/rank.js"() {
    init_ascending();
    init_sort();
  }
});

// node_modules/d3-array/src/least.js
function least(values, compare = ascending) {
  let min4;
  let defined = false;
  if (compare.length === 1) {
    let minValue;
    for (const element of values) {
      const value = compare(element);
      if (defined ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {
        min4 = element;
        minValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, min4) < 0 : compare(value, value) === 0) {
        min4 = value;
        defined = true;
      }
    }
  }
  return min4;
}
var init_least = __esm({
  "node_modules/d3-array/src/least.js"() {
    init_ascending();
  }
});

// node_modules/d3-array/src/leastIndex.js
function leastIndex(values, compare = ascending) {
  if (compare.length === 1)
    return minIndex(values, compare);
  let minValue;
  let min4 = -1;
  let index2 = -1;
  for (const value of values) {
    ++index2;
    if (min4 < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
      minValue = value;
      min4 = index2;
    }
  }
  return min4;
}
var init_leastIndex = __esm({
  "node_modules/d3-array/src/leastIndex.js"() {
    init_ascending();
    init_minIndex();
  }
});

// node_modules/d3-array/src/greatestIndex.js
function greatestIndex(values, compare = ascending) {
  if (compare.length === 1)
    return maxIndex(values, compare);
  let maxValue;
  let max5 = -1;
  let index2 = -1;
  for (const value of values) {
    ++index2;
    if (max5 < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
      maxValue = value;
      max5 = index2;
    }
  }
  return max5;
}
var init_greatestIndex = __esm({
  "node_modules/d3-array/src/greatestIndex.js"() {
    init_ascending();
    init_maxIndex();
  }
});

// node_modules/d3-array/src/scan.js
function scan(values, compare) {
  const index2 = leastIndex(values, compare);
  return index2 < 0 ? void 0 : index2;
}
var init_scan = __esm({
  "node_modules/d3-array/src/scan.js"() {
    init_leastIndex();
  }
});

// node_modules/d3-array/src/shuffle.js
function shuffler(random) {
  return function shuffle(array5, i0 = 0, i1 = array5.length) {
    let m2 = i1 - (i0 = +i0);
    while (m2) {
      const i3 = random() * m2-- | 0, t = array5[m2 + i0];
      array5[m2 + i0] = array5[i3 + i0];
      array5[i3 + i0] = t;
    }
    return array5;
  };
}
var shuffle_default;
var init_shuffle = __esm({
  "node_modules/d3-array/src/shuffle.js"() {
    shuffle_default = shuffler(Math.random);
  }
});

// node_modules/d3-array/src/sum.js
function sum(values, valueof) {
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        sum3 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index2, values)) {
        sum3 += value;
      }
    }
  }
  return sum3;
}
var init_sum = __esm({
  "node_modules/d3-array/src/sum.js"() {
  }
});

// node_modules/d3-array/src/transpose.js
function transpose(matrix) {
  if (!(n2 = matrix.length))
    return [];
  for (var i3 = -1, m2 = min(matrix, length2), transpose2 = new Array(m2); ++i3 < m2; ) {
    for (var j5 = -1, n2, row = transpose2[i3] = new Array(n2); ++j5 < n2; ) {
      row[j5] = matrix[j5][i3];
    }
  }
  return transpose2;
}
function length2(d2) {
  return d2.length;
}
var init_transpose = __esm({
  "node_modules/d3-array/src/transpose.js"() {
    init_min();
  }
});

// node_modules/d3-array/src/zip.js
function zip() {
  return transpose(arguments);
}
var init_zip = __esm({
  "node_modules/d3-array/src/zip.js"() {
    init_transpose();
  }
});

// node_modules/d3-array/src/every.js
function every(values, test) {
  if (typeof test !== "function")
    throw new TypeError("test is not a function");
  let index2 = -1;
  for (const value of values) {
    if (!test(value, ++index2, values)) {
      return false;
    }
  }
  return true;
}
var init_every = __esm({
  "node_modules/d3-array/src/every.js"() {
  }
});

// node_modules/d3-array/src/some.js
function some(values, test) {
  if (typeof test !== "function")
    throw new TypeError("test is not a function");
  let index2 = -1;
  for (const value of values) {
    if (test(value, ++index2, values)) {
      return true;
    }
  }
  return false;
}
var init_some = __esm({
  "node_modules/d3-array/src/some.js"() {
  }
});

// node_modules/d3-array/src/filter.js
function filter(values, test) {
  if (typeof test !== "function")
    throw new TypeError("test is not a function");
  const array5 = [];
  let index2 = -1;
  for (const value of values) {
    if (test(value, ++index2, values)) {
      array5.push(value);
    }
  }
  return array5;
}
var init_filter = __esm({
  "node_modules/d3-array/src/filter.js"() {
  }
});

// node_modules/d3-array/src/map.js
function map2(values, mapper) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  if (typeof mapper !== "function")
    throw new TypeError("mapper is not a function");
  return Array.from(values, (value, index2) => mapper(value, index2, values));
}
var init_map = __esm({
  "node_modules/d3-array/src/map.js"() {
  }
});

// node_modules/d3-array/src/reduce.js
function reduce(values, reducer2, value) {
  if (typeof reducer2 !== "function")
    throw new TypeError("reducer is not a function");
  const iterator = values[Symbol.iterator]();
  let done, next, index2 = -1;
  if (arguments.length < 3) {
    ({ done, value } = iterator.next());
    if (done)
      return;
    ++index2;
  }
  while ({ done, value: next } = iterator.next(), !done) {
    value = reducer2(value, next, ++index2, values);
  }
  return value;
}
var init_reduce = __esm({
  "node_modules/d3-array/src/reduce.js"() {
  }
});

// node_modules/d3-array/src/reverse.js
function reverse(values) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  return Array.from(values).reverse();
}
var init_reverse = __esm({
  "node_modules/d3-array/src/reverse.js"() {
  }
});

// node_modules/d3-array/src/difference.js
function difference(values, ...others) {
  values = new InternSet(values);
  for (const other of others) {
    for (const value of other) {
      values.delete(value);
    }
  }
  return values;
}
var init_difference = __esm({
  "node_modules/d3-array/src/difference.js"() {
    init_src();
  }
});

// node_modules/d3-array/src/disjoint.js
function disjoint(values, other) {
  const iterator = other[Symbol.iterator](), set6 = new InternSet();
  for (const v2 of values) {
    if (set6.has(v2))
      return false;
    let value, done;
    while ({ value, done } = iterator.next()) {
      if (done)
        break;
      if (Object.is(v2, value))
        return false;
      set6.add(value);
    }
  }
  return true;
}
var init_disjoint = __esm({
  "node_modules/d3-array/src/disjoint.js"() {
    init_src();
  }
});

// node_modules/d3-array/src/intersection.js
function intersection(values, ...others) {
  values = new InternSet(values);
  others = others.map(set);
  out:
    for (const value of values) {
      for (const other of others) {
        if (!other.has(value)) {
          values.delete(value);
          continue out;
        }
      }
    }
  return values;
}
function set(values) {
  return values instanceof InternSet ? values : new InternSet(values);
}
var init_intersection = __esm({
  "node_modules/d3-array/src/intersection.js"() {
    init_src();
  }
});

// node_modules/d3-array/src/superset.js
function superset(values, other) {
  const iterator = values[Symbol.iterator](), set6 = /* @__PURE__ */ new Set();
  for (const o of other) {
    const io2 = intern(o);
    if (set6.has(io2))
      continue;
    let value, done;
    while ({ value, done } = iterator.next()) {
      if (done)
        return false;
      const ivalue = intern(value);
      set6.add(ivalue);
      if (Object.is(io2, ivalue))
        break;
    }
  }
  return true;
}
function intern(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var init_superset = __esm({
  "node_modules/d3-array/src/superset.js"() {
  }
});

// node_modules/d3-array/src/subset.js
function subset(values, other) {
  return superset(other, values);
}
var init_subset = __esm({
  "node_modules/d3-array/src/subset.js"() {
    init_superset();
  }
});

// node_modules/d3-array/src/union.js
function union(...others) {
  const set6 = new InternSet();
  for (const other of others) {
    for (const o of other) {
      set6.add(o);
    }
  }
  return set6;
}
var init_union = __esm({
  "node_modules/d3-array/src/union.js"() {
    init_src();
  }
});

// node_modules/d3-array/src/index.js
var src_exports = {};
__export(src_exports, {
  Adder: () => Adder,
  InternMap: () => InternMap,
  InternSet: () => InternSet,
  ascending: () => ascending,
  bin: () => bin,
  bisect: () => bisect_default,
  bisectCenter: () => bisectCenter,
  bisectLeft: () => bisectLeft,
  bisectRight: () => bisectRight,
  bisector: () => bisector,
  blur: () => blur,
  blur2: () => blur2,
  blurImage: () => blurImage,
  count: () => count,
  cross: () => cross,
  cumsum: () => cumsum,
  descending: () => descending,
  deviation: () => deviation,
  difference: () => difference,
  disjoint: () => disjoint,
  every: () => every,
  extent: () => extent,
  fcumsum: () => fcumsum,
  filter: () => filter,
  flatGroup: () => flatGroup,
  flatRollup: () => flatRollup,
  fsum: () => fsum,
  greatest: () => greatest,
  greatestIndex: () => greatestIndex,
  group: () => group,
  groupSort: () => groupSort,
  groups: () => groups,
  histogram: () => bin,
  index: () => index,
  indexes: () => indexes,
  intersection: () => intersection,
  least: () => least,
  leastIndex: () => leastIndex,
  map: () => map2,
  max: () => max2,
  maxIndex: () => maxIndex,
  mean: () => mean,
  median: () => median,
  medianIndex: () => medianIndex,
  merge: () => merge,
  min: () => min,
  minIndex: () => minIndex,
  mode: () => mode,
  nice: () => nice,
  pairs: () => pairs,
  permute: () => permute,
  quantile: () => quantile,
  quantileIndex: () => quantileIndex,
  quantileSorted: () => quantileSorted,
  quickselect: () => quickselect,
  range: () => range,
  rank: () => rank,
  reduce: () => reduce,
  reverse: () => reverse,
  rollup: () => rollup,
  rollups: () => rollups,
  scan: () => scan,
  shuffle: () => shuffle_default,
  shuffler: () => shuffler,
  some: () => some,
  sort: () => sort,
  subset: () => subset,
  sum: () => sum,
  superset: () => superset,
  thresholdFreedmanDiaconis: () => thresholdFreedmanDiaconis,
  thresholdScott: () => thresholdScott,
  thresholdSturges: () => thresholdSturges,
  tickIncrement: () => tickIncrement,
  tickStep: () => tickStep,
  ticks: () => ticks,
  transpose: () => transpose,
  union: () => union,
  variance: () => variance,
  zip: () => zip
});
var init_src2 = __esm({
  "node_modules/d3-array/src/index.js"() {
    init_bisect();
    init_ascending();
    init_bisector();
    init_blur();
    init_count();
    init_cross();
    init_cumsum();
    init_descending();
    init_deviation();
    init_extent();
    init_fsum();
    init_group();
    init_groupSort();
    init_bin();
    init_freedmanDiaconis();
    init_scott();
    init_sturges();
    init_max();
    init_maxIndex();
    init_mean();
    init_median();
    init_merge();
    init_min();
    init_minIndex();
    init_mode();
    init_nice();
    init_pairs();
    init_permute();
    init_quantile();
    init_quickselect();
    init_range();
    init_rank();
    init_least();
    init_leastIndex();
    init_greatest();
    init_greatestIndex();
    init_scan();
    init_shuffle();
    init_sum();
    init_ticks();
    init_transpose();
    init_variance();
    init_zip();
    init_every();
    init_some();
    init_filter();
    init_map();
    init_reduce();
    init_reverse();
    init_sort();
    init_difference();
    init_disjoint();
    init_intersection();
    init_subset();
    init_superset();
    init_union();
    init_src();
  }
});

// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      if (typeof domain === "function")
        this.interpolator(domain);
      else
        this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function")
        this.interpolator(interpolator);
      else
        this.range(interpolator);
      break;
    }
  }
  return this;
}
var init_init = __esm({
  "node_modules/d3-scale/src/init.js"() {
  }
});

// node_modules/d3-scale/src/ordinal.js
function ordinal() {
  var index2 = new InternMap(), domain = [], range2 = [], unknown = implicit;
  function scale(d2) {
    let i3 = index2.get(d2);
    if (i3 === void 0) {
      if (unknown !== implicit)
        return unknown;
      index2.set(d2, i3 = domain.push(d2) - 1);
    }
    return range2[i3 % range2.length];
  }
  scale.domain = function(_3) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _3) {
      if (index2.has(value))
        continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_3) {
    return arguments.length ? (range2 = Array.from(_3), scale) : range2.slice();
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
var implicit;
var init_ordinal = __esm({
  "node_modules/d3-scale/src/ordinal.js"() {
    init_src2();
    init_init();
    implicit = Symbol("implicit");
  }
});

// node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n2 = domain().length, reverse2 = r1 < r0, start2 = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
    step = (stop - start2) / Math.max(1, n2 - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start2 += (stop - start2 - step * (n2 - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values = range(n2).map(function(i3) {
      return start2 + step * i3;
    });
    return ordinalRange(reverse2 ? values.reverse() : values);
  }
  scale.domain = function(_3) {
    return arguments.length ? (domain(_3), rescale()) : domain();
  };
  scale.range = function(_3) {
    return arguments.length ? ([r0, r1] = _3, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_3) {
    return [r0, r1] = _3, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_3) {
    return arguments.length ? (round = !!_3, rescale()) : round;
  };
  scale.padding = function(_3) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_3), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_3) {
    return arguments.length ? (paddingInner = Math.min(1, _3), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_3) {
    return arguments.length ? (paddingOuter = +_3, rescale()) : paddingOuter;
  };
  scale.align = function(_3) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _3)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy4 = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy4());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
var init_band = __esm({
  "node_modules/d3-scale/src/band.js"() {
    init_src2();
    init_init();
    init_ordinal();
  }
});

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}
var init_define = __esm({
  "node_modules/d3-color/src/define.js"() {
  }
});

// node_modules/d3-color/src/color.js
function Color() {
}
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m2, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format3)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format3)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format3)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format3)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format3)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n2) {
  return new Rgb(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
}
function rgba(r, g2, b4, a4) {
  if (a4 <= 0)
    r = g2 = b4 = NaN;
  return new Rgb(r, g2, b4, a4);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g2, b4, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g2, b4, opacity == null ? 1 : opacity);
}
function Rgb(r, g2, b4, opacity) {
  this.r = +r;
  this.g = +g2;
  this.b = +b4;
  this.opacity = +opacity;
}
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a4 = clampa(this.opacity);
  return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h2, s2, l, a4) {
  if (a4 <= 0)
    h2 = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h2 = s2 = NaN;
  else if (s2 <= 0)
    h2 = NaN;
  return new Hsl(h2, s2, l, a4);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g2 = o.g / 255, b4 = o.b / 255, min4 = Math.min(r, g2, b4), max5 = Math.max(r, g2, b4), h2 = NaN, s2 = max5 - min4, l = (max5 + min4) / 2;
  if (s2) {
    if (r === max5)
      h2 = (g2 - b4) / s2 + (g2 < b4) * 6;
    else if (g2 === max5)
      h2 = (b4 - r) / s2 + 2;
    else
      h2 = (r - g2) / s2 + 4;
    s2 /= l < 0.5 ? max5 + min4 : 2 - max5 - min4;
    h2 *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h2;
  }
  return new Hsl(h2, s2, l, o.opacity);
}
function hsl(h2, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h2, s2, l, opacity) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h2, m1, m2) {
  return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
}
var darker, brighter, reI, reN, reP, reHex, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named;
var init_color = __esm({
  "node_modules/d3-color/src/color.js"() {
    init_define();
    darker = 0.7;
    brighter = 1 / darker;
    reI = "\\s*([+-]?\\d+)\\s*";
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
    reHex = /^#([0-9a-f]{3,8})$/;
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
    named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define_default(Color, color, {
      copy(channels) {
        return Object.assign(new this.constructor(), this, channels);
      },
      displayable() {
        return this.rgb().displayable();
      },
      hex: color_formatHex,
      formatHex: color_formatHex,
      formatHex8: color_formatHex8,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });
    define_default(Rgb, rgb, extend(Color, {
      brighter(k4) {
        k4 = k4 == null ? brighter : Math.pow(brighter, k4);
        return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
      },
      darker(k4) {
        k4 = k4 == null ? darker : Math.pow(darker, k4);
        return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
      },
      rgb() {
        return this;
      },
      clamp() {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
      },
      displayable() {
        return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex,
      formatHex: rgb_formatHex,
      formatHex8: rgb_formatHex8,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));
    define_default(Hsl, hsl, extend(Color, {
      brighter(k4) {
        k4 = k4 == null ? brighter : Math.pow(brighter, k4);
        return new Hsl(this.h, this.s, this.l * k4, this.opacity);
      },
      darker(k4) {
        k4 = k4 == null ? darker : Math.pow(darker, k4);
        return new Hsl(this.h, this.s, this.l * k4, this.opacity);
      },
      rgb() {
        var h2 = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
          hsl2rgb(h2, m1, m2),
          hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
          this.opacity
        );
      },
      clamp() {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
      },
      displayable() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl() {
        const a4 = clampa(this.opacity);
        return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
      }
    }));
  }
});

// node_modules/d3-color/src/math.js
var radians, degrees;
var init_math = __esm({
  "node_modules/d3-color/src/math.js"() {
    radians = Math.PI / 180;
    degrees = 180 / Math.PI;
  }
});

// node_modules/d3-color/src/cubehelix.js
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g2 = o.g / 255, b4 = o.b / 255, l = (BC_DA * b4 + ED * r - EB * g2) / (BC_DA + ED - EB), bl = b4 - l, k4 = (E4 * (g2 - l) - C5 * bl) / D5, s2 = Math.sqrt(k4 * k4 + bl * bl) / (E4 * l * (1 - l)), h2 = s2 ? Math.atan2(k4, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s2, l, o.opacity);
}
function cubehelix(h2, s2, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s2, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s2, l, opacity) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
var A3, B5, C5, D5, E4, ED, EB, BC_DA;
var init_cubehelix = __esm({
  "node_modules/d3-color/src/cubehelix.js"() {
    init_define();
    init_color();
    init_math();
    A3 = -0.14861;
    B5 = 1.78277;
    C5 = -0.29227;
    D5 = -0.90649;
    E4 = 1.97294;
    ED = E4 * D5;
    EB = E4 * B5;
    BC_DA = B5 * C5 - D5 * A3;
    define_default(Cubehelix, cubehelix, extend(Color, {
      brighter(k4) {
        k4 = k4 == null ? brighter : Math.pow(brighter, k4);
        return new Cubehelix(this.h, this.s, this.l * k4, this.opacity);
      },
      darker(k4) {
        k4 = k4 == null ? darker : Math.pow(darker, k4);
        return new Cubehelix(this.h, this.s, this.l * k4, this.opacity);
      },
      rgb() {
        var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
        return new Rgb(
          255 * (l + a4 * (A3 * cosh2 + B5 * sinh2)),
          255 * (l + a4 * (C5 * cosh2 + D5 * sinh2)),
          255 * (l + a4 * (E4 * cosh2)),
          this.opacity
        );
      }
    }));
  }
});

// node_modules/d3-color/src/index.js
var init_src3 = __esm({
  "node_modules/d3-color/src/index.js"() {
    init_color();
    init_cubehelix();
  }
});

// node_modules/d3-interpolate/src/basis.js
function basis(t12, v0, v1, v2, v3) {
  var t2 = t12 * t12, t3 = t2 * t12;
  return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values) {
  var n2 = values.length - 1;
  return function(t) {
    var i3 = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n2 - 1) : Math.floor(t * n2), v1 = values[i3], v2 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v2, v3 = i3 < n2 - 1 ? values[i3 + 2] : 2 * v2 - v1;
    return basis((t - i3 / n2) * n2, v0, v1, v2, v3);
  };
}
var init_basis = __esm({
  "node_modules/d3-interpolate/src/basis.js"() {
  }
});

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n2 = values.length;
  return function(t) {
    var i3 = Math.floor(((t %= 1) < 0 ? ++t : t) * n2), v0 = values[(i3 + n2 - 1) % n2], v1 = values[i3 % n2], v2 = values[(i3 + 1) % n2], v3 = values[(i3 + 2) % n2];
    return basis((t - i3 / n2) * n2, v0, v1, v2, v3);
  };
}
var init_basisClosed = __esm({
  "node_modules/d3-interpolate/src/basisClosed.js"() {
    init_basis();
  }
});

// node_modules/d3-interpolate/src/constant.js
var constant_default;
var init_constant2 = __esm({
  "node_modules/d3-interpolate/src/constant.js"() {
    constant_default = (x5) => () => x5;
  }
});

// node_modules/d3-interpolate/src/color.js
function linear(a4, d2) {
  return function(t) {
    return a4 + t * d2;
  };
}
function exponential(a4, b4, y4) {
  return a4 = Math.pow(a4, y4), b4 = Math.pow(b4, y4) - a4, y4 = 1 / y4, function(t) {
    return Math.pow(a4 + t * b4, y4);
  };
}
function hue(a4, b4) {
  var d2 = b4 - a4;
  return d2 ? linear(a4, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default(isNaN(a4) ? b4 : a4);
}
function gamma(y4) {
  return (y4 = +y4) === 1 ? nogamma : function(a4, b4) {
    return b4 - a4 ? exponential(a4, b4, y4) : constant_default(isNaN(a4) ? b4 : a4);
  };
}
function nogamma(a4, b4) {
  var d2 = b4 - a4;
  return d2 ? linear(a4, d2) : constant_default(isNaN(a4) ? b4 : a4);
}
var init_color2 = __esm({
  "node_modules/d3-interpolate/src/color.js"() {
    init_constant2();
  }
});

// node_modules/d3-interpolate/src/rgb.js
function rgbSpline(spline) {
  return function(colors) {
    var n2 = colors.length, r = new Array(n2), g2 = new Array(n2), b4 = new Array(n2), i3, color4;
    for (i3 = 0; i3 < n2; ++i3) {
      color4 = rgb(colors[i3]);
      r[i3] = color4.r || 0;
      g2[i3] = color4.g || 0;
      b4[i3] = color4.b || 0;
    }
    r = spline(r);
    g2 = spline(g2);
    b4 = spline(b4);
    color4.opacity = 1;
    return function(t) {
      color4.r = r(t);
      color4.g = g2(t);
      color4.b = b4(t);
      return color4 + "";
    };
  };
}
var rgb_default, rgbBasis, rgbBasisClosed;
var init_rgb = __esm({
  "node_modules/d3-interpolate/src/rgb.js"() {
    init_src3();
    init_basis();
    init_basisClosed();
    init_color2();
    rgb_default = function rgbGamma(y4) {
      var color4 = gamma(y4);
      function rgb3(start2, end) {
        var r = color4((start2 = rgb(start2)).r, (end = rgb(end)).r), g2 = color4(start2.g, end.g), b4 = color4(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
        return function(t) {
          start2.r = r(t);
          start2.g = g2(t);
          start2.b = b4(t);
          start2.opacity = opacity(t);
          return start2 + "";
        };
      }
      rgb3.gamma = rgbGamma;
      return rgb3;
    }(1);
    rgbBasis = rgbSpline(basis_default);
    rgbBasisClosed = rgbSpline(basisClosed_default);
  }
});

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a4, b4) {
  if (!b4)
    b4 = [];
  var n2 = a4 ? Math.min(b4.length, a4.length) : 0, c6 = b4.slice(), i3;
  return function(t) {
    for (i3 = 0; i3 < n2; ++i3)
      c6[i3] = a4[i3] * (1 - t) + b4[i3] * t;
    return c6;
  };
}
function isNumberArray(x5) {
  return ArrayBuffer.isView(x5) && !(x5 instanceof DataView);
}
var init_numberArray = __esm({
  "node_modules/d3-interpolate/src/numberArray.js"() {
  }
});

// node_modules/d3-interpolate/src/array.js
function genericArray(a4, b4) {
  var nb = b4 ? b4.length : 0, na2 = a4 ? Math.min(nb, a4.length) : 0, x5 = new Array(na2), c6 = new Array(nb), i3;
  for (i3 = 0; i3 < na2; ++i3)
    x5[i3] = value_default(a4[i3], b4[i3]);
  for (; i3 < nb; ++i3)
    c6[i3] = b4[i3];
  return function(t) {
    for (i3 = 0; i3 < na2; ++i3)
      c6[i3] = x5[i3](t);
    return c6;
  };
}
var init_array2 = __esm({
  "node_modules/d3-interpolate/src/array.js"() {
    init_value();
  }
});

// node_modules/d3-interpolate/src/date.js
function date_default(a4, b4) {
  var d2 = new Date();
  return a4 = +a4, b4 = +b4, function(t) {
    return d2.setTime(a4 * (1 - t) + b4 * t), d2;
  };
}
var init_date = __esm({
  "node_modules/d3-interpolate/src/date.js"() {
  }
});

// node_modules/d3-interpolate/src/number.js
function number_default(a4, b4) {
  return a4 = +a4, b4 = +b4, function(t) {
    return a4 * (1 - t) + b4 * t;
  };
}
var init_number2 = __esm({
  "node_modules/d3-interpolate/src/number.js"() {
  }
});

// node_modules/d3-interpolate/src/object.js
function object_default(a4, b4) {
  var i3 = {}, c6 = {}, k4;
  if (a4 === null || typeof a4 !== "object")
    a4 = {};
  if (b4 === null || typeof b4 !== "object")
    b4 = {};
  for (k4 in b4) {
    if (k4 in a4) {
      i3[k4] = value_default(a4[k4], b4[k4]);
    } else {
      c6[k4] = b4[k4];
    }
  }
  return function(t) {
    for (k4 in i3)
      c6[k4] = i3[k4](t);
    return c6;
  };
}
var init_object = __esm({
  "node_modules/d3-interpolate/src/object.js"() {
    init_value();
  }
});

// node_modules/d3-interpolate/src/string.js
function zero2(b4) {
  return function() {
    return b4;
  };
}
function one(b4) {
  return function(t) {
    return b4(t) + "";
  };
}
function string_default(a4, b4) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i3 = -1, s2 = [], q5 = [];
  a4 = a4 + "", b4 = b4 + "";
  while ((am = reA.exec(a4)) && (bm = reB.exec(b4))) {
    if ((bs = bm.index) > bi) {
      bs = b4.slice(bi, bs);
      if (s2[i3])
        s2[i3] += bs;
      else
        s2[++i3] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i3])
        s2[i3] += bm;
      else
        s2[++i3] = bm;
    } else {
      s2[++i3] = null;
      q5.push({ i: i3, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b4.length) {
    bs = b4.slice(bi);
    if (s2[i3])
      s2[i3] += bs;
    else
      s2[++i3] = bs;
  }
  return s2.length < 2 ? q5[0] ? one(q5[0].x) : zero2(b4) : (b4 = q5.length, function(t) {
    for (var i4 = 0, o; i4 < b4; ++i4)
      s2[(o = q5[i4]).i] = o.x(t);
    return s2.join("");
  });
}
var reA, reB;
var init_string = __esm({
  "node_modules/d3-interpolate/src/string.js"() {
    init_number2();
    reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    reB = new RegExp(reA.source, "g");
  }
});

// node_modules/d3-interpolate/src/value.js
function value_default(a4, b4) {
  var t = typeof b4, c6;
  return b4 == null || t === "boolean" ? constant_default(b4) : (t === "number" ? number_default : t === "string" ? (c6 = color(b4)) ? (b4 = c6, rgb_default) : string_default : b4 instanceof color ? rgb_default : b4 instanceof Date ? date_default : isNumberArray(b4) ? numberArray_default : Array.isArray(b4) ? genericArray : typeof b4.valueOf !== "function" && typeof b4.toString !== "function" || isNaN(b4) ? object_default : number_default)(a4, b4);
}
var init_value = __esm({
  "node_modules/d3-interpolate/src/value.js"() {
    init_src3();
    init_rgb();
    init_array2();
    init_date();
    init_number2();
    init_object();
    init_string();
    init_constant2();
    init_numberArray();
  }
});

// node_modules/d3-interpolate/src/round.js
function round_default(a4, b4) {
  return a4 = +a4, b4 = +b4, function(t) {
    return Math.round(a4 * (1 - t) + b4 * t);
  };
}
var init_round = __esm({
  "node_modules/d3-interpolate/src/round.js"() {
  }
});

// node_modules/d3-interpolate/src/transform/decompose.js
function decompose_default(a4, b4, c6, d2, e, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a4 * a4 + b4 * b4))
    a4 /= scaleX, b4 /= scaleX;
  if (skewX = a4 * c6 + b4 * d2)
    c6 -= a4 * skewX, d2 -= b4 * skewX;
  if (scaleY = Math.sqrt(c6 * c6 + d2 * d2))
    c6 /= scaleY, d2 /= scaleY, skewX /= scaleY;
  if (a4 * d2 < b4 * c6)
    a4 = -a4, b4 = -b4, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f3,
    rotate: Math.atan2(b4, a4) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}
var degrees2, identity2;
var init_decompose = __esm({
  "node_modules/d3-interpolate/src/transform/decompose.js"() {
    degrees2 = 180 / Math.PI;
    identity2 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };
  }
});

// node_modules/d3-interpolate/src/transform/parse.js
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity2 : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity2;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity2;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}
var svgNode;
var init_parse = __esm({
  "node_modules/d3-interpolate/src/transform/parse.js"() {
    init_decompose();
  }
});

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse2, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa2, ya2, xb, yb, s2, q5) {
    if (xa2 !== xb || ya2 !== yb) {
      var i3 = s2.push("translate(", null, pxComma, null, pxParen);
      q5.push({ i: i3 - 4, x: number_default(xa2, xb) }, { i: i3 - 2, x: number_default(ya2, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a4, b4, s2, q5) {
    if (a4 !== b4) {
      if (a4 - b4 > 180)
        b4 += 360;
      else if (b4 - a4 > 180)
        a4 += 360;
      q5.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a4, b4) });
    } else if (b4) {
      s2.push(pop(s2) + "rotate(" + b4 + degParen);
    }
  }
  function skewX(a4, b4, s2, q5) {
    if (a4 !== b4) {
      q5.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a4, b4) });
    } else if (b4) {
      s2.push(pop(s2) + "skewX(" + b4 + degParen);
    }
  }
  function scale(xa2, ya2, xb, yb, s2, q5) {
    if (xa2 !== xb || ya2 !== yb) {
      var i3 = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q5.push({ i: i3 - 4, x: number_default(xa2, xb) }, { i: i3 - 2, x: number_default(ya2, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a4, b4) {
    var s2 = [], q5 = [];
    a4 = parse2(a4), b4 = parse2(b4);
    translate(a4.translateX, a4.translateY, b4.translateX, b4.translateY, s2, q5);
    rotate(a4.rotate, b4.rotate, s2, q5);
    skewX(a4.skewX, b4.skewX, s2, q5);
    scale(a4.scaleX, a4.scaleY, b4.scaleX, b4.scaleY, s2, q5);
    a4 = b4 = null;
    return function(t) {
      var i3 = -1, n2 = q5.length, o;
      while (++i3 < n2)
        s2[(o = q5[i3]).i] = o.x(t);
      return s2.join("");
    };
  };
}
var interpolateTransformCss, interpolateTransformSvg;
var init_transform = __esm({
  "node_modules/d3-interpolate/src/transform/index.js"() {
    init_number2();
    init_parse();
    interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  }
});

// node_modules/d3-interpolate/src/zoom.js
function cosh(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
var epsilon2, zoom_default;
var init_zoom = __esm({
  "node_modules/d3-interpolate/src/zoom.js"() {
    epsilon2 = 1e-12;
    zoom_default = function zoomRho(rho, rho2, rho4) {
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i3, S5;
        if (d2 < epsilon2) {
          S5 = Math.log(w1 / w0) / rho;
          i3 = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S5)
            ];
          };
        } else {
          var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S5 = (r1 - r0) / rho;
          i3 = function(t) {
            var s2 = t * S5, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s2 + r0)
            ];
          };
        }
        i3.duration = S5 * 1e3 * rho / Math.SQRT2;
        return i3;
      }
      zoom.rho = function(_3) {
        var _1 = Math.max(1e-3, +_3), _22 = _1 * _1, _4 = _22 * _22;
        return zoomRho(_1, _22, _4);
      };
      return zoom;
    }(Math.SQRT2, 2, 4);
  }
});

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue3) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix5(start2, end) {
      var h2 = hue3((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h2(t);
        start2.s = s2(t);
        start2.l = l(Math.pow(t, y4));
        start2.opacity = opacity(t);
        return start2 + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default, cubehelixLong;
var init_cubehelix2 = __esm({
  "node_modules/d3-interpolate/src/cubehelix.js"() {
    init_src3();
    init_color2();
    cubehelix_default = cubehelix2(hue);
    cubehelixLong = cubehelix2(nogamma);
  }
});

// node_modules/d3-interpolate/src/piecewise.js
function piecewise(interpolate, values) {
  if (values === void 0)
    values = interpolate, interpolate = value_default;
  var i3 = 0, n2 = values.length - 1, v2 = values[0], I4 = new Array(n2 < 0 ? 0 : n2);
  while (i3 < n2)
    I4[i3] = interpolate(v2, v2 = values[++i3]);
  return function(t) {
    var i4 = Math.max(0, Math.min(n2 - 1, Math.floor(t *= n2)));
    return I4[i4](t - i4);
  };
}
var init_piecewise = __esm({
  "node_modules/d3-interpolate/src/piecewise.js"() {
    init_value();
  }
});

// node_modules/d3-interpolate/src/index.js
var init_src4 = __esm({
  "node_modules/d3-interpolate/src/index.js"() {
    init_value();
    init_number2();
    init_round();
    init_string();
    init_transform();
    init_zoom();
    init_rgb();
    init_cubehelix2();
    init_piecewise();
  }
});

// node_modules/d3-scale/src/constant.js
function constants(x5) {
  return function() {
    return x5;
  };
}
var init_constant3 = __esm({
  "node_modules/d3-scale/src/constant.js"() {
  }
});

// node_modules/d3-scale/src/number.js
function number2(x5) {
  return +x5;
}
var init_number3 = __esm({
  "node_modules/d3-scale/src/number.js"() {
  }
});

// node_modules/d3-scale/src/continuous.js
function identity3(x5) {
  return x5;
}
function normalize(a4, b4) {
  return (b4 -= a4 = +a4) ? function(x5) {
    return (x5 - a4) / b4;
  } : constants(isNaN(b4) ? NaN : 0.5);
}
function clamper(a4, b4) {
  var t;
  if (a4 > b4)
    t = a4, a4 = b4, b4 = t;
  return function(x5) {
    return Math.max(a4, Math.min(b4, x5));
  };
}
function bimap(domain, range2, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x5) {
    return r0(d0(x5));
  };
}
function polymap(domain, range2, interpolate) {
  var j5 = Math.min(domain.length, range2.length) - 1, d2 = new Array(j5), r = new Array(j5), i3 = -1;
  if (domain[j5] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i3 < j5) {
    d2[i3] = normalize(domain[i3], domain[i3 + 1]);
    r[i3] = interpolate(range2[i3], range2[i3 + 1]);
  }
  return function(x5) {
    var i4 = bisect_default(domain, x5, 1, j5) - 1;
    return r[i4](d2[i4](x5));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range2 = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity3, piecewise2, output, input;
  function rescale() {
    var n2 = Math.min(domain.length, range2.length);
    if (clamp !== identity3)
      clamp = clamper(domain[0], domain[n2 - 1]);
    piecewise2 = n2 > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : (output || (output = piecewise2(domain.map(transform2), range2, interpolate)))(transform2(clamp(x5)));
  }
  scale.invert = function(y4) {
    return clamp(untransform((input || (input = piecewise2(range2, domain.map(transform2), number_default)))(y4)));
  };
  scale.domain = function(_3) {
    return arguments.length ? (domain = Array.from(_3, number2), rescale()) : domain.slice();
  };
  scale.range = function(_3) {
    return arguments.length ? (range2 = Array.from(_3), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_3) {
    return range2 = Array.from(_3), interpolate = round_default, rescale();
  };
  scale.clamp = function(_3) {
    return arguments.length ? (clamp = _3 ? true : identity3, rescale()) : clamp !== identity3;
  };
  scale.interpolate = function(_3) {
    return arguments.length ? (interpolate = _3, rescale()) : interpolate;
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  return function(t, u) {
    transform2 = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}
var unit;
var init_continuous = __esm({
  "node_modules/d3-scale/src/continuous.js"() {
    init_src2();
    init_src4();
    init_constant3();
    init_number3();
    unit = [0, 1];
  }
});

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x5) {
  return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
}
function formatDecimalParts(x5, p2) {
  if ((i3 = (x5 = p2 ? x5.toExponential(p2 - 1) : x5.toExponential()).indexOf("e")) < 0)
    return null;
  var i3, coefficient = x5.slice(0, i3);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i3 + 1)
  ];
}
var init_formatDecimal = __esm({
  "node_modules/d3-format/src/formatDecimal.js"() {
  }
});

// node_modules/d3-format/src/exponent.js
function exponent_default(x5) {
  return x5 = formatDecimalParts(Math.abs(x5)), x5 ? x5[1] : NaN;
}
var init_exponent = __esm({
  "node_modules/d3-format/src/exponent.js"() {
    init_formatDecimal();
  }
});

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i3 = value.length, t = [], j5 = 0, g2 = grouping[0], length3 = 0;
    while (i3 > 0 && g2 > 0) {
      if (length3 + g2 + 1 > width)
        g2 = Math.max(1, width - length3);
      t.push(value.substring(i3 -= g2, i3 + g2));
      if ((length3 += g2 + 1) > width)
        break;
      g2 = grouping[j5 = (j5 + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
var init_formatGroup = __esm({
  "node_modules/d3-format/src/formatGroup.js"() {
  }
});

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i3) {
      return numerals[+i3];
    });
  };
}
var init_formatNumerals = __esm({
  "node_modules/d3-format/src/formatNumerals.js"() {
  }
});

// node_modules/d3-format/src/formatSpecifier.js
function formatSpecifier(specifier) {
  if (!(match = re3.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
var re3;
var init_formatSpecifier = __esm({
  "node_modules/d3-format/src/formatSpecifier.js"() {
    re3 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    formatSpecifier.prototype = FormatSpecifier.prototype;
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };
  }
});

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out:
    for (var n2 = s2.length, i3 = 1, i0 = -1, i1; i3 < n2; ++i3) {
      switch (s2[i3]) {
        case ".":
          i0 = i1 = i3;
          break;
        case "0":
          if (i0 === 0)
            i0 = i3;
          i1 = i3;
          break;
        default:
          if (!+s2[i3])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}
var init_formatTrim = __esm({
  "node_modules/d3-format/src/formatTrim.js"() {
  }
});

// node_modules/d3-format/src/formatPrefixAuto.js
function formatPrefixAuto_default(x5, p2) {
  var d2 = formatDecimalParts(x5, p2);
  if (!d2)
    return x5 + "";
  var coefficient = d2[0], exponent = d2[1], i3 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n2 = coefficient.length;
  return i3 === n2 ? coefficient : i3 > n2 ? coefficient + new Array(i3 - n2 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimalParts(x5, Math.max(0, p2 + i3 - 1))[0];
}
var prefixExponent;
var init_formatPrefixAuto = __esm({
  "node_modules/d3-format/src/formatPrefixAuto.js"() {
    init_formatDecimal();
  }
});

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x5, p2) {
  var d2 = formatDecimalParts(x5, p2);
  if (!d2)
    return x5 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
var init_formatRounded = __esm({
  "node_modules/d3-format/src/formatRounded.js"() {
    init_formatDecimal();
  }
});

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default;
var init_formatTypes = __esm({
  "node_modules/d3-format/src/formatTypes.js"() {
    init_formatDecimal();
    init_formatPrefixAuto();
    init_formatRounded();
    formatTypes_default = {
      "%": (x5, p2) => (x5 * 100).toFixed(p2),
      "b": (x5) => Math.round(x5).toString(2),
      "c": (x5) => x5 + "",
      "d": formatDecimal_default,
      "e": (x5, p2) => x5.toExponential(p2),
      "f": (x5, p2) => x5.toFixed(p2),
      "g": (x5, p2) => x5.toPrecision(p2),
      "o": (x5) => Math.round(x5).toString(8),
      "p": (x5, p2) => formatRounded_default(x5 * 100, p2),
      "r": formatRounded_default,
      "s": formatPrefixAuto_default,
      "X": (x5) => Math.round(x5).toString(16).toUpperCase(),
      "x": (x5) => Math.round(x5).toString(16)
    };
  }
});

// node_modules/d3-format/src/identity.js
function identity_default(x5) {
  return x5;
}
var init_identity2 = __esm({
  "node_modules/d3-format/src/identity.js"() {
  }
});

// node_modules/d3-format/src/locale.js
function locale_default(locale4) {
  var group2 = locale4.grouping === void 0 || locale4.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale4.grouping, Number), locale4.thousands + ""), currencyPrefix = locale4.currency === void 0 ? "" : locale4.currency[0] + "", currencySuffix = locale4.currency === void 0 ? "" : locale4.currency[1] + "", decimal = locale4.decimal === void 0 ? "." : locale4.decimal + "", numerals = locale4.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale4.numerals, String)), percent = locale4.percent === void 0 ? "%" : locale4.percent + "", minus = locale4.minus === void 0 ? "\u2212" : locale4.minus + "", nan = locale4.nan === void 0 ? "NaN" : locale4.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero4 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero4 || fill === "0" && align === "=")
      zero4 = true, fill = "0", align = "=";
    var prefix2 = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i3, n2, c6;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i3 = -1, n2 = value.length;
          while (++i3 < n2) {
            if (c6 = value.charCodeAt(i3), 48 > c6 || c6 > 57) {
              valueSuffix = (c6 === 46 ? decimal + value.slice(i3 + 1) : value.slice(i3)) + valueSuffix;
              value = value.slice(0, i3);
              break;
            }
          }
        }
      }
      if (comma && !zero4)
        value = group2(value, Infinity);
      var length3 = valuePrefix.length + value.length + valueSuffix.length, padding = length3 < width ? new Array(width - length3 + 1).join(fill) : "";
      if (comma && zero4)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length3 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length3);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f3 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k4 = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
    return function(value2) {
      return f3(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}
var map3, prefixes;
var init_locale = __esm({
  "node_modules/d3-format/src/locale.js"() {
    init_exponent();
    init_formatGroup();
    init_formatNumerals();
    init_formatSpecifier();
    init_formatTrim();
    init_formatTypes();
    init_formatPrefixAuto();
    init_identity2();
    map3 = Array.prototype.map;
    prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  }
});

// node_modules/d3-format/src/defaultLocale.js
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
var locale, format, formatPrefix;
var init_defaultLocale = __esm({
  "node_modules/d3-format/src/defaultLocale.js"() {
    init_locale();
    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
  }
});

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}
var init_precisionFixed = __esm({
  "node_modules/d3-format/src/precisionFixed.js"() {
    init_exponent();
  }
});

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}
var init_precisionPrefix = __esm({
  "node_modules/d3-format/src/precisionPrefix.js"() {
    init_exponent();
  }
});

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max5) {
  step = Math.abs(step), max5 = Math.abs(max5) - step;
  return Math.max(0, exponent_default(max5) - exponent_default(step)) + 1;
}
var init_precisionRound = __esm({
  "node_modules/d3-format/src/precisionRound.js"() {
    init_exponent();
  }
});

// node_modules/d3-format/src/index.js
var init_src5 = __esm({
  "node_modules/d3-format/src/index.js"() {
    init_defaultLocale();
    init_formatSpecifier();
    init_precisionFixed();
    init_precisionPrefix();
    init_precisionRound();
  }
});

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count3, specifier) {
  var step = tickStep(start2, stop, count3), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
var init_tickFormat = __esm({
  "node_modules/d3-scale/src/tickFormat.js"() {
    init_src2();
    init_src5();
  }
});

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d2 = domain();
    return ticks(d2[0], d2[d2.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    var d2 = domain();
    return tickFormat(d2[0], d2[d2.length - 1], count3 == null ? 10 : count3, specifier);
  };
  scale.nice = function(count3) {
    if (count3 == null)
      count3 = 10;
    var d2 = domain();
    var i0 = 0;
    var i1 = d2.length - 1;
    var start2 = d2[i0];
    var stop = d2[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count3);
      if (step === prestep) {
        d2[i0] = start2;
        d2[i1] = stop;
        return domain(d2);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var init_linear = __esm({
  "node_modules/d3-scale/src/linear.js"() {
    init_src2();
    init_continuous();
    init_init();
    init_tickFormat();
  }
});

// node_modules/d3-scale/src/identity.js
function identity4(domain) {
  var unknown;
  function scale(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : x5;
  }
  scale.invert = scale;
  scale.domain = scale.range = function(_3) {
    return arguments.length ? (domain = Array.from(_3, number2), scale) : domain.slice();
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  scale.copy = function() {
    return identity4(domain).unknown(unknown);
  };
  domain = arguments.length ? Array.from(domain, number2) : [0, 1];
  return linearish(scale);
}
var init_identity3 = __esm({
  "node_modules/d3-scale/src/identity.js"() {
    init_linear();
    init_number3();
  }
});

// node_modules/d3-scale/src/nice.js
function nice2(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }
  domain[i0] = interval2.floor(x0);
  domain[i1] = interval2.ceil(x1);
  return domain;
}
var init_nice2 = __esm({
  "node_modules/d3-scale/src/nice.js"() {
  }
});

// node_modules/d3-scale/src/log.js
function transformLog(x5) {
  return Math.log(x5);
}
function transformExp(x5) {
  return Math.exp(x5);
}
function transformLogn(x5) {
  return -Math.log(-x5);
}
function transformExpn(x5) {
  return -Math.exp(-x5);
}
function pow10(x5) {
  return isFinite(x5) ? +("1e" + x5) : x5 < 0 ? 0 : x5;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x5) => Math.pow(base, x5);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x5) => Math.log(x5) / base);
}
function reflect(f3) {
  return (x5, k4) => -f3(-x5, k4);
}
function loggish(transform2) {
  const scale = transform2(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform2(transformLogn, transformExpn);
    } else {
      transform2(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_3) {
    return arguments.length ? (base = +_3, rescale()) : base;
  };
  scale.domain = function(_3) {
    return arguments.length ? (domain(_3), rescale()) : domain();
  };
  scale.ticks = (count3) => {
    const d2 = domain();
    let u = d2[0];
    let v2 = d2[d2.length - 1];
    const r = v2 < u;
    if (r)
      [u, v2] = [v2, u];
    let i3 = logs(u);
    let j5 = logs(v2);
    let k4;
    let t;
    const n2 = count3 == null ? 10 : +count3;
    let z4 = [];
    if (!(base % 1) && j5 - i3 < n2) {
      i3 = Math.floor(i3), j5 = Math.ceil(j5);
      if (u > 0)
        for (; i3 <= j5; ++i3) {
          for (k4 = 1; k4 < base; ++k4) {
            t = i3 < 0 ? k4 / pows(-i3) : k4 * pows(i3);
            if (t < u)
              continue;
            if (t > v2)
              break;
            z4.push(t);
          }
        }
      else
        for (; i3 <= j5; ++i3) {
          for (k4 = base - 1; k4 >= 1; --k4) {
            t = i3 > 0 ? k4 / pows(-i3) : k4 * pows(i3);
            if (t < u)
              continue;
            if (t > v2)
              break;
            z4.push(t);
          }
        }
      if (z4.length * 2 < n2)
        z4 = ticks(u, v2, n2);
    } else {
      z4 = ticks(i3, j5, Math.min(j5 - i3, n2)).map(pows);
    }
    return r ? z4.reverse() : z4;
  };
  scale.tickFormat = (count3, specifier) => {
    if (count3 == null)
      count3 = 10;
    if (specifier == null)
      specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count3 === Infinity)
      return specifier;
    const k4 = Math.max(1, base * count3 / scale.ticks().length);
    return (d2) => {
      let i3 = d2 / pows(Math.round(logs(d2)));
      if (i3 * base < base - 0.5)
        i3 *= base;
      return i3 <= k4 ? specifier(d2) : "";
    };
  };
  scale.nice = () => {
    return domain(nice2(domain(), {
      floor: (x5) => pows(Math.floor(logs(x5))),
      ceil: (x5) => pows(Math.ceil(logs(x5)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
var init_log = __esm({
  "node_modules/d3-scale/src/log.js"() {
    init_src2();
    init_src5();
    init_nice2();
    init_continuous();
    init_init();
  }
});

// node_modules/d3-scale/src/symlog.js
function transformSymlog(c6) {
  return function(x5) {
    return Math.sign(x5) * Math.log1p(Math.abs(x5 / c6));
  };
}
function transformSymexp(c6) {
  return function(x5) {
    return Math.sign(x5) * Math.expm1(Math.abs(x5)) * c6;
  };
}
function symlogish(transform2) {
  var c6 = 1, scale = transform2(transformSymlog(c6), transformSymexp(c6));
  scale.constant = function(_3) {
    return arguments.length ? transform2(transformSymlog(c6 = +_3), transformSymexp(c6)) : c6;
  };
  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer());
  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };
  return initRange.apply(scale, arguments);
}
var init_symlog = __esm({
  "node_modules/d3-scale/src/symlog.js"() {
    init_linear();
    init_continuous();
    init_init();
  }
});

// node_modules/d3-scale/src/pow.js
function transformPow(exponent) {
  return function(x5) {
    return x5 < 0 ? -Math.pow(-x5, exponent) : Math.pow(x5, exponent);
  };
}
function transformSqrt(x5) {
  return x5 < 0 ? -Math.sqrt(-x5) : Math.sqrt(x5);
}
function transformSquare(x5) {
  return x5 < 0 ? -x5 * x5 : x5 * x5;
}
function powish(transform2) {
  var scale = transform2(identity3, identity3), exponent = 1;
  function rescale() {
    return exponent === 1 ? transform2(identity3, identity3) : exponent === 0.5 ? transform2(transformSqrt, transformSquare) : transform2(transformPow(exponent), transformPow(1 / exponent));
  }
  scale.exponent = function(_3) {
    return arguments.length ? (exponent = +_3, rescale()) : exponent;
  };
  return linearish(scale);
}
function pow() {
  var scale = powish(transformer());
  scale.copy = function() {
    return copy(scale, pow()).exponent(scale.exponent());
  };
  initRange.apply(scale, arguments);
  return scale;
}
function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
var init_pow = __esm({
  "node_modules/d3-scale/src/pow.js"() {
    init_linear();
    init_continuous();
    init_init();
  }
});

// node_modules/d3-scale/src/radial.js
function square(x5) {
  return Math.sign(x5) * x5 * x5;
}
function unsquare(x5) {
  return Math.sign(x5) * Math.sqrt(Math.abs(x5));
}
function radial() {
  var squared = continuous(), range2 = [0, 1], round = false, unknown;
  function scale(x5) {
    var y4 = unsquare(squared(x5));
    return isNaN(y4) ? unknown : round ? Math.round(y4) : y4;
  }
  scale.invert = function(y4) {
    return squared.invert(square(y4));
  };
  scale.domain = function(_3) {
    return arguments.length ? (squared.domain(_3), scale) : squared.domain();
  };
  scale.range = function(_3) {
    return arguments.length ? (squared.range((range2 = Array.from(_3, number2)).map(square)), scale) : range2.slice();
  };
  scale.rangeRound = function(_3) {
    return scale.range(_3).round(true);
  };
  scale.round = function(_3) {
    return arguments.length ? (round = !!_3, scale) : round;
  };
  scale.clamp = function(_3) {
    return arguments.length ? (squared.clamp(_3), scale) : squared.clamp();
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  scale.copy = function() {
    return radial(squared.domain(), range2).round(round).clamp(squared.clamp()).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var init_radial = __esm({
  "node_modules/d3-scale/src/radial.js"() {
    init_continuous();
    init_init();
    init_linear();
    init_number3();
  }
});

// node_modules/d3-scale/src/quantile.js
function quantile2() {
  var domain = [], range2 = [], thresholds = [], unknown;
  function rescale() {
    var i3 = 0, n2 = Math.max(1, range2.length);
    thresholds = new Array(n2 - 1);
    while (++i3 < n2)
      thresholds[i3 - 1] = quantileSorted(domain, i3 / n2);
    return scale;
  }
  function scale(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : range2[bisect_default(thresholds, x5)];
  }
  scale.invertExtent = function(y4) {
    var i3 = range2.indexOf(y4);
    return i3 < 0 ? [NaN, NaN] : [
      i3 > 0 ? thresholds[i3 - 1] : domain[0],
      i3 < thresholds.length ? thresholds[i3] : domain[domain.length - 1]
    ];
  };
  scale.domain = function(_3) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (let d2 of _3)
      if (d2 != null && !isNaN(d2 = +d2))
        domain.push(d2);
    domain.sort(ascending);
    return rescale();
  };
  scale.range = function(_3) {
    return arguments.length ? (range2 = Array.from(_3), rescale()) : range2.slice();
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  scale.quantiles = function() {
    return thresholds.slice();
  };
  scale.copy = function() {
    return quantile2().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
var init_quantile2 = __esm({
  "node_modules/d3-scale/src/quantile.js"() {
    init_src2();
    init_init();
  }
});

// node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n2 = 1, domain = [0.5], range2 = [0, 1], unknown;
  function scale(x5) {
    return x5 != null && x5 <= x5 ? range2[bisect_default(domain, x5, 0, n2)] : unknown;
  }
  function rescale() {
    var i3 = -1;
    domain = new Array(n2);
    while (++i3 < n2)
      domain[i3] = ((i3 + 1) * x1 - (i3 - n2) * x0) / (n2 + 1);
    return scale;
  }
  scale.domain = function(_3) {
    return arguments.length ? ([x0, x1] = _3, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };
  scale.range = function(_3) {
    return arguments.length ? (n2 = (range2 = Array.from(_3)).length - 1, rescale()) : range2.slice();
  };
  scale.invertExtent = function(y4) {
    var i3 = range2.indexOf(y4);
    return i3 < 0 ? [NaN, NaN] : i3 < 1 ? [x0, domain[0]] : i3 >= n2 ? [domain[n2 - 1], x1] : [domain[i3 - 1], domain[i3]];
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range2).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}
var init_quantize = __esm({
  "node_modules/d3-scale/src/quantize.js"() {
    init_src2();
    init_linear();
    init_init();
  }
});

// node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range2 = [0, 1], unknown, n2 = 1;
  function scale(x5) {
    return x5 != null && x5 <= x5 ? range2[bisect_default(domain, x5, 0, n2)] : unknown;
  }
  scale.domain = function(_3) {
    return arguments.length ? (domain = Array.from(_3), n2 = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
  };
  scale.range = function(_3) {
    return arguments.length ? (range2 = Array.from(_3), n2 = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
  };
  scale.invertExtent = function(y4) {
    var i3 = range2.indexOf(y4);
    return [domain[i3 - 1], domain[i3]];
  };
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  scale.copy = function() {
    return threshold().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
var init_threshold = __esm({
  "node_modules/d3-scale/src/threshold.js"() {
    init_src2();
    init_init();
  }
});

// node_modules/d3-time/src/interval.js
function timeInterval(floori, offseti, count3, field) {
  function interval2(date2) {
    return floori(date2 = arguments.length === 0 ? new Date() : new Date(+date2)), date2;
  }
  interval2.floor = (date2) => {
    return floori(date2 = new Date(+date2)), date2;
  };
  interval2.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval2.round = (date2) => {
    const d0 = interval2(date2), d1 = interval2.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval2.offset = (date2, step) => {
    return offseti(date2 = new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval2.range = (start2, stop, step) => {
    const range2 = [];
    start2 = interval2.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop) || !(step > 0))
      return range2;
    let previous;
    do
      range2.push(previous = new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop);
    return range2;
  };
  interval2.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, (date2, step) => {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval2.count = (start2, end) => {
      t0.setTime(+start2), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count3(t0, t1));
    };
    interval2.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field ? (d2) => field(d2) % step === 0 : (d2) => interval2.count(0, d2) % step === 0);
    };
  }
  return interval2;
}
var t0, t1;
var init_interval = __esm({
  "node_modules/d3-time/src/interval.js"() {
    t0 = new Date();
    t1 = new Date();
  }
});

// node_modules/d3-time/src/millisecond.js
var millisecond, milliseconds;
var init_millisecond = __esm({
  "node_modules/d3-time/src/millisecond.js"() {
    init_interval();
    millisecond = timeInterval(() => {
    }, (date2, step) => {
      date2.setTime(+date2 + step);
    }, (start2, end) => {
      return end - start2;
    });
    millisecond.every = (k4) => {
      k4 = Math.floor(k4);
      if (!isFinite(k4) || !(k4 > 0))
        return null;
      if (!(k4 > 1))
        return millisecond;
      return timeInterval((date2) => {
        date2.setTime(Math.floor(date2 / k4) * k4);
      }, (date2, step) => {
        date2.setTime(+date2 + step * k4);
      }, (start2, end) => {
        return (end - start2) / k4;
      });
    };
    milliseconds = millisecond.range;
  }
});

// node_modules/d3-time/src/duration.js
var durationSecond, durationMinute, durationHour, durationDay, durationWeek, durationMonth, durationYear;
var init_duration = __esm({
  "node_modules/d3-time/src/duration.js"() {
    durationSecond = 1e3;
    durationMinute = durationSecond * 60;
    durationHour = durationMinute * 60;
    durationDay = durationHour * 24;
    durationWeek = durationDay * 7;
    durationMonth = durationDay * 30;
    durationYear = durationDay * 365;
  }
});

// node_modules/d3-time/src/second.js
var second, seconds;
var init_second = __esm({
  "node_modules/d3-time/src/second.js"() {
    init_interval();
    init_duration();
    second = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds());
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationSecond);
    }, (start2, end) => {
      return (end - start2) / durationSecond;
    }, (date2) => {
      return date2.getUTCSeconds();
    });
    seconds = second.range;
  }
});

// node_modules/d3-time/src/minute.js
var timeMinute, timeMinutes, utcMinute, utcMinutes;
var init_minute = __esm({
  "node_modules/d3-time/src/minute.js"() {
    init_interval();
    init_duration();
    timeMinute = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start2, end) => {
      return (end - start2) / durationMinute;
    }, (date2) => {
      return date2.getMinutes();
    });
    timeMinutes = timeMinute.range;
    utcMinute = timeInterval((date2) => {
      date2.setUTCSeconds(0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start2, end) => {
      return (end - start2) / durationMinute;
    }, (date2) => {
      return date2.getUTCMinutes();
    });
    utcMinutes = utcMinute.range;
  }
});

// node_modules/d3-time/src/hour.js
var timeHour, timeHours, utcHour, utcHours;
var init_hour = __esm({
  "node_modules/d3-time/src/hour.js"() {
    init_interval();
    init_duration();
    timeHour = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start2, end) => {
      return (end - start2) / durationHour;
    }, (date2) => {
      return date2.getHours();
    });
    timeHours = timeHour.range;
    utcHour = timeInterval((date2) => {
      date2.setUTCMinutes(0, 0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start2, end) => {
      return (end - start2) / durationHour;
    }, (date2) => {
      return date2.getUTCHours();
    });
    utcHours = utcHour.range;
  }
});

// node_modules/d3-time/src/day.js
var timeDay, timeDays, utcDay, utcDays, unixDay, unixDays;
var init_day = __esm({
  "node_modules/d3-time/src/day.js"() {
    init_interval();
    init_duration();
    timeDay = timeInterval(
      (date2) => date2.setHours(0, 0, 0, 0),
      (date2, step) => date2.setDate(date2.getDate() + step),
      (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
      (date2) => date2.getDate() - 1
    );
    timeDays = timeDay.range;
    utcDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start2, end) => {
      return (end - start2) / durationDay;
    }, (date2) => {
      return date2.getUTCDate() - 1;
    });
    utcDays = utcDay.range;
    unixDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start2, end) => {
      return (end - start2) / durationDay;
    }, (date2) => {
      return Math.floor(date2 / durationDay);
    });
    unixDays = unixDay.range;
  }
});

// node_modules/d3-time/src/week.js
function timeWeekday(i3) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i3) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setDate(date2.getDate() + step * 7);
  }, (start2, end) => {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
function utcWeekday(i3) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i3) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, (start2, end) => {
    return (end - start2) / durationWeek;
  });
}
var timeSunday, timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeSundays, timeMondays, timeTuesdays, timeWednesdays, timeThursdays, timeFridays, timeSaturdays, utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays;
var init_week = __esm({
  "node_modules/d3-time/src/week.js"() {
    init_interval();
    init_duration();
    timeSunday = timeWeekday(0);
    timeMonday = timeWeekday(1);
    timeTuesday = timeWeekday(2);
    timeWednesday = timeWeekday(3);
    timeThursday = timeWeekday(4);
    timeFriday = timeWeekday(5);
    timeSaturday = timeWeekday(6);
    timeSundays = timeSunday.range;
    timeMondays = timeMonday.range;
    timeTuesdays = timeTuesday.range;
    timeWednesdays = timeWednesday.range;
    timeThursdays = timeThursday.range;
    timeFridays = timeFriday.range;
    timeSaturdays = timeSaturday.range;
    utcSunday = utcWeekday(0);
    utcMonday = utcWeekday(1);
    utcTuesday = utcWeekday(2);
    utcWednesday = utcWeekday(3);
    utcThursday = utcWeekday(4);
    utcFriday = utcWeekday(5);
    utcSaturday = utcWeekday(6);
    utcSundays = utcSunday.range;
    utcMondays = utcMonday.range;
    utcTuesdays = utcTuesday.range;
    utcWednesdays = utcWednesday.range;
    utcThursdays = utcThursday.range;
    utcFridays = utcFriday.range;
    utcSaturdays = utcSaturday.range;
  }
});

// node_modules/d3-time/src/month.js
var timeMonth, timeMonths, utcMonth, utcMonths;
var init_month = __esm({
  "node_modules/d3-time/src/month.js"() {
    init_interval();
    timeMonth = timeInterval((date2) => {
      date2.setDate(1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setMonth(date2.getMonth() + step);
    }, (start2, end) => {
      return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
    }, (date2) => {
      return date2.getMonth();
    });
    timeMonths = timeMonth.range;
    utcMonth = timeInterval((date2) => {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCMonth(date2.getUTCMonth() + step);
    }, (start2, end) => {
      return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
    }, (date2) => {
      return date2.getUTCMonth();
    });
    utcMonths = utcMonth.range;
  }
});

// node_modules/d3-time/src/year.js
var timeYear, timeYears, utcYear, utcYears;
var init_year = __esm({
  "node_modules/d3-time/src/year.js"() {
    init_interval();
    timeYear = timeInterval((date2) => {
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step);
    }, (start2, end) => {
      return end.getFullYear() - start2.getFullYear();
    }, (date2) => {
      return date2.getFullYear();
    });
    timeYear.every = (k4) => {
      return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : timeInterval((date2) => {
        date2.setFullYear(Math.floor(date2.getFullYear() / k4) * k4);
        date2.setMonth(0, 1);
        date2.setHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setFullYear(date2.getFullYear() + step * k4);
      });
    };
    timeYears = timeYear.range;
    utcYear = timeInterval((date2) => {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step);
    }, (start2, end) => {
      return end.getUTCFullYear() - start2.getUTCFullYear();
    }, (date2) => {
      return date2.getUTCFullYear();
    });
    utcYear.every = (k4) => {
      return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : timeInterval((date2) => {
        date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k4) * k4);
        date2.setUTCMonth(0, 1);
        date2.setUTCHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setUTCFullYear(date2.getUTCFullYear() + step * k4);
      });
    };
    utcYears = utcYear.range;
  }
});

// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start2, stop, count3) {
    const reverse2 = stop < start2;
    if (reverse2)
      [start2, stop] = [stop, start2];
    const interval2 = count3 && typeof count3.range === "function" ? count3 : tickInterval(start2, stop, count3);
    const ticks3 = interval2 ? interval2.range(start2, +stop + 1) : [];
    return reverse2 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start2, stop, count3) {
    const target = Math.abs(stop - start2) / count3;
    const i3 = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i3 === tickIntervals.length)
      return year.every(tickStep(start2 / durationYear, stop / durationYear, count3));
    if (i3 === 0)
      return millisecond.every(Math.max(tickStep(start2, stop, count3), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i3 - 1][2] < tickIntervals[i3][2] / target ? i3 - 1 : i3];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
var utcTicks, utcTickInterval, timeTicks, timeTickInterval;
var init_ticks2 = __esm({
  "node_modules/d3-time/src/ticks.js"() {
    init_src2();
    init_duration();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
    [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
  }
});

// node_modules/d3-time/src/index.js
var src_exports2 = {};
__export(src_exports2, {
  timeDay: () => timeDay,
  timeDays: () => timeDays,
  timeFriday: () => timeFriday,
  timeFridays: () => timeFridays,
  timeHour: () => timeHour,
  timeHours: () => timeHours,
  timeInterval: () => timeInterval,
  timeMillisecond: () => millisecond,
  timeMilliseconds: () => milliseconds,
  timeMinute: () => timeMinute,
  timeMinutes: () => timeMinutes,
  timeMonday: () => timeMonday,
  timeMondays: () => timeMondays,
  timeMonth: () => timeMonth,
  timeMonths: () => timeMonths,
  timeSaturday: () => timeSaturday,
  timeSaturdays: () => timeSaturdays,
  timeSecond: () => second,
  timeSeconds: () => seconds,
  timeSunday: () => timeSunday,
  timeSundays: () => timeSundays,
  timeThursday: () => timeThursday,
  timeThursdays: () => timeThursdays,
  timeTickInterval: () => timeTickInterval,
  timeTicks: () => timeTicks,
  timeTuesday: () => timeTuesday,
  timeTuesdays: () => timeTuesdays,
  timeWednesday: () => timeWednesday,
  timeWednesdays: () => timeWednesdays,
  timeWeek: () => timeSunday,
  timeWeeks: () => timeSundays,
  timeYear: () => timeYear,
  timeYears: () => timeYears,
  unixDay: () => unixDay,
  unixDays: () => unixDays,
  utcDay: () => utcDay,
  utcDays: () => utcDays,
  utcFriday: () => utcFriday,
  utcFridays: () => utcFridays,
  utcHour: () => utcHour,
  utcHours: () => utcHours,
  utcMillisecond: () => millisecond,
  utcMilliseconds: () => milliseconds,
  utcMinute: () => utcMinute,
  utcMinutes: () => utcMinutes,
  utcMonday: () => utcMonday,
  utcMondays: () => utcMondays,
  utcMonth: () => utcMonth,
  utcMonths: () => utcMonths,
  utcSaturday: () => utcSaturday,
  utcSaturdays: () => utcSaturdays,
  utcSecond: () => second,
  utcSeconds: () => seconds,
  utcSunday: () => utcSunday,
  utcSundays: () => utcSundays,
  utcThursday: () => utcThursday,
  utcThursdays: () => utcThursdays,
  utcTickInterval: () => utcTickInterval,
  utcTicks: () => utcTicks,
  utcTuesday: () => utcTuesday,
  utcTuesdays: () => utcTuesdays,
  utcWednesday: () => utcWednesday,
  utcWednesdays: () => utcWednesdays,
  utcWeek: () => utcSunday,
  utcWeeks: () => utcSundays,
  utcYear: () => utcYear,
  utcYears: () => utcYears
});
var init_src6 = __esm({
  "node_modules/d3-time/src/index.js"() {
    init_interval();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_ticks2();
  }
});

// node_modules/d3-time-format/src/locale.js
function localDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date2 = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
    date2.setFullYear(d2.y);
    return date2;
  }
  return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
}
function utcDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date2 = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
    date2.setUTCFullYear(d2.y);
    return date2;
  }
  return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
}
function newDate(y4, m2, d2) {
  return { y: y4, m: m2, d: d2, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale4) {
  var locale_dateTime = locale4.dateTime, locale_date = locale4.date, locale_time = locale4.time, locale_periods = locale4.periods, locale_weekdays = locale4.days, locale_shortWeekdays = locale4.shortDays, locale_months = locale4.months, locale_shortMonths = locale4.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i3 = -1, j5 = 0, n2 = specifier.length, c6, pad3, format3;
      if (!(date2 instanceof Date))
        date2 = new Date(+date2);
      while (++i3 < n2) {
        if (specifier.charCodeAt(i3) === 37) {
          string.push(specifier.slice(j5, i3));
          if ((pad3 = pads[c6 = specifier.charAt(++i3)]) != null)
            c6 = specifier.charAt(++i3);
          else
            pad3 = c6 === "e" ? " " : "0";
          if (format3 = formats2[c6])
            c6 = format3(date2, pad3);
          string.push(c6);
          j5 = i3 + 1;
        }
      }
      string.push(specifier.slice(j5, i3));
      return string.join("");
    };
  }
  function newParse(specifier, Z6) {
    return function(string) {
      var d2 = newDate(1900, void 0, 1), i3 = parseSpecifier(d2, specifier, string += "", 0), week, day;
      if (i3 != string.length)
        return null;
      if ("Q" in d2)
        return new Date(d2.Q);
      if ("s" in d2)
        return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
      if (Z6 && !("Z" in d2))
        d2.Z = 0;
      if ("p" in d2)
        d2.H = d2.H % 12 + d2.p * 12;
      if (d2.m === void 0)
        d2.m = "q" in d2 ? d2.q : 0;
      if ("V" in d2) {
        if (d2.V < 1 || d2.V > 53)
          return null;
        if (!("w" in d2))
          d2.w = 1;
        if ("Z" in d2) {
          week = utcDate(newDate(d2.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d2.V - 1) * 7);
          d2.y = week.getUTCFullYear();
          d2.m = week.getUTCMonth();
          d2.d = week.getUTCDate() + (d2.w + 6) % 7;
        } else {
          week = localDate(newDate(d2.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d2.V - 1) * 7);
          d2.y = week.getFullYear();
          d2.m = week.getMonth();
          d2.d = week.getDate() + (d2.w + 6) % 7;
        }
      } else if ("W" in d2 || "U" in d2) {
        if (!("w" in d2))
          d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
        day = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
        d2.m = 0;
        d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day + 5) % 7 : d2.w + d2.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d2) {
        d2.H += d2.Z / 100 | 0;
        d2.M += d2.Z % 100;
        return utcDate(d2);
      }
      return localDate(d2);
    };
  }
  function parseSpecifier(d2, specifier, string, j5) {
    var i3 = 0, n2 = specifier.length, m2 = string.length, c6, parse2;
    while (i3 < n2) {
      if (j5 >= m2)
        return -1;
      c6 = specifier.charCodeAt(i3++);
      if (c6 === 37) {
        c6 = specifier.charAt(i3++);
        parse2 = parses[c6 in pads ? specifier.charAt(i3++) : c6];
        if (!parse2 || (j5 = parse2(d2, string, j5)) < 0)
          return -1;
      } else if (c6 != string.charCodeAt(j5++)) {
        return -1;
      }
    }
    return j5;
  }
  function parsePeriod(d2, string, i3) {
    var n2 = periodRe.exec(string.slice(i3));
    return n2 ? (d2.p = periodLookup.get(n2[0].toLowerCase()), i3 + n2[0].length) : -1;
  }
  function parseShortWeekday(d2, string, i3) {
    var n2 = shortWeekdayRe.exec(string.slice(i3));
    return n2 ? (d2.w = shortWeekdayLookup.get(n2[0].toLowerCase()), i3 + n2[0].length) : -1;
  }
  function parseWeekday(d2, string, i3) {
    var n2 = weekdayRe.exec(string.slice(i3));
    return n2 ? (d2.w = weekdayLookup.get(n2[0].toLowerCase()), i3 + n2[0].length) : -1;
  }
  function parseShortMonth(d2, string, i3) {
    var n2 = shortMonthRe.exec(string.slice(i3));
    return n2 ? (d2.m = shortMonthLookup.get(n2[0].toLowerCase()), i3 + n2[0].length) : -1;
  }
  function parseMonth(d2, string, i3) {
    var n2 = monthRe.exec(string.slice(i3));
    return n2 ? (d2.m = monthLookup.get(n2[0].toLowerCase()), i3 + n2[0].length) : -1;
  }
  function parseLocaleDateTime(d2, string, i3) {
    return parseSpecifier(d2, locale_dateTime, string, i3);
  }
  function parseLocaleDate(d2, string, i3) {
    return parseSpecifier(d2, locale_date, string, i3);
  }
  function parseLocaleTime(d2, string, i3) {
    return parseSpecifier(d2, locale_time, string, i3);
  }
  function formatShortWeekday(d2) {
    return locale_shortWeekdays[d2.getDay()];
  }
  function formatWeekday(d2) {
    return locale_weekdays[d2.getDay()];
  }
  function formatShortMonth(d2) {
    return locale_shortMonths[d2.getMonth()];
  }
  function formatMonth(d2) {
    return locale_months[d2.getMonth()];
  }
  function formatPeriod(d2) {
    return locale_periods[+(d2.getHours() >= 12)];
  }
  function formatQuarter(d2) {
    return 1 + ~~(d2.getMonth() / 3);
  }
  function formatUTCShortWeekday(d2) {
    return locale_shortWeekdays[d2.getUTCDay()];
  }
  function formatUTCWeekday(d2) {
    return locale_weekdays[d2.getUTCDay()];
  }
  function formatUTCShortMonth(d2) {
    return locale_shortMonths[d2.getUTCMonth()];
  }
  function formatUTCMonth(d2) {
    return locale_months[d2.getUTCMonth()];
  }
  function formatUTCPeriod(d2) {
    return locale_periods[+(d2.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d2) {
    return 1 + ~~(d2.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f3 = newFormat(specifier += "", formats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f3 = newFormat(specifier += "", utcFormats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length3 = string.length;
  return sign2 + (length3 < width ? new Array(width - length3 + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i3) => [name.toLowerCase(), i3]));
}
function parseWeekdayNumberSunday(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 1));
  return n2 ? (d2.w = +n2[0], i3 + n2[0].length) : -1;
}
function parseWeekdayNumberMonday(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 1));
  return n2 ? (d2.u = +n2[0], i3 + n2[0].length) : -1;
}
function parseWeekNumberSunday(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.U = +n2[0], i3 + n2[0].length) : -1;
}
function parseWeekNumberISO(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.V = +n2[0], i3 + n2[0].length) : -1;
}
function parseWeekNumberMonday(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.W = +n2[0], i3 + n2[0].length) : -1;
}
function parseFullYear(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 4));
  return n2 ? (d2.y = +n2[0], i3 + n2[0].length) : -1;
}
function parseYear(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.y = +n2[0] + (+n2[0] > 68 ? 1900 : 2e3), i3 + n2[0].length) : -1;
}
function parseZone(d2, string, i3) {
  var n2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i3, i3 + 6));
  return n2 ? (d2.Z = n2[1] ? 0 : -(n2[2] + (n2[3] || "00")), i3 + n2[0].length) : -1;
}
function parseQuarter(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 1));
  return n2 ? (d2.q = n2[0] * 3 - 3, i3 + n2[0].length) : -1;
}
function parseMonthNumber(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.m = n2[0] - 1, i3 + n2[0].length) : -1;
}
function parseDayOfMonth(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.d = +n2[0], i3 + n2[0].length) : -1;
}
function parseDayOfYear(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 3));
  return n2 ? (d2.m = 0, d2.d = +n2[0], i3 + n2[0].length) : -1;
}
function parseHour24(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.H = +n2[0], i3 + n2[0].length) : -1;
}
function parseMinutes(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.M = +n2[0], i3 + n2[0].length) : -1;
}
function parseSeconds(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 2));
  return n2 ? (d2.S = +n2[0], i3 + n2[0].length) : -1;
}
function parseMilliseconds(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 3));
  return n2 ? (d2.L = +n2[0], i3 + n2[0].length) : -1;
}
function parseMicroseconds(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3, i3 + 6));
  return n2 ? (d2.L = Math.floor(n2[0] / 1e3), i3 + n2[0].length) : -1;
}
function parseLiteralPercent(d2, string, i3) {
  var n2 = percentRe.exec(string.slice(i3, i3 + 1));
  return n2 ? i3 + n2[0].length : -1;
}
function parseUnixTimestamp(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3));
  return n2 ? (d2.Q = +n2[0], i3 + n2[0].length) : -1;
}
function parseUnixTimestampSeconds(d2, string, i3) {
  var n2 = numberRe.exec(string.slice(i3));
  return n2 ? (d2.s = +n2[0], i3 + n2[0].length) : -1;
}
function formatDayOfMonth(d2, p2) {
  return pad(d2.getDate(), p2, 2);
}
function formatHour24(d2, p2) {
  return pad(d2.getHours(), p2, 2);
}
function formatHour12(d2, p2) {
  return pad(d2.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d2, p2) {
  return pad(1 + timeDay.count(timeYear(d2), d2), p2, 3);
}
function formatMilliseconds(d2, p2) {
  return pad(d2.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d2, p2) {
  return formatMilliseconds(d2, p2) + "000";
}
function formatMonthNumber(d2, p2) {
  return pad(d2.getMonth() + 1, p2, 2);
}
function formatMinutes(d2, p2) {
  return pad(d2.getMinutes(), p2, 2);
}
function formatSeconds(d2, p2) {
  return pad(d2.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d2) {
  var day = d2.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d2, p2) {
  return pad(timeSunday.count(timeYear(d2) - 1, d2), p2, 2);
}
function dISO(d2) {
  var day = d2.getDay();
  return day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
}
function formatWeekNumberISO(d2, p2) {
  d2 = dISO(d2);
  return pad(timeThursday.count(timeYear(d2), d2) + (timeYear(d2).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d2) {
  return d2.getDay();
}
function formatWeekNumberMonday(d2, p2) {
  return pad(timeMonday.count(timeYear(d2) - 1, d2), p2, 2);
}
function formatYear(d2, p2) {
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatYearISO(d2, p2) {
  d2 = dISO(d2);
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatFullYear(d2, p2) {
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d2, p2) {
  var day = d2.getDay();
  d2 = day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatZone(d2) {
  var z4 = d2.getTimezoneOffset();
  return (z4 > 0 ? "-" : (z4 *= -1, "+")) + pad(z4 / 60 | 0, "0", 2) + pad(z4 % 60, "0", 2);
}
function formatUTCDayOfMonth(d2, p2) {
  return pad(d2.getUTCDate(), p2, 2);
}
function formatUTCHour24(d2, p2) {
  return pad(d2.getUTCHours(), p2, 2);
}
function formatUTCHour12(d2, p2) {
  return pad(d2.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d2, p2) {
  return pad(1 + utcDay.count(utcYear(d2), d2), p2, 3);
}
function formatUTCMilliseconds(d2, p2) {
  return pad(d2.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d2, p2) {
  return formatUTCMilliseconds(d2, p2) + "000";
}
function formatUTCMonthNumber(d2, p2) {
  return pad(d2.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d2, p2) {
  return pad(d2.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d2, p2) {
  return pad(d2.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d2) {
  var dow = d2.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d2, p2) {
  return pad(utcSunday.count(utcYear(d2) - 1, d2), p2, 2);
}
function UTCdISO(d2) {
  var day = d2.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
}
function formatUTCWeekNumberISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(utcThursday.count(utcYear(d2), d2) + (utcYear(d2).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d2) {
  return d2.getUTCDay();
}
function formatUTCWeekNumberMonday(d2, p2) {
  return pad(utcMonday.count(utcYear(d2) - 1, d2), p2, 2);
}
function formatUTCYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d2, p2) {
  var day = d2.getUTCDay();
  d2 = day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d2) {
  return +d2;
}
function formatUnixTimestampSeconds(d2) {
  return Math.floor(+d2 / 1e3);
}
var pads, numberRe, percentRe, requoteRe;
var init_locale2 = __esm({
  "node_modules/d3-time-format/src/locale.js"() {
    init_src6();
    pads = { "-": "", "_": " ", "0": "0" };
    numberRe = /^\s*\d+/;
    percentRe = /^%/;
    requoteRe = /[\\^$*+?|[\]().{}]/g;
  }
});

// node_modules/d3-time-format/src/defaultLocale.js
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}
var locale2, timeFormat, timeParse, utcFormat, utcParse;
var init_defaultLocale2 = __esm({
  "node_modules/d3-time-format/src/defaultLocale.js"() {
    init_locale2();
    defaultLocale2({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// node_modules/d3-time-format/src/index.js
var init_src7 = __esm({
  "node_modules/d3-time-format/src/index.js"() {
    init_defaultLocale2();
  }
});

// node_modules/d3-scale/src/time.js
function date(t) {
  return new Date(t);
}
function number3(t) {
  return t instanceof Date ? +t : +new Date(+t);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear3 = format3("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear3)(date2);
  }
  scale.invert = function(y4) {
    return new Date(invert(y4));
  };
  scale.domain = function(_3) {
    return arguments.length ? domain(Array.from(_3, number3)) : domain().map(date);
  };
  scale.ticks = function(interval2) {
    var d2 = domain();
    return ticks2(d2[0], d2[d2.length - 1], interval2 == null ? 10 : interval2);
  };
  scale.tickFormat = function(count3, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale.nice = function(interval2) {
    var d2 = domain();
    if (!interval2 || typeof interval2.range !== "function")
      interval2 = tickInterval(d2[0], d2[d2.length - 1], interval2 == null ? 10 : interval2);
    return interval2 ? domain(nice2(d2, interval2)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}
var init_time = __esm({
  "node_modules/d3-scale/src/time.js"() {
    init_src6();
    init_src7();
    init_continuous();
    init_init();
    init_nice2();
  }
});

// node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}
var init_utcTime = __esm({
  "node_modules/d3-scale/src/utcTime.js"() {
    init_src6();
    init_src7();
    init_time();
    init_init();
  }
});

// node_modules/d3-scale/src/sequential.js
function transformer2() {
  var x0 = 0, x1 = 1, t02, t12, k10, transform2, interpolator = identity3, clamp = false, unknown;
  function scale(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : interpolator(k10 === 0 ? 0.5 : (x5 = (transform2(x5) - t02) * k10, clamp ? Math.max(0, Math.min(1, x5)) : x5));
  }
  scale.domain = function(_3) {
    return arguments.length ? ([x0, x1] = _3, t02 = transform2(x0 = +x0), t12 = transform2(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [x0, x1];
  };
  scale.clamp = function(_3) {
    return arguments.length ? (clamp = !!_3, scale) : clamp;
  };
  scale.interpolator = function(_3) {
    return arguments.length ? (interpolator = _3, scale) : interpolator;
  };
  function range2(interpolate) {
    return function(_3) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _3, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }
  scale.range = range2(value_default);
  scale.rangeRound = range2(round_default);
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  return function(t) {
    transform2 = t, t02 = t(x0), t12 = t(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
    return scale;
  };
}
function copy2(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale = linearish(transformer2()(identity3));
  scale.copy = function() {
    return copy2(scale, sequential());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialLog() {
  var scale = loggish(transformer2()).domain([1, 10]);
  scale.copy = function() {
    return copy2(scale, sequentialLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialSymlog() {
  var scale = symlogish(transformer2());
  scale.copy = function() {
    return copy2(scale, sequentialSymlog()).constant(scale.constant());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialPow() {
  var scale = powish(transformer2());
  scale.copy = function() {
    return copy2(scale, sequentialPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
var init_sequential = __esm({
  "node_modules/d3-scale/src/sequential.js"() {
    init_src4();
    init_continuous();
    init_init();
    init_linear();
    init_log();
    init_symlog();
    init_pow();
  }
});

// node_modules/d3-scale/src/sequentialQuantile.js
function sequentialQuantile() {
  var domain = [], interpolator = identity3;
  function scale(x5) {
    if (x5 != null && !isNaN(x5 = +x5))
      return interpolator((bisect_default(domain, x5, 1) - 1) / (domain.length - 1));
  }
  scale.domain = function(_3) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (let d2 of _3)
      if (d2 != null && !isNaN(d2 = +d2))
        domain.push(d2);
    domain.sort(ascending);
    return scale;
  };
  scale.interpolator = function(_3) {
    return arguments.length ? (interpolator = _3, scale) : interpolator;
  };
  scale.range = function() {
    return domain.map((d2, i3) => interpolator(i3 / (domain.length - 1)));
  };
  scale.quantiles = function(n2) {
    return Array.from({ length: n2 + 1 }, (_3, i3) => quantile(domain, i3 / n2));
  };
  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };
  return initInterpolator.apply(scale, arguments);
}
var init_sequentialQuantile = __esm({
  "node_modules/d3-scale/src/sequentialQuantile.js"() {
    init_src2();
    init_continuous();
    init_init();
  }
});

// node_modules/d3-scale/src/diverging.js
function transformer3() {
  var x0 = 0, x1 = 0.5, x22 = 1, s2 = 1, t02, t12, t2, k10, k21, interpolator = identity3, transform2, clamp = false, unknown;
  function scale(x5) {
    return isNaN(x5 = +x5) ? unknown : (x5 = 0.5 + ((x5 = +transform2(x5)) - t12) * (s2 * x5 < s2 * t12 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x5)) : x5));
  }
  scale.domain = function(_3) {
    return arguments.length ? ([x0, x1, x22] = _3, t02 = transform2(x0 = +x0), t12 = transform2(x1 = +x1), t2 = transform2(x22 = +x22), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1, scale) : [x0, x1, x22];
  };
  scale.clamp = function(_3) {
    return arguments.length ? (clamp = !!_3, scale) : clamp;
  };
  scale.interpolator = function(_3) {
    return arguments.length ? (interpolator = _3, scale) : interpolator;
  };
  function range2(interpolate) {
    return function(_3) {
      var r0, r1, r2;
      return arguments.length ? ([r0, r1, r2] = _3, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }
  scale.range = range2(value_default);
  scale.rangeRound = range2(round_default);
  scale.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale) : unknown;
  };
  return function(t) {
    transform2 = t, t02 = t(x0), t12 = t(x1), t2 = t(x22), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1;
    return scale;
  };
}
function diverging() {
  var scale = linearish(transformer3()(identity3));
  scale.copy = function() {
    return copy2(scale, diverging());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingLog() {
  var scale = loggish(transformer3()).domain([0.1, 1, 10]);
  scale.copy = function() {
    return copy2(scale, divergingLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingSymlog() {
  var scale = symlogish(transformer3());
  scale.copy = function() {
    return copy2(scale, divergingSymlog()).constant(scale.constant());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingPow() {
  var scale = powish(transformer3());
  scale.copy = function() {
    return copy2(scale, divergingPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
var init_diverging = __esm({
  "node_modules/d3-scale/src/diverging.js"() {
    init_src4();
    init_continuous();
    init_init();
    init_linear();
    init_log();
    init_sequential();
    init_symlog();
    init_pow();
  }
});

// node_modules/d3-scale/src/index.js
var src_exports3 = {};
__export(src_exports3, {
  scaleBand: () => band,
  scaleDiverging: () => diverging,
  scaleDivergingLog: () => divergingLog,
  scaleDivergingPow: () => divergingPow,
  scaleDivergingSqrt: () => divergingSqrt,
  scaleDivergingSymlog: () => divergingSymlog,
  scaleIdentity: () => identity4,
  scaleImplicit: () => implicit,
  scaleLinear: () => linear2,
  scaleLog: () => log,
  scaleOrdinal: () => ordinal,
  scalePoint: () => point,
  scalePow: () => pow,
  scaleQuantile: () => quantile2,
  scaleQuantize: () => quantize,
  scaleRadial: () => radial,
  scaleSequential: () => sequential,
  scaleSequentialLog: () => sequentialLog,
  scaleSequentialPow: () => sequentialPow,
  scaleSequentialQuantile: () => sequentialQuantile,
  scaleSequentialSqrt: () => sequentialSqrt,
  scaleSequentialSymlog: () => sequentialSymlog,
  scaleSqrt: () => sqrt,
  scaleSymlog: () => symlog,
  scaleThreshold: () => threshold,
  scaleTime: () => time,
  scaleUtc: () => utcTime,
  tickFormat: () => tickFormat
});
var init_src8 = __esm({
  "node_modules/d3-scale/src/index.js"() {
    init_band();
    init_identity3();
    init_linear();
    init_log();
    init_symlog();
    init_ordinal();
    init_pow();
    init_radial();
    init_quantile2();
    init_quantize();
    init_threshold();
    init_time();
    init_utcTime();
    init_sequential();
    init_sequentialQuantile();
    init_diverging();
    init_tickFormat();
  }
});

// node_modules/d3-random/src/defaultSource.js
var defaultSource_default;
var init_defaultSource = __esm({
  "node_modules/d3-random/src/defaultSource.js"() {
    defaultSource_default = Math.random;
  }
});

// node_modules/d3-random/src/uniform.js
var uniform_default;
var init_uniform = __esm({
  "node_modules/d3-random/src/uniform.js"() {
    init_defaultSource();
    uniform_default = function sourceRandomUniform(source) {
      function randomUniform(min4, max5) {
        min4 = min4 == null ? 0 : +min4;
        max5 = max5 == null ? 1 : +max5;
        if (arguments.length === 1)
          max5 = min4, min4 = 0;
        else
          max5 -= min4;
        return function() {
          return source() * max5 + min4;
        };
      }
      randomUniform.source = sourceRandomUniform;
      return randomUniform;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/int.js
var int_default;
var init_int = __esm({
  "node_modules/d3-random/src/int.js"() {
    init_defaultSource();
    int_default = function sourceRandomInt(source) {
      function randomInt(min4, max5) {
        if (arguments.length < 2)
          max5 = min4, min4 = 0;
        min4 = Math.floor(min4);
        max5 = Math.floor(max5) - min4;
        return function() {
          return Math.floor(source() * max5 + min4);
        };
      }
      randomInt.source = sourceRandomInt;
      return randomInt;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/normal.js
var normal_default;
var init_normal = __esm({
  "node_modules/d3-random/src/normal.js"() {
    init_defaultSource();
    normal_default = function sourceRandomNormal(source) {
      function randomNormal(mu, sigma) {
        var x5, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
          var y4;
          if (x5 != null)
            y4 = x5, x5 = null;
          else
            do {
              x5 = source() * 2 - 1;
              y4 = source() * 2 - 1;
              r = x5 * x5 + y4 * y4;
            } while (!r || r > 1);
          return mu + sigma * y4 * Math.sqrt(-2 * Math.log(r) / r);
        };
      }
      randomNormal.source = sourceRandomNormal;
      return randomNormal;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/logNormal.js
var logNormal_default;
var init_logNormal = __esm({
  "node_modules/d3-random/src/logNormal.js"() {
    init_defaultSource();
    init_normal();
    logNormal_default = function sourceRandomLogNormal(source) {
      var N6 = normal_default.source(source);
      function randomLogNormal() {
        var randomNormal = N6.apply(this, arguments);
        return function() {
          return Math.exp(randomNormal());
        };
      }
      randomLogNormal.source = sourceRandomLogNormal;
      return randomLogNormal;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/irwinHall.js
var irwinHall_default;
var init_irwinHall = __esm({
  "node_modules/d3-random/src/irwinHall.js"() {
    init_defaultSource();
    irwinHall_default = function sourceRandomIrwinHall(source) {
      function randomIrwinHall(n2) {
        if ((n2 = +n2) <= 0)
          return () => 0;
        return function() {
          for (var sum3 = 0, i3 = n2; i3 > 1; --i3)
            sum3 += source();
          return sum3 + i3 * source();
        };
      }
      randomIrwinHall.source = sourceRandomIrwinHall;
      return randomIrwinHall;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/bates.js
var bates_default;
var init_bates = __esm({
  "node_modules/d3-random/src/bates.js"() {
    init_defaultSource();
    init_irwinHall();
    bates_default = function sourceRandomBates(source) {
      var I4 = irwinHall_default.source(source);
      function randomBates(n2) {
        if ((n2 = +n2) === 0)
          return source;
        var randomIrwinHall = I4(n2);
        return function() {
          return randomIrwinHall() / n2;
        };
      }
      randomBates.source = sourceRandomBates;
      return randomBates;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/exponential.js
var exponential_default;
var init_exponential = __esm({
  "node_modules/d3-random/src/exponential.js"() {
    init_defaultSource();
    exponential_default = function sourceRandomExponential(source) {
      function randomExponential(lambda) {
        return function() {
          return -Math.log1p(-source()) / lambda;
        };
      }
      randomExponential.source = sourceRandomExponential;
      return randomExponential;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/pareto.js
var pareto_default;
var init_pareto = __esm({
  "node_modules/d3-random/src/pareto.js"() {
    init_defaultSource();
    pareto_default = function sourceRandomPareto(source) {
      function randomPareto(alpha) {
        if ((alpha = +alpha) < 0)
          throw new RangeError("invalid alpha");
        alpha = 1 / -alpha;
        return function() {
          return Math.pow(1 - source(), alpha);
        };
      }
      randomPareto.source = sourceRandomPareto;
      return randomPareto;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/bernoulli.js
var bernoulli_default;
var init_bernoulli = __esm({
  "node_modules/d3-random/src/bernoulli.js"() {
    init_defaultSource();
    bernoulli_default = function sourceRandomBernoulli(source) {
      function randomBernoulli(p2) {
        if ((p2 = +p2) < 0 || p2 > 1)
          throw new RangeError("invalid p");
        return function() {
          return Math.floor(source() + p2);
        };
      }
      randomBernoulli.source = sourceRandomBernoulli;
      return randomBernoulli;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/geometric.js
var geometric_default;
var init_geometric = __esm({
  "node_modules/d3-random/src/geometric.js"() {
    init_defaultSource();
    geometric_default = function sourceRandomGeometric(source) {
      function randomGeometric(p2) {
        if ((p2 = +p2) < 0 || p2 > 1)
          throw new RangeError("invalid p");
        if (p2 === 0)
          return () => Infinity;
        if (p2 === 1)
          return () => 1;
        p2 = Math.log1p(-p2);
        return function() {
          return 1 + Math.floor(Math.log1p(-source()) / p2);
        };
      }
      randomGeometric.source = sourceRandomGeometric;
      return randomGeometric;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/gamma.js
var gamma_default;
var init_gamma = __esm({
  "node_modules/d3-random/src/gamma.js"() {
    init_defaultSource();
    init_normal();
    gamma_default = function sourceRandomGamma(source) {
      var randomNormal = normal_default.source(source)();
      function randomGamma(k4, theta) {
        if ((k4 = +k4) < 0)
          throw new RangeError("invalid k");
        if (k4 === 0)
          return () => 0;
        theta = theta == null ? 1 : +theta;
        if (k4 === 1)
          return () => -Math.log1p(-source()) * theta;
        var d2 = (k4 < 1 ? k4 + 1 : k4) - 1 / 3, c6 = 1 / (3 * Math.sqrt(d2)), multiplier = k4 < 1 ? () => Math.pow(source(), 1 / k4) : () => 1;
        return function() {
          do {
            do {
              var x5 = randomNormal(), v2 = 1 + c6 * x5;
            } while (v2 <= 0);
            v2 *= v2 * v2;
            var u = 1 - source();
          } while (u >= 1 - 0.0331 * x5 * x5 * x5 * x5 && Math.log(u) >= 0.5 * x5 * x5 + d2 * (1 - v2 + Math.log(v2)));
          return d2 * v2 * multiplier() * theta;
        };
      }
      randomGamma.source = sourceRandomGamma;
      return randomGamma;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/beta.js
var beta_default;
var init_beta = __esm({
  "node_modules/d3-random/src/beta.js"() {
    init_defaultSource();
    init_gamma();
    beta_default = function sourceRandomBeta(source) {
      var G4 = gamma_default.source(source);
      function randomBeta(alpha, beta) {
        var X6 = G4(alpha), Y6 = G4(beta);
        return function() {
          var x5 = X6();
          return x5 === 0 ? 0 : x5 / (x5 + Y6());
        };
      }
      randomBeta.source = sourceRandomBeta;
      return randomBeta;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/binomial.js
var binomial_default;
var init_binomial = __esm({
  "node_modules/d3-random/src/binomial.js"() {
    init_defaultSource();
    init_beta();
    init_geometric();
    binomial_default = function sourceRandomBinomial(source) {
      var G4 = geometric_default.source(source), B8 = beta_default.source(source);
      function randomBinomial(n2, p2) {
        n2 = +n2;
        if ((p2 = +p2) >= 1)
          return () => n2;
        if (p2 <= 0)
          return () => 0;
        return function() {
          var acc = 0, nn2 = n2, pp = p2;
          while (nn2 * pp > 16 && nn2 * (1 - pp) > 16) {
            var i3 = Math.floor((nn2 + 1) * pp), y4 = B8(i3, nn2 - i3 + 1)();
            if (y4 <= pp) {
              acc += i3;
              nn2 -= i3;
              pp = (pp - y4) / (1 - y4);
            } else {
              nn2 = i3 - 1;
              pp /= y4;
            }
          }
          var sign2 = pp < 0.5, pFinal = sign2 ? pp : 1 - pp, g2 = G4(pFinal);
          for (var s2 = g2(), k4 = 0; s2 <= nn2; ++k4)
            s2 += g2();
          return acc + (sign2 ? k4 : nn2 - k4);
        };
      }
      randomBinomial.source = sourceRandomBinomial;
      return randomBinomial;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/weibull.js
var weibull_default;
var init_weibull = __esm({
  "node_modules/d3-random/src/weibull.js"() {
    init_defaultSource();
    weibull_default = function sourceRandomWeibull(source) {
      function randomWeibull(k4, a4, b4) {
        var outerFunc;
        if ((k4 = +k4) === 0) {
          outerFunc = (x5) => -Math.log(x5);
        } else {
          k4 = 1 / k4;
          outerFunc = (x5) => Math.pow(x5, k4);
        }
        a4 = a4 == null ? 0 : +a4;
        b4 = b4 == null ? 1 : +b4;
        return function() {
          return a4 + b4 * outerFunc(-Math.log1p(-source()));
        };
      }
      randomWeibull.source = sourceRandomWeibull;
      return randomWeibull;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/cauchy.js
var cauchy_default;
var init_cauchy = __esm({
  "node_modules/d3-random/src/cauchy.js"() {
    init_defaultSource();
    cauchy_default = function sourceRandomCauchy(source) {
      function randomCauchy(a4, b4) {
        a4 = a4 == null ? 0 : +a4;
        b4 = b4 == null ? 1 : +b4;
        return function() {
          return a4 + b4 * Math.tan(Math.PI * source());
        };
      }
      randomCauchy.source = sourceRandomCauchy;
      return randomCauchy;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/logistic.js
var logistic_default;
var init_logistic = __esm({
  "node_modules/d3-random/src/logistic.js"() {
    init_defaultSource();
    logistic_default = function sourceRandomLogistic(source) {
      function randomLogistic(a4, b4) {
        a4 = a4 == null ? 0 : +a4;
        b4 = b4 == null ? 1 : +b4;
        return function() {
          var u = source();
          return a4 + b4 * Math.log(u / (1 - u));
        };
      }
      randomLogistic.source = sourceRandomLogistic;
      return randomLogistic;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/poisson.js
var poisson_default;
var init_poisson = __esm({
  "node_modules/d3-random/src/poisson.js"() {
    init_defaultSource();
    init_binomial();
    init_gamma();
    poisson_default = function sourceRandomPoisson(source) {
      var G4 = gamma_default.source(source), B8 = binomial_default.source(source);
      function randomPoisson(lambda) {
        return function() {
          var acc = 0, l = lambda;
          while (l > 16) {
            var n2 = Math.floor(0.875 * l), t = G4(n2)();
            if (t > l)
              return acc + B8(n2 - 1, l / t)();
            acc += n2;
            l -= t;
          }
          for (var s2 = -Math.log1p(-source()), k4 = 0; s2 <= l; ++k4)
            s2 -= Math.log1p(-source());
          return acc + k4;
        };
      }
      randomPoisson.source = sourceRandomPoisson;
      return randomPoisson;
    }(defaultSource_default);
  }
});

// node_modules/d3-random/src/lcg.js
function lcg(seed = Math.random()) {
  let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
  return () => (state = mul * state + inc | 0, eps * (state >>> 0));
}
var mul, inc, eps;
var init_lcg = __esm({
  "node_modules/d3-random/src/lcg.js"() {
    mul = 1664525;
    inc = 1013904223;
    eps = 1 / 4294967296;
  }
});

// node_modules/d3-random/src/index.js
var src_exports4 = {};
__export(src_exports4, {
  randomBates: () => bates_default,
  randomBernoulli: () => bernoulli_default,
  randomBeta: () => beta_default,
  randomBinomial: () => binomial_default,
  randomCauchy: () => cauchy_default,
  randomExponential: () => exponential_default,
  randomGamma: () => gamma_default,
  randomGeometric: () => geometric_default,
  randomInt: () => int_default,
  randomIrwinHall: () => irwinHall_default,
  randomLcg: () => lcg,
  randomLogNormal: () => logNormal_default,
  randomLogistic: () => logistic_default,
  randomNormal: () => normal_default,
  randomPareto: () => pareto_default,
  randomPoisson: () => poisson_default,
  randomUniform: () => uniform_default,
  randomWeibull: () => weibull_default
});
var init_src9 = __esm({
  "node_modules/d3-random/src/index.js"() {
    init_uniform();
    init_int();
    init_normal();
    init_logNormal();
    init_bates();
    init_irwinHall();
    init_exponential();
    init_pareto();
    init_bernoulli();
    init_geometric();
    init_binomial();
    init_gamma();
    init_beta();
    init_weibull();
    init_cauchy();
    init_logistic();
    init_poisson();
    init_lcg();
  }
});

// node_modules/d3-fetch/src/blob.js
function responseBlob(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.blob();
}
function blob_default(input, init2) {
  return fetch(input, init2).then(responseBlob);
}
var init_blob = __esm({
  "node_modules/d3-fetch/src/blob.js"() {
  }
});

// node_modules/d3-fetch/src/buffer.js
function responseArrayBuffer(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}
function buffer_default(input, init2) {
  return fetch(input, init2).then(responseArrayBuffer);
}
var init_buffer = __esm({
  "node_modules/d3-fetch/src/buffer.js"() {
  }
});

// node_modules/d3-dsv/src/dsv.js
function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i3) {
    return JSON.stringify(name) + ": d[" + i3 + '] || ""';
  }).join(",") + "}");
}
function customConverter(columns, f3) {
  var object = objectConverter(columns);
  return function(row, i3) {
    return f3(object(row), i3, columns);
  };
}
function inferColumns(rows) {
  var columnSet = /* @__PURE__ */ Object.create(null), columns = [];
  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}
function pad2(value, width) {
  var s2 = value + "", length3 = s2.length;
  return length3 < width ? new Array(width - length3 + 1).join(0) + s2 : s2;
}
function formatYear2(year) {
  return year < 0 ? "-" + pad2(-year, 6) : year > 9999 ? "+" + pad2(year, 6) : pad2(year, 4);
}
function formatDate(date2) {
  var hours = date2.getUTCHours(), minutes = date2.getUTCMinutes(), seconds2 = date2.getUTCSeconds(), milliseconds2 = date2.getUTCMilliseconds();
  return isNaN(date2) ? "Invalid Date" : formatYear2(date2.getUTCFullYear(), 4) + "-" + pad2(date2.getUTCMonth() + 1, 2) + "-" + pad2(date2.getUTCDate(), 2) + (milliseconds2 ? "T" + pad2(hours, 2) + ":" + pad2(minutes, 2) + ":" + pad2(seconds2, 2) + "." + pad2(milliseconds2, 3) + "Z" : seconds2 ? "T" + pad2(hours, 2) + ":" + pad2(minutes, 2) + ":" + pad2(seconds2, 2) + "Z" : minutes || hours ? "T" + pad2(hours, 2) + ":" + pad2(minutes, 2) + "Z" : "");
}
function dsv_default(delimiter) {
  var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
  function parse2(text, f3) {
    var convert, columns, rows = parseRows(text, function(row, i3) {
      if (convert)
        return convert(row, i3 - 1);
      columns = row, convert = f3 ? customConverter(row, f3) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }
  function parseRows(text, f3) {
    var rows = [], N6 = text.length, I4 = 0, n2 = 0, t, eof = N6 <= 0, eol = false;
    if (text.charCodeAt(N6 - 1) === NEWLINE)
      --N6;
    if (text.charCodeAt(N6 - 1) === RETURN)
      --N6;
    function token() {
      if (eof)
        return EOF;
      if (eol)
        return eol = false, EOL;
      var i3, j5 = I4, c6;
      if (text.charCodeAt(j5) === QUOTE) {
        while (I4++ < N6 && text.charCodeAt(I4) !== QUOTE || text.charCodeAt(++I4) === QUOTE)
          ;
        if ((i3 = I4) >= N6)
          eof = true;
        else if ((c6 = text.charCodeAt(I4++)) === NEWLINE)
          eol = true;
        else if (c6 === RETURN) {
          eol = true;
          if (text.charCodeAt(I4) === NEWLINE)
            ++I4;
        }
        return text.slice(j5 + 1, i3 - 1).replace(/""/g, '"');
      }
      while (I4 < N6) {
        if ((c6 = text.charCodeAt(i3 = I4++)) === NEWLINE)
          eol = true;
        else if (c6 === RETURN) {
          eol = true;
          if (text.charCodeAt(I4) === NEWLINE)
            ++I4;
        } else if (c6 !== DELIMITER)
          continue;
        return text.slice(j5, i3);
      }
      return eof = true, text.slice(j5, N6);
    }
    while ((t = token()) !== EOF) {
      var row = [];
      while (t !== EOL && t !== EOF)
        row.push(t), t = token();
      if (f3 && (row = f3(row, n2++)) == null)
        continue;
      rows.push(row);
    }
    return rows;
  }
  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }
  function format3(rows, columns) {
    if (columns == null)
      columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }
  function formatBody(rows, columns) {
    if (columns == null)
      columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }
  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }
  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }
  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
  }
  return {
    parse: parse2,
    parseRows,
    format: format3,
    formatBody,
    formatRows,
    formatRow,
    formatValue
  };
}
var EOL, EOF, QUOTE, NEWLINE, RETURN;
var init_dsv = __esm({
  "node_modules/d3-dsv/src/dsv.js"() {
    EOL = {};
    EOF = {};
    QUOTE = 34;
    NEWLINE = 10;
    RETURN = 13;
  }
});

// node_modules/d3-dsv/src/csv.js
var csv, csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue;
var init_csv = __esm({
  "node_modules/d3-dsv/src/csv.js"() {
    init_dsv();
    csv = dsv_default(",");
    csvParse = csv.parse;
    csvParseRows = csv.parseRows;
    csvFormat = csv.format;
    csvFormatBody = csv.formatBody;
    csvFormatRows = csv.formatRows;
    csvFormatRow = csv.formatRow;
    csvFormatValue = csv.formatValue;
  }
});

// node_modules/d3-dsv/src/tsv.js
var tsv, tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue;
var init_tsv = __esm({
  "node_modules/d3-dsv/src/tsv.js"() {
    init_dsv();
    tsv = dsv_default("	");
    tsvParse = tsv.parse;
    tsvParseRows = tsv.parseRows;
    tsvFormat = tsv.format;
    tsvFormatBody = tsv.formatBody;
    tsvFormatRows = tsv.formatRows;
    tsvFormatRow = tsv.formatRow;
    tsvFormatValue = tsv.formatValue;
  }
});

// node_modules/d3-dsv/src/index.js
var init_src10 = __esm({
  "node_modules/d3-dsv/src/index.js"() {
    init_dsv();
    init_csv();
    init_tsv();
  }
});

// node_modules/d3-fetch/src/text.js
function responseText(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.text();
}
function text_default(input, init2) {
  return fetch(input, init2).then(responseText);
}
var init_text = __esm({
  "node_modules/d3-fetch/src/text.js"() {
  }
});

// node_modules/d3-fetch/src/dsv.js
function dsvParse(parse2) {
  return function(input, init2, row) {
    if (arguments.length === 2 && typeof init2 === "function")
      row = init2, init2 = void 0;
    return text_default(input, init2).then(function(response) {
      return parse2(response, row);
    });
  };
}
function dsv(delimiter, input, init2, row) {
  if (arguments.length === 3 && typeof init2 === "function")
    row = init2, init2 = void 0;
  var format3 = dsv_default(delimiter);
  return text_default(input, init2).then(function(response) {
    return format3.parse(response, row);
  });
}
var csv2, tsv2;
var init_dsv2 = __esm({
  "node_modules/d3-fetch/src/dsv.js"() {
    init_src10();
    init_text();
    csv2 = dsvParse(csvParse);
    tsv2 = dsvParse(tsvParse);
  }
});

// node_modules/d3-fetch/src/image.js
function image_default(input, init2) {
  return new Promise(function(resolve, reject) {
    var image = new Image();
    for (var key in init2)
      image[key] = init2[key];
    image.onerror = reject;
    image.onload = function() {
      resolve(image);
    };
    image.src = input;
  });
}
var init_image = __esm({
  "node_modules/d3-fetch/src/image.js"() {
  }
});

// node_modules/d3-fetch/src/json.js
function responseJson(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  if (response.status === 204 || response.status === 205)
    return;
  return response.json();
}
function json_default(input, init2) {
  return fetch(input, init2).then(responseJson);
}
var init_json = __esm({
  "node_modules/d3-fetch/src/json.js"() {
  }
});

// node_modules/d3-fetch/src/xml.js
function parser(type2) {
  return (input, init2) => text_default(input, init2).then((text) => new DOMParser().parseFromString(text, type2));
}
var xml_default, html, svg;
var init_xml = __esm({
  "node_modules/d3-fetch/src/xml.js"() {
    init_text();
    xml_default = parser("application/xml");
    html = parser("text/html");
    svg = parser("image/svg+xml");
  }
});

// node_modules/d3-fetch/src/index.js
var src_exports5 = {};
__export(src_exports5, {
  blob: () => blob_default,
  buffer: () => buffer_default,
  csv: () => csv2,
  dsv: () => dsv,
  html: () => html,
  image: () => image_default,
  json: () => json_default,
  svg: () => svg,
  text: () => text_default,
  tsv: () => tsv2,
  xml: () => xml_default
});
var init_src11 = __esm({
  "node_modules/d3-fetch/src/index.js"() {
    init_blob();
    init_buffer();
    init_dsv2();
    init_image();
    init_json();
    init_text();
    init_xml();
  }
});

// node_modules/d3-path/src/path.js
function append(strings) {
  this._ += strings[0];
  for (let i3 = 1, n2 = strings.length; i3 < n2; ++i3) {
    this._ += arguments[i3] + strings[i3];
  }
}
function appendRound(digits) {
  let d2 = Math.floor(digits);
  if (!(d2 >= 0))
    throw new Error(`invalid digits: ${digits}`);
  if (d2 > 15)
    return append;
  const k4 = 10 ** d2;
  return function(strings) {
    this._ += strings[0];
    for (let i3 = 1, n2 = strings.length; i3 < n2; ++i3) {
      this._ += Math.round(arguments[i3] * k4) / k4 + strings[i3];
    }
  };
}
function path() {
  return new Path();
}
function pathRound(digits = 3) {
  return new Path(+digits);
}
var pi, tau, epsilon, tauEpsilon, Path;
var init_path = __esm({
  "node_modules/d3-path/src/path.js"() {
    pi = Math.PI;
    tau = 2 * pi;
    epsilon = 1e-6;
    tauEpsilon = tau - epsilon;
    Path = class {
      constructor(digits) {
        this._x0 = this._y0 = this._x1 = this._y1 = null;
        this._ = "";
        this._append = digits == null ? append : appendRound(digits);
      }
      moveTo(x5, y4) {
        this._append`M${this._x0 = this._x1 = +x5},${this._y0 = this._y1 = +y4}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._append`Z`;
        }
      }
      lineTo(x5, y4) {
        this._append`L${this._x1 = +x5},${this._y1 = +y4}`;
      }
      quadraticCurveTo(x1, y1, x5, y4) {
        this._append`Q${+x1},${+y1},${this._x1 = +x5},${this._y1 = +y4}`;
      }
      bezierCurveTo(x1, y1, x22, y22, x5, y4) {
        this._append`C${+x1},${+y1},${+x22},${+y22},${this._x1 = +x5},${this._y1 = +y4}`;
      }
      arcTo(x1, y1, x22, y22, r) {
        x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r = +r;
        if (r < 0)
          throw new Error(`negative radius: ${r}`);
        let x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (this._x1 === null) {
          this._append`M${this._x1 = x1},${this._y1 = y1}`;
        } else if (!(l01_2 > epsilon))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._append`L${this._x1 = x1},${this._y1 = y1}`;
        } else {
          let x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon) {
            this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
          }
          this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
        }
      }
      arc(x5, y4, r, a0, a1, ccw) {
        x5 = +x5, y4 = +y4, r = +r, ccw = !!ccw;
        if (r < 0)
          throw new Error(`negative radius: ${r}`);
        let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x5 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
        if (this._x1 === null) {
          this._append`M${x0},${y0}`;
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._append`L${x0},${y0}`;
        }
        if (!r)
          return;
        if (da2 < 0)
          da2 = da2 % tau + tau;
        if (da2 > tauEpsilon) {
          this._append`A${r},${r},0,1,${cw},${x5 - dx},${y4 - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
        } else if (da2 > epsilon) {
          this._append`A${r},${r},0,${+(da2 >= pi)},${cw},${this._x1 = x5 + r * Math.cos(a1)},${this._y1 = y4 + r * Math.sin(a1)}`;
        }
      }
      rect(x5, y4, w3, h2) {
        this._append`M${this._x0 = this._x1 = +x5},${this._y0 = this._y1 = +y4}h${w3 = +w3}v${+h2}h${-w3}Z`;
      }
      toString() {
        return this._;
      }
    };
    path.prototype = Path.prototype;
  }
});

// node_modules/d3-path/src/index.js
var src_exports6 = {};
__export(src_exports6, {
  Path: () => Path,
  path: () => path,
  pathRound: () => pathRound
});
var init_src12 = __esm({
  "node_modules/d3-path/src/index.js"() {
    init_path();
  }
});

// node_modules/d3-selection/src/namespaces.js
var xhtml, namespaces_default;
var init_namespaces = __esm({
  "node_modules/d3-selection/src/namespaces.js"() {
    xhtml = "http://www.w3.org/1999/xhtml";
    namespaces_default = {
      svg: "http://www.w3.org/2000/svg",
      xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
  }
});

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix2 = name += "", i3 = prefix2.indexOf(":");
  if (i3 >= 0 && (prefix2 = name.slice(0, i3)) !== "xmlns")
    name = name.slice(i3 + 1);
  return namespaces_default.hasOwnProperty(prefix2) ? { space: namespaces_default[prefix2], local: name } : name;
}
var init_namespace = __esm({
  "node_modules/d3-selection/src/namespace.js"() {
    init_namespaces();
  }
});

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
var init_creator = __esm({
  "node_modules/d3-selection/src/creator.js"() {
    init_namespace();
    init_namespaces();
  }
});

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}
var init_selector = __esm({
  "node_modules/d3-selection/src/selector.js"() {
  }
});

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, subgroup = subgroups[j5] = new Array(n2), node, subnode, i3 = 0; i3 < n2; ++i3) {
      if ((node = group2[i3]) && (subnode = select.call(node, node.__data__, i3, group2))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i3] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_select = __esm({
  "node_modules/d3-selection/src/selection/select.js"() {
    init_selection();
    init_selector();
  }
});

// node_modules/d3-selection/src/array.js
function array2(x5) {
  return x5 == null ? [] : Array.isArray(x5) ? x5 : Array.from(x5);
}
var init_array3 = __esm({
  "node_modules/d3-selection/src/array.js"() {
  }
});

// node_modules/d3-selection/src/selectorAll.js
function empty2() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty2 : function() {
    return this.querySelectorAll(selector);
  };
}
var init_selectorAll = __esm({
  "node_modules/d3-selection/src/selectorAll.js"() {
  }
});

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array2(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents = [], j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        subgroups.push(select.call(node, node.__data__, i3, group2));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}
var init_selectAll = __esm({
  "node_modules/d3-selection/src/selection/selectAll.js"() {
    init_selection();
    init_array3();
    init_selectorAll();
  }
});

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}
var init_matcher = __esm({
  "node_modules/d3-selection/src/matcher.js"() {
  }
});

// node_modules/d3-selection/src/selection/selectChild.js
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}
var find;
var init_selectChild = __esm({
  "node_modules/d3-selection/src/selection/selectChild.js"() {
    init_matcher();
    find = Array.prototype.find;
  }
});

// node_modules/d3-selection/src/selection/selectChildren.js
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter2.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}
var filter2;
var init_selectChildren = __esm({
  "node_modules/d3-selection/src/selection/selectChildren.js"() {
    init_matcher();
    filter2 = Array.prototype.filter;
  }
});

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, subgroup = subgroups[j5] = [], node, i3 = 0; i3 < n2; ++i3) {
      if ((node = group2[i3]) && match.call(node, node.__data__, i3, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_filter2 = __esm({
  "node_modules/d3-selection/src/selection/filter.js"() {
    init_selection();
    init_matcher();
  }
});

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}
var init_sparse = __esm({
  "node_modules/d3-selection/src/selection/sparse.js"() {
  }
});

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
var init_enter = __esm({
  "node_modules/d3-selection/src/selection/enter.js"() {
    init_sparse();
    init_selection();
    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
      },
      insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
      },
      querySelector: function(selector) {
        return this._parent.querySelector(selector);
      },
      querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
      }
    };
  }
});

// node_modules/d3-selection/src/constant.js
function constant_default2(x5) {
  return function() {
    return x5;
  };
}
var init_constant4 = __esm({
  "node_modules/d3-selection/src/constant.js"() {
  }
});

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group2, enter, update, exit, data) {
  var i3 = 0, node, groupLength = group2.length, dataLength = data.length;
  for (; i3 < dataLength; ++i3) {
    if (node = group2[i3]) {
      node.__data__ = data[i3];
      update[i3] = node;
    } else {
      enter[i3] = new EnterNode(parent, data[i3]);
    }
  }
  for (; i3 < groupLength; ++i3) {
    if (node = group2[i3]) {
      exit[i3] = node;
    }
  }
}
function bindKey(parent, group2, enter, update, exit, data, key) {
  var i3, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i3 = 0; i3 < groupLength; ++i3) {
    if (node = group2[i3]) {
      keyValues[i3] = keyValue = key.call(node, node.__data__, i3, group2) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i3] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i3 = 0; i3 < dataLength; ++i3) {
    keyValue = key.call(parent, data[i3], i3, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i3] = node;
      node.__data__ = data[i3];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i3] = new EnterNode(parent, data[i3]);
    }
  }
  for (i3 = 0; i3 < groupLength; ++i3) {
    if ((node = group2[i3]) && nodeByKeyValue.get(keyValues[i3]) === node) {
      exit[i3] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups2 = this._groups;
  if (typeof value !== "function")
    value = constant_default2(value);
  for (var m2 = groups2.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    var parent = parents[j5], group2 = groups2[j5], groupLength = group2.length, data = arraylike(value.call(parent, parent && parent.__data__, j5, parents)), dataLength = data.length, enterGroup = enter[j5] = new Array(dataLength), updateGroup = update[j5] = new Array(dataLength), exitGroup = exit[j5] = new Array(groupLength);
    bind(parent, group2, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}
var init_data = __esm({
  "node_modules/d3-selection/src/selection/data.js"() {
    init_selection();
    init_enter();
    init_constant4();
  }
});

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}
var init_exit = __esm({
  "node_modules/d3-selection/src/selection/exit.js"() {
    init_sparse();
    init_selection();
  }
});

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
var init_join = __esm({
  "node_modules/d3-selection/src/selection/join.js"() {
  }
});

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection3 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j5 = 0; j5 < m2; ++j5) {
    for (var group0 = groups0[j5], group1 = groups1[j5], n2 = group0.length, merge2 = merges[j5] = new Array(n2), node, i3 = 0; i3 < n2; ++i3) {
      if (node = group0[i3] || group1[i3]) {
        merge2[i3] = node;
      }
    }
  }
  for (; j5 < m0; ++j5) {
    merges[j5] = groups0[j5];
  }
  return new Selection(merges, this._parents);
}
var init_merge2 = __esm({
  "node_modules/d3-selection/src/selection/merge.js"() {
    init_selection();
  }
});

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups2 = this._groups, j5 = -1, m2 = groups2.length; ++j5 < m2; ) {
    for (var group2 = groups2[j5], i3 = group2.length - 1, next = group2[i3], node; --i3 >= 0; ) {
      if (node = group2[i3]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
var init_order = __esm({
  "node_modules/d3-selection/src/selection/order.js"() {
  }
});

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending2;
  function compareNode(a4, b4) {
    return a4 && b4 ? compare(a4.__data__, b4.__data__) : !a4 - !b4;
  }
  for (var groups2 = this._groups, m2 = groups2.length, sortgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, sortgroup = sortgroups[j5] = new Array(n2), node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        sortgroup[i3] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending2(a4, b4) {
  return a4 < b4 ? -1 : a4 > b4 ? 1 : a4 >= b4 ? 0 : NaN;
}
var init_sort2 = __esm({
  "node_modules/d3-selection/src/selection/sort.js"() {
    init_selection();
  }
});

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
var init_call = __esm({
  "node_modules/d3-selection/src/selection/call.js"() {
  }
});

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}
var init_nodes = __esm({
  "node_modules/d3-selection/src/selection/nodes.js"() {
  }
});

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups2 = this._groups, j5 = 0, m2 = groups2.length; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], i3 = 0, n2 = group2.length; i3 < n2; ++i3) {
      var node = group2[i3];
      if (node)
        return node;
    }
  }
  return null;
}
var init_node = __esm({
  "node_modules/d3-selection/src/selection/node.js"() {
  }
});

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}
var init_size = __esm({
  "node_modules/d3-selection/src/selection/size.js"() {
  }
});

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}
var init_empty = __esm({
  "node_modules/d3-selection/src/selection/empty.js"() {
  }
});

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups2 = this._groups, j5 = 0, m2 = groups2.length; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], i3 = 0, n2 = group2.length, node; i3 < n2; ++i3) {
      if (node = group2[i3])
        callback.call(node, node.__data__, i3, group2);
    }
  }
  return this;
}
var init_each = __esm({
  "node_modules/d3-selection/src/selection/each.js"() {
  }
});

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v2);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v2);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
var init_attr = __esm({
  "node_modules/d3-selection/src/selection/attr.js"() {
    init_namespace();
  }
});

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
var init_window = __esm({
  "node_modules/d3-selection/src/window.js"() {
  }
});

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v2, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}
var init_style = __esm({
  "node_modules/d3-selection/src/selection/style.js"() {
    init_window();
  }
});

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      delete this[name];
    else
      this[name] = v2;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
var init_property = __esm({
  "node_modules/d3-selection/src/selection/property.js"() {
  }
});

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
function classedAdd(node, names) {
  var list = classList(node), i3 = -1, n2 = names.length;
  while (++i3 < n2)
    list.add(names[i3]);
}
function classedRemove(node, names) {
  var list = classList(node), i3 = -1, n2 = names.length;
  while (++i3 < n2)
    list.remove(names[i3]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i3 = -1, n2 = names.length;
    while (++i3 < n2)
      if (!list.contains(names[i3]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
var init_classed = __esm({
  "node_modules/d3-selection/src/selection/classed.js"() {
    ClassList.prototype = {
      add: function(name) {
        var i3 = this._names.indexOf(name);
        if (i3 < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i3 = this._names.indexOf(name);
        if (i3 >= 0) {
          this._names.splice(i3, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };
  }
});

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v2 = value.apply(this, arguments);
    this.textContent = v2 == null ? "" : v2;
  };
}
function text_default2(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
var init_text2 = __esm({
  "node_modules/d3-selection/src/selection/text.js"() {
  }
});

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v2 = value.apply(this, arguments);
    this.innerHTML = v2 == null ? "" : v2;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
var init_html = __esm({
  "node_modules/d3-selection/src/selection/html.js"() {
  }
});

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}
var init_raise = __esm({
  "node_modules/d3-selection/src/selection/raise.js"() {
  }
});

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}
var init_lower = __esm({
  "node_modules/d3-selection/src/selection/lower.js"() {
  }
});

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}
var init_append = __esm({
  "node_modules/d3-selection/src/selection/append.js"() {
    init_creator();
  }
});

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
var init_insert = __esm({
  "node_modules/d3-selection/src/selection/insert.js"() {
    init_creator();
    init_selector();
  }
});

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}
var init_remove = __esm({
  "node_modules/d3-selection/src/selection/remove.js"() {
  }
});

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
var init_clone = __esm({
  "node_modules/d3-selection/src/selection/clone.js"() {
  }
});

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
var init_datum = __esm({
  "node_modules/d3-selection/src/selection/datum.js"() {
  }
});

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event2) {
    listener.call(this, event2, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i3 = t.indexOf(".");
    if (i3 >= 0)
      name = t.slice(i3 + 1), t = t.slice(0, i3);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on2 = this.__on;
    if (!on2)
      return;
    for (var j5 = 0, i3 = -1, m2 = on2.length, o; j5 < m2; ++j5) {
      if (o = on2[j5], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on2[++i3] = o;
      }
    }
    if (++i3)
      on2.length = i3;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on2 = this.__on, o, listener = contextListener(value);
    if (on2)
      for (var j5 = 0, m2 = on2.length; j5 < m2; ++j5) {
        if ((o = on2[j5]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on2)
      this.__on = [o];
    else
      on2.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i3, n2 = typenames.length, t;
  if (arguments.length < 2) {
    var on2 = this.node().__on;
    if (on2)
      for (var j5 = 0, m2 = on2.length, o; j5 < m2; ++j5) {
        for (i3 = 0, o = on2[j5]; i3 < n2; ++i3) {
          if ((t = typenames[i3]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on2 = value ? onAdd : onRemove;
  for (i3 = 0; i3 < n2; ++i3)
    this.each(on2(typenames[i3], value, options));
  return this;
}
var init_on = __esm({
  "node_modules/d3-selection/src/selection/on.js"() {
  }
});

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event2 = window2.CustomEvent;
  if (typeof event2 === "function") {
    event2 = new event2(type2, params);
  } else {
    event2 = window2.document.createEvent("Event");
    if (params)
      event2.initEvent(type2, params.bubbles, params.cancelable), event2.detail = params.detail;
    else
      event2.initEvent(type2, false, false);
  }
  node.dispatchEvent(event2);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}
var init_dispatch = __esm({
  "node_modules/d3-selection/src/selection/dispatch.js"() {
    init_window();
  }
});

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups2 = this._groups, j5 = 0, m2 = groups2.length; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], i3 = 0, n2 = group2.length, node; i3 < n2; ++i3) {
      if (node = group2[i3])
        yield node;
    }
  }
}
var init_iterator = __esm({
  "node_modules/d3-selection/src/selection/iterator.js"() {
  }
});

// node_modules/d3-selection/src/selection/index.js
function Selection(groups2, parents) {
  this._groups = groups2;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
var root, selection_default;
var init_selection = __esm({
  "node_modules/d3-selection/src/selection/index.js"() {
    init_select();
    init_selectAll();
    init_selectChild();
    init_selectChildren();
    init_filter2();
    init_data();
    init_enter();
    init_exit();
    init_join();
    init_merge2();
    init_order();
    init_sort2();
    init_call();
    init_nodes();
    init_node();
    init_size();
    init_empty();
    init_each();
    init_attr();
    init_style();
    init_property();
    init_classed();
    init_text2();
    init_html();
    init_raise();
    init_lower();
    init_append();
    init_insert();
    init_remove();
    init_clone();
    init_datum();
    init_on();
    init_dispatch();
    init_iterator();
    root = [null];
    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: select_default,
      selectAll: selectAll_default,
      selectChild: selectChild_default,
      selectChildren: selectChildren_default,
      filter: filter_default,
      data: data_default,
      enter: enter_default,
      exit: exit_default,
      join: join_default,
      merge: merge_default,
      selection: selection_selection,
      order: order_default,
      sort: sort_default,
      call: call_default,
      nodes: nodes_default,
      node: node_default,
      size: size_default,
      empty: empty_default,
      each: each_default,
      attr: attr_default,
      style: style_default,
      property: property_default,
      classed: classed_default,
      text: text_default2,
      html: html_default,
      raise: raise_default,
      lower: lower_default,
      append: append_default,
      insert: insert_default,
      remove: remove_default,
      clone: clone_default,
      datum: datum_default,
      on: on_default,
      dispatch: dispatch_default,
      [Symbol.iterator]: iterator_default
    };
    selection_default = selection;
  }
});

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}
var init_select2 = __esm({
  "node_modules/d3-selection/src/select.js"() {
    init_selection();
  }
});

// node_modules/d3-selection/src/create.js
function create_default(name) {
  return select_default2(creator_default(name).call(document.documentElement));
}
var init_create = __esm({
  "node_modules/d3-selection/src/create.js"() {
    init_creator();
    init_select2();
  }
});

// node_modules/d3-selection/src/local.js
function local() {
  return new Local();
}
function Local() {
  this._ = "@" + (++nextId).toString(36);
}
var nextId;
var init_local = __esm({
  "node_modules/d3-selection/src/local.js"() {
    nextId = 0;
    Local.prototype = local.prototype = {
      constructor: Local,
      get: function(node) {
        var id2 = this._;
        while (!(id2 in node))
          if (!(node = node.parentNode))
            return;
        return node[id2];
      },
      set: function(node, value) {
        return node[this._] = value;
      },
      remove: function(node) {
        return this._ in node && delete node[this._];
      },
      toString: function() {
        return this._;
      }
    };
  }
});

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event2) {
  let sourceEvent;
  while (sourceEvent = event2.sourceEvent)
    event2 = sourceEvent;
  return event2;
}
var init_sourceEvent = __esm({
  "node_modules/d3-selection/src/sourceEvent.js"() {
  }
});

// node_modules/d3-selection/src/pointer.js
function pointer_default(event2, node) {
  event2 = sourceEvent_default(event2);
  if (node === void 0)
    node = event2.currentTarget;
  if (node) {
    var svg2 = node.ownerSVGElement || node;
    if (svg2.createSVGPoint) {
      var point7 = svg2.createSVGPoint();
      point7.x = event2.clientX, point7.y = event2.clientY;
      point7 = point7.matrixTransform(node.getScreenCTM().inverse());
      return [point7.x, point7.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event2.clientX - rect.left - node.clientLeft, event2.clientY - rect.top - node.clientTop];
    }
  }
  return [event2.pageX, event2.pageY];
}
var init_pointer = __esm({
  "node_modules/d3-selection/src/pointer.js"() {
    init_sourceEvent();
  }
});

// node_modules/d3-selection/src/pointers.js
function pointers_default(events, node) {
  if (events.target) {
    events = sourceEvent_default(events);
    if (node === void 0)
      node = events.currentTarget;
    events = events.touches || [events];
  }
  return Array.from(events, (event2) => pointer_default(event2, node));
}
var init_pointers = __esm({
  "node_modules/d3-selection/src/pointers.js"() {
    init_pointer();
    init_sourceEvent();
  }
});

// node_modules/d3-selection/src/selectAll.js
function selectAll_default2(selector) {
  return typeof selector === "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([array2(selector)], root);
}
var init_selectAll2 = __esm({
  "node_modules/d3-selection/src/selectAll.js"() {
    init_array3();
    init_selection();
  }
});

// node_modules/d3-selection/src/index.js
var src_exports7 = {};
__export(src_exports7, {
  create: () => create_default,
  creator: () => creator_default,
  local: () => local,
  matcher: () => matcher_default,
  namespace: () => namespace_default,
  namespaces: () => namespaces_default,
  pointer: () => pointer_default,
  pointers: () => pointers_default,
  select: () => select_default2,
  selectAll: () => selectAll_default2,
  selection: () => selection_default,
  selector: () => selector_default,
  selectorAll: () => selectorAll_default,
  style: () => styleValue,
  window: () => window_default
});
var init_src13 = __esm({
  "node_modules/d3-selection/src/index.js"() {
    init_create();
    init_creator();
    init_local();
    init_matcher();
    init_namespace();
    init_namespaces();
    init_pointer();
    init_pointers();
    init_select2();
    init_selectAll2();
    init_selection();
    init_selector();
    init_selectorAll();
    init_style();
    init_window();
  }
});

// node_modules/d3-shape/src/constant.js
function constant_default3(x5) {
  return function constant2() {
    return x5;
  };
}
var init_constant5 = __esm({
  "node_modules/d3-shape/src/constant.js"() {
  }
});

// node_modules/d3-shape/src/math.js
function acos(x5) {
  return x5 > 1 ? 0 : x5 < -1 ? pi2 : Math.acos(x5);
}
function asin(x5) {
  return x5 >= 1 ? halfPi : x5 <= -1 ? -halfPi : Math.asin(x5);
}
var abs, atan2, cos, max3, min2, sin, sqrt2, epsilon3, pi2, halfPi, tau2;
var init_math2 = __esm({
  "node_modules/d3-shape/src/math.js"() {
    abs = Math.abs;
    atan2 = Math.atan2;
    cos = Math.cos;
    max3 = Math.max;
    min2 = Math.min;
    sin = Math.sin;
    sqrt2 = Math.sqrt;
    epsilon3 = 1e-12;
    pi2 = Math.PI;
    halfPi = pi2 / 2;
    tau2 = 2 * pi2;
  }
});

// node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_3) {
    if (!arguments.length)
      return digits;
    if (_3 == null) {
      digits = null;
    } else {
      const d2 = Math.floor(_3);
      if (!(d2 >= 0))
        throw new RangeError(`invalid digits: ${_3}`);
      digits = d2;
    }
    return shape;
  };
  return () => new Path(digits);
}
var init_path2 = __esm({
  "node_modules/d3-shape/src/path.js"() {
    init_src12();
  }
});

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d2) {
  return d2.innerRadius;
}
function arcOuterRadius(d2) {
  return d2.outerRadius;
}
function arcStartAngle(d2) {
  return d2.startAngle;
}
function arcEndAngle(d2) {
  return d2.endAngle;
}
function arcPadAngle(d2) {
  return d2 && d2.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x32, y32) {
  var x10 = x1 - x0, y10 = y1 - y0, x322 = x32 - x22, y322 = y32 - y22, t = y322 * x10 - x322 * y10;
  if (t * t < epsilon3)
    return;
  t = (x322 * (y0 - y22) - y322 * (x0 - x22)) / t;
  return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo2 = (cw ? rc : -rc) / sqrt2(x01 * x01 + y01 * y01), ox = lo2 * y01, oy = -lo2 * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D8 = x11 * y10 - x10 * y11, d3 = (dy < 0 ? -1 : 1) * sqrt2(max3(0, r * r * d2 - D8 * D8)), cx0 = (D8 * dy - dx * d3) / d2, cy0 = (-D8 * dx - dy * d3) / d2, cx1 = (D8 * dy + dx * d3) / d2, cy1 = (-D8 * dx + dy * d3) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default3(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null, path2 = withPath(arc);
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da2 = abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path2();
    if (r1 < r0)
      r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon3))
      context.moveTo(0, 0);
    else if (da2 > tau2 - epsilon3) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon3) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da2, da1 = da2, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt2(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
      if (rp > epsilon3) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon3)
          p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon3)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon3) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da2 < pi2) {
          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
            var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt2(ax * ax + ay * ay) * sqrt2(bx * bx + by * by))) / 2), lc = sqrt2(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min2(rc, (r0 - lc) / (kc - 1));
            rc1 = min2(rc, (r1 - lc) / (kc + 1));
          } else {
            rc0 = rc1 = 0;
          }
        }
      }
      if (!(da1 > epsilon3))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon3) {
        t02 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc1 < rc)
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r1, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), !cw);
          context.arc(t12.cx, t12.cy, rc1, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon3) || !(da0 > epsilon3))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon3) {
        t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t12 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc0 < rc)
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r0, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), cw);
          context.arc(t12.cx, t12.cy, rc0, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a4 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a4) * r, sin(a4) * r];
  };
  arc.innerRadius = function(_3) {
    return arguments.length ? (innerRadius = typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : innerRadius;
  };
  arc.outerRadius = function(_3) {
    return arguments.length ? (outerRadius = typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : outerRadius;
  };
  arc.cornerRadius = function(_3) {
    return arguments.length ? (cornerRadius = typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : cornerRadius;
  };
  arc.padRadius = function(_3) {
    return arguments.length ? (padRadius = _3 == null ? null : typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : padRadius;
  };
  arc.startAngle = function(_3) {
    return arguments.length ? (startAngle = typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : startAngle;
  };
  arc.endAngle = function(_3) {
    return arguments.length ? (endAngle = typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : endAngle;
  };
  arc.padAngle = function(_3) {
    return arguments.length ? (padAngle = typeof _3 === "function" ? _3 : constant_default3(+_3), arc) : padAngle;
  };
  arc.context = function(_3) {
    return arguments.length ? (context = _3 == null ? null : _3, arc) : context;
  };
  return arc;
}
var init_arc = __esm({
  "node_modules/d3-shape/src/arc.js"() {
    init_constant5();
    init_math2();
    init_path2();
  }
});

// node_modules/d3-shape/src/array.js
function array_default(x5) {
  return typeof x5 === "object" && "length" in x5 ? x5 : Array.from(x5);
}
var slice2;
var init_array4 = __esm({
  "node_modules/d3-shape/src/array.js"() {
    slice2 = Array.prototype.slice;
  }
});

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
function linear_default(context) {
  return new Linear(context);
}
var init_linear2 = __esm({
  "node_modules/d3-shape/src/curve/linear.js"() {
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(x5, y4);
            break;
        }
      }
    };
  }
});

// node_modules/d3-shape/src/point.js
function x4(p2) {
  return p2[0];
}
function y3(p2) {
  return p2[1];
}
var init_point = __esm({
  "node_modules/d3-shape/src/point.js"() {
  }
});

// node_modules/d3-shape/src/line.js
function line_default(x5, y4) {
  var defined = constant_default3(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
  x5 = typeof x5 === "function" ? x5 : x5 === void 0 ? x4 : constant_default3(x5);
  y4 = typeof y4 === "function" ? y4 : y4 === void 0 ? y3 : constant_default3(y4);
  function line(data) {
    var i3, n2 = (data = array_default(data)).length, d2, defined0 = false, buffer;
    if (context == null)
      output = curve(buffer = path2());
    for (i3 = 0; i3 <= n2; ++i3) {
      if (!(i3 < n2 && defined(d2 = data[i3], i3, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x5(d2, i3, data), +y4(d2, i3, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line.x = function(_3) {
    return arguments.length ? (x5 = typeof _3 === "function" ? _3 : constant_default3(+_3), line) : x5;
  };
  line.y = function(_3) {
    return arguments.length ? (y4 = typeof _3 === "function" ? _3 : constant_default3(+_3), line) : y4;
  };
  line.defined = function(_3) {
    return arguments.length ? (defined = typeof _3 === "function" ? _3 : constant_default3(!!_3), line) : defined;
  };
  line.curve = function(_3) {
    return arguments.length ? (curve = _3, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_3) {
    return arguments.length ? (_3 == null ? context = output = null : output = curve(context = _3), line) : context;
  };
  return line;
}
var init_line = __esm({
  "node_modules/d3-shape/src/line.js"() {
    init_array4();
    init_constant5();
    init_linear2();
    init_path2();
    init_point();
  }
});

// node_modules/d3-shape/src/area.js
function area_default(x0, y0, y1) {
  var x1 = null, defined = constant_default3(true), context = null, curve = linear_default, output = null, path2 = withPath(area);
  x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x4 : constant_default3(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default3(0) : constant_default3(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y3 : constant_default3(+y1);
  function area(data) {
    var i3, j5, k4, n2 = (data = array_default(data)).length, d2, defined0 = false, buffer, x0z = new Array(n2), y0z = new Array(n2);
    if (context == null)
      output = curve(buffer = path2());
    for (i3 = 0; i3 <= n2; ++i3) {
      if (!(i3 < n2 && defined(d2 = data[i3], i3, data)) === defined0) {
        if (defined0 = !defined0) {
          j5 = i3;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k4 = i3 - 1; k4 >= j5; --k4) {
            output.point(x0z[k4], y0z[k4]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i3] = +x0(d2, i3, data), y0z[i3] = +y0(d2, i3, data);
        output.point(x1 ? +x1(d2, i3, data) : x0z[i3], y1 ? +y1(d2, i3, data) : y0z[i3]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_3) {
    return arguments.length ? (x0 = typeof _3 === "function" ? _3 : constant_default3(+_3), x1 = null, area) : x0;
  };
  area.x0 = function(_3) {
    return arguments.length ? (x0 = typeof _3 === "function" ? _3 : constant_default3(+_3), area) : x0;
  };
  area.x1 = function(_3) {
    return arguments.length ? (x1 = _3 == null ? null : typeof _3 === "function" ? _3 : constant_default3(+_3), area) : x1;
  };
  area.y = function(_3) {
    return arguments.length ? (y0 = typeof _3 === "function" ? _3 : constant_default3(+_3), y1 = null, area) : y0;
  };
  area.y0 = function(_3) {
    return arguments.length ? (y0 = typeof _3 === "function" ? _3 : constant_default3(+_3), area) : y0;
  };
  area.y1 = function(_3) {
    return arguments.length ? (y1 = _3 == null ? null : typeof _3 === "function" ? _3 : constant_default3(+_3), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_3) {
    return arguments.length ? (defined = typeof _3 === "function" ? _3 : constant_default3(!!_3), area) : defined;
  };
  area.curve = function(_3) {
    return arguments.length ? (curve = _3, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_3) {
    return arguments.length ? (_3 == null ? context = output = null : output = curve(context = _3), area) : context;
  };
  return area;
}
var init_area = __esm({
  "node_modules/d3-shape/src/area.js"() {
    init_array4();
    init_constant5();
    init_linear2();
    init_line();
    init_path2();
    init_point();
  }
});

// node_modules/d3-shape/src/descending.js
function descending_default(a4, b4) {
  return b4 < a4 ? -1 : b4 > a4 ? 1 : b4 >= a4 ? 0 : NaN;
}
var init_descending2 = __esm({
  "node_modules/d3-shape/src/descending.js"() {
  }
});

// node_modules/d3-shape/src/identity.js
function identity_default2(d2) {
  return d2;
}
var init_identity4 = __esm({
  "node_modules/d3-shape/src/identity.js"() {
  }
});

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default2, sortValues = descending_default, sort2 = null, startAngle = constant_default3(0), endAngle = constant_default3(tau2), padAngle = constant_default3(0);
  function pie(data) {
    var i3, n2 = (data = array_default(data)).length, j5, k4, sum3 = 0, index2 = new Array(n2), arcs = new Array(n2), a0 = +startAngle.apply(this, arguments), da2 = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p2 = Math.min(Math.abs(da2) / n2, padAngle.apply(this, arguments)), pa2 = p2 * (da2 < 0 ? -1 : 1), v2;
    for (i3 = 0; i3 < n2; ++i3) {
      if ((v2 = arcs[index2[i3] = i3] = +value(data[i3], i3, data)) > 0) {
        sum3 += v2;
      }
    }
    if (sortValues != null)
      index2.sort(function(i4, j6) {
        return sortValues(arcs[i4], arcs[j6]);
      });
    else if (sort2 != null)
      index2.sort(function(i4, j6) {
        return sort2(data[i4], data[j6]);
      });
    for (i3 = 0, k4 = sum3 ? (da2 - n2 * pa2) / sum3 : 0; i3 < n2; ++i3, a0 = a1) {
      j5 = index2[i3], v2 = arcs[j5], a1 = a0 + (v2 > 0 ? v2 * k4 : 0) + pa2, arcs[j5] = {
        data: data[j5],
        index: i3,
        value: v2,
        startAngle: a0,
        endAngle: a1,
        padAngle: p2
      };
    }
    return arcs;
  }
  pie.value = function(_3) {
    return arguments.length ? (value = typeof _3 === "function" ? _3 : constant_default3(+_3), pie) : value;
  };
  pie.sortValues = function(_3) {
    return arguments.length ? (sortValues = _3, sort2 = null, pie) : sortValues;
  };
  pie.sort = function(_3) {
    return arguments.length ? (sort2 = _3, sortValues = null, pie) : sort2;
  };
  pie.startAngle = function(_3) {
    return arguments.length ? (startAngle = typeof _3 === "function" ? _3 : constant_default3(+_3), pie) : startAngle;
  };
  pie.endAngle = function(_3) {
    return arguments.length ? (endAngle = typeof _3 === "function" ? _3 : constant_default3(+_3), pie) : endAngle;
  };
  pie.padAngle = function(_3) {
    return arguments.length ? (padAngle = typeof _3 === "function" ? _3 : constant_default3(+_3), pie) : padAngle;
  };
  return pie;
}
var init_pie = __esm({
  "node_modules/d3-shape/src/pie.js"() {
    init_array4();
    init_constant5();
    init_descending2();
    init_identity4();
    init_math2();
  }
});

// node_modules/d3-shape/src/curve/radial.js
function Radial(curve) {
  this._curve = curve;
}
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}
var curveRadialLinear;
var init_radial2 = __esm({
  "node_modules/d3-shape/src/curve/radial.js"() {
    init_linear2();
    curveRadialLinear = curveRadial(linear_default);
    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a4, r) {
        this._curve.point(r * Math.sin(a4), r * -Math.cos(a4));
      }
    };
  }
});

// node_modules/d3-shape/src/lineRadial.js
function lineRadial(l) {
  var c6 = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  l.curve = function(_3) {
    return arguments.length ? c6(curveRadial(_3)) : c6()._curve;
  };
  return l;
}
function lineRadial_default() {
  return lineRadial(line_default().curve(curveRadialLinear));
}
var init_lineRadial = __esm({
  "node_modules/d3-shape/src/lineRadial.js"() {
    init_radial2();
    init_line();
  }
});

// node_modules/d3-shape/src/areaRadial.js
function areaRadial_default() {
  var a4 = area_default().curve(curveRadialLinear), c6 = a4.curve, x0 = a4.lineX0, x1 = a4.lineX1, y0 = a4.lineY0, y1 = a4.lineY1;
  a4.angle = a4.x, delete a4.x;
  a4.startAngle = a4.x0, delete a4.x0;
  a4.endAngle = a4.x1, delete a4.x1;
  a4.radius = a4.y, delete a4.y;
  a4.innerRadius = a4.y0, delete a4.y0;
  a4.outerRadius = a4.y1, delete a4.y1;
  a4.lineStartAngle = function() {
    return lineRadial(x0());
  }, delete a4.lineX0;
  a4.lineEndAngle = function() {
    return lineRadial(x1());
  }, delete a4.lineX1;
  a4.lineInnerRadius = function() {
    return lineRadial(y0());
  }, delete a4.lineY0;
  a4.lineOuterRadius = function() {
    return lineRadial(y1());
  }, delete a4.lineY1;
  a4.curve = function(_3) {
    return arguments.length ? c6(curveRadial(_3)) : c6()._curve;
  };
  return a4;
}
var init_areaRadial = __esm({
  "node_modules/d3-shape/src/areaRadial.js"() {
    init_radial2();
    init_area();
    init_lineRadial();
  }
});

// node_modules/d3-shape/src/pointRadial.js
function pointRadial_default(x5, y4) {
  return [(y4 = +y4) * Math.cos(x5 -= Math.PI / 2), y4 * Math.sin(x5)];
}
var init_pointRadial = __esm({
  "node_modules/d3-shape/src/pointRadial.js"() {
  }
});

// node_modules/d3-shape/src/curve/bump.js
function bumpX(context) {
  return new Bump(context, true);
}
function bumpY(context) {
  return new Bump(context, false);
}
function bumpRadial(context) {
  return new BumpRadial(context);
}
var Bump, BumpRadial;
var init_bump = __esm({
  "node_modules/d3-shape/src/curve/bump.js"() {
    init_pointRadial();
    Bump = class {
      constructor(context, x5) {
        this._context = context;
        this._x = x5;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line)
              this._context.lineTo(x5, y4);
            else
              this._context.moveTo(x5, y4);
            break;
          }
          case 1:
            this._point = 2;
          default: {
            if (this._x)
              this._context.bezierCurveTo(this._x0 = (this._x0 + x5) / 2, this._y0, this._x0, y4, x5, y4);
            else
              this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y4) / 2, x5, this._y0, x5, y4);
            break;
          }
        }
        this._x0 = x5, this._y0 = y4;
      }
    };
    BumpRadial = class {
      constructor(context) {
        this._context = context;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
      }
      point(x5, y4) {
        x5 = +x5, y4 = +y4;
        if (this._point === 0) {
          this._point = 1;
        } else {
          const p0 = pointRadial_default(this._x0, this._y0);
          const p1 = pointRadial_default(this._x0, this._y0 = (this._y0 + y4) / 2);
          const p2 = pointRadial_default(x5, this._y0);
          const p3 = pointRadial_default(x5, y4);
          this._context.moveTo(...p0);
          this._context.bezierCurveTo(...p1, ...p2, ...p3);
        }
        this._x0 = x5, this._y0 = y4;
      }
    };
  }
});

// node_modules/d3-shape/src/link.js
function linkSource(d2) {
  return d2.source;
}
function linkTarget(d2) {
  return d2.target;
}
function link(curve) {
  let source = linkSource, target = linkTarget, x5 = x4, y4 = y3, context = null, output = null, path2 = withPath(link2);
  function link2() {
    let buffer;
    const argv = slice2.call(arguments);
    const s2 = source.apply(this, argv);
    const t = target.apply(this, argv);
    if (context == null)
      output = curve(buffer = path2());
    output.lineStart();
    argv[0] = s2, output.point(+x5.apply(this, argv), +y4.apply(this, argv));
    argv[0] = t, output.point(+x5.apply(this, argv), +y4.apply(this, argv));
    output.lineEnd();
    if (buffer)
      return output = null, buffer + "" || null;
  }
  link2.source = function(_3) {
    return arguments.length ? (source = _3, link2) : source;
  };
  link2.target = function(_3) {
    return arguments.length ? (target = _3, link2) : target;
  };
  link2.x = function(_3) {
    return arguments.length ? (x5 = typeof _3 === "function" ? _3 : constant_default3(+_3), link2) : x5;
  };
  link2.y = function(_3) {
    return arguments.length ? (y4 = typeof _3 === "function" ? _3 : constant_default3(+_3), link2) : y4;
  };
  link2.context = function(_3) {
    return arguments.length ? (_3 == null ? context = output = null : output = curve(context = _3), link2) : context;
  };
  return link2;
}
function linkHorizontal() {
  return link(bumpX);
}
function linkVertical() {
  return link(bumpY);
}
function linkRadial() {
  const l = link(bumpRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
var init_link = __esm({
  "node_modules/d3-shape/src/link.js"() {
    init_array4();
    init_constant5();
    init_bump();
    init_path2();
    init_point();
  }
});

// node_modules/d3-shape/src/symbol/asterisk.js
var sqrt3, asterisk_default;
var init_asterisk = __esm({
  "node_modules/d3-shape/src/symbol/asterisk.js"() {
    init_math2();
    sqrt3 = sqrt2(3);
    asterisk_default = {
      draw(context, size) {
        const r = sqrt2(size + min2(size / 28, 0.75)) * 0.59436;
        const t = r / 2;
        const u = t * sqrt3;
        context.moveTo(0, r);
        context.lineTo(0, -r);
        context.moveTo(-u, -t);
        context.lineTo(u, t);
        context.moveTo(-u, t);
        context.lineTo(u, -t);
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/circle.js
var circle_default;
var init_circle = __esm({
  "node_modules/d3-shape/src/symbol/circle.js"() {
    init_math2();
    circle_default = {
      draw(context, size) {
        const r = sqrt2(size / pi2);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau2);
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/cross.js
var cross_default;
var init_cross2 = __esm({
  "node_modules/d3-shape/src/symbol/cross.js"() {
    init_math2();
    cross_default = {
      draw(context, size) {
        const r = sqrt2(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/diamond.js
var tan30, tan30_2, diamond_default;
var init_diamond = __esm({
  "node_modules/d3-shape/src/symbol/diamond.js"() {
    init_math2();
    tan30 = sqrt2(1 / 3);
    tan30_2 = tan30 * 2;
    diamond_default = {
      draw(context, size) {
        const y4 = sqrt2(size / tan30_2);
        const x5 = y4 * tan30;
        context.moveTo(0, -y4);
        context.lineTo(x5, 0);
        context.lineTo(0, y4);
        context.lineTo(-x5, 0);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/diamond2.js
var diamond2_default;
var init_diamond2 = __esm({
  "node_modules/d3-shape/src/symbol/diamond2.js"() {
    init_math2();
    diamond2_default = {
      draw(context, size) {
        const r = sqrt2(size) * 0.62625;
        context.moveTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.lineTo(-r, 0);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/plus.js
var plus_default;
var init_plus = __esm({
  "node_modules/d3-shape/src/symbol/plus.js"() {
    init_math2();
    plus_default = {
      draw(context, size) {
        const r = sqrt2(size - min2(size / 7, 2)) * 0.87559;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
        context.moveTo(0, r);
        context.lineTo(0, -r);
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/square.js
var square_default;
var init_square = __esm({
  "node_modules/d3-shape/src/symbol/square.js"() {
    init_math2();
    square_default = {
      draw(context, size) {
        const w3 = sqrt2(size);
        const x5 = -w3 / 2;
        context.rect(x5, x5, w3, w3);
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/square2.js
var square2_default;
var init_square2 = __esm({
  "node_modules/d3-shape/src/symbol/square2.js"() {
    init_math2();
    square2_default = {
      draw(context, size) {
        const r = sqrt2(size) * 0.4431;
        context.moveTo(r, r);
        context.lineTo(r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, r);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/star.js
var ka, kr, kx, ky, star_default;
var init_star = __esm({
  "node_modules/d3-shape/src/symbol/star.js"() {
    init_math2();
    ka = 0.8908130915292852;
    kr = sin(pi2 / 10) / sin(7 * pi2 / 10);
    kx = sin(tau2 / 10) * kr;
    ky = -cos(tau2 / 10) * kr;
    star_default = {
      draw(context, size) {
        const r = sqrt2(size * ka);
        const x5 = kx * r;
        const y4 = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x5, y4);
        for (let i3 = 1; i3 < 5; ++i3) {
          const a4 = tau2 * i3 / 5;
          const c6 = cos(a4);
          const s2 = sin(a4);
          context.lineTo(s2 * r, -c6 * r);
          context.lineTo(c6 * x5 - s2 * y4, s2 * x5 + c6 * y4);
        }
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt32, triangle_default;
var init_triangle = __esm({
  "node_modules/d3-shape/src/symbol/triangle.js"() {
    init_math2();
    sqrt32 = sqrt2(3);
    triangle_default = {
      draw(context, size) {
        const y4 = -sqrt2(size / (sqrt32 * 3));
        context.moveTo(0, y4 * 2);
        context.lineTo(-sqrt32 * y4, -y4);
        context.lineTo(sqrt32 * y4, -y4);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/triangle2.js
var sqrt33, triangle2_default;
var init_triangle2 = __esm({
  "node_modules/d3-shape/src/symbol/triangle2.js"() {
    init_math2();
    sqrt33 = sqrt2(3);
    triangle2_default = {
      draw(context, size) {
        const s2 = sqrt2(size) * 0.6824;
        const t = s2 / 2;
        const u = s2 * sqrt33 / 2;
        context.moveTo(0, -s2);
        context.lineTo(u, t);
        context.lineTo(-u, t);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/wye.js
var c3, s, k3, a3, wye_default;
var init_wye = __esm({
  "node_modules/d3-shape/src/symbol/wye.js"() {
    init_math2();
    c3 = -0.5;
    s = sqrt2(3) / 2;
    k3 = 1 / sqrt2(12);
    a3 = (k3 / 2 + 1) * 3;
    wye_default = {
      draw(context, size) {
        const r = sqrt2(size / a3);
        const x0 = r / 2, y0 = r * k3;
        const x1 = x0, y1 = r * k3 + r;
        const x22 = -x1, y22 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x22, y22);
        context.lineTo(c3 * x0 - s * y0, s * x0 + c3 * y0);
        context.lineTo(c3 * x1 - s * y1, s * x1 + c3 * y1);
        context.lineTo(c3 * x22 - s * y22, s * x22 + c3 * y22);
        context.lineTo(c3 * x0 + s * y0, c3 * y0 - s * x0);
        context.lineTo(c3 * x1 + s * y1, c3 * y1 - s * x1);
        context.lineTo(c3 * x22 + s * y22, c3 * y22 - s * x22);
        context.closePath();
      }
    };
  }
});

// node_modules/d3-shape/src/symbol/times.js
var times_default;
var init_times = __esm({
  "node_modules/d3-shape/src/symbol/times.js"() {
    init_math2();
    times_default = {
      draw(context, size) {
        const r = sqrt2(size - min2(size / 6, 1.7)) * 0.6189;
        context.moveTo(-r, -r);
        context.lineTo(r, r);
        context.moveTo(-r, r);
        context.lineTo(r, -r);
      }
    };
  }
});

// node_modules/d3-shape/src/symbol.js
function Symbol2(type2, size) {
  let context = null, path2 = withPath(symbol2);
  type2 = typeof type2 === "function" ? type2 : constant_default3(type2 || circle_default);
  size = typeof size === "function" ? size : constant_default3(size === void 0 ? 64 : +size);
  function symbol2() {
    let buffer;
    if (!context)
      context = buffer = path2();
    type2.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer)
      return context = null, buffer + "" || null;
  }
  symbol2.type = function(_3) {
    return arguments.length ? (type2 = typeof _3 === "function" ? _3 : constant_default3(_3), symbol2) : type2;
  };
  symbol2.size = function(_3) {
    return arguments.length ? (size = typeof _3 === "function" ? _3 : constant_default3(+_3), symbol2) : size;
  };
  symbol2.context = function(_3) {
    return arguments.length ? (context = _3 == null ? null : _3, symbol2) : context;
  };
  return symbol2;
}
var symbolsFill, symbolsStroke;
var init_symbol = __esm({
  "node_modules/d3-shape/src/symbol.js"() {
    init_constant5();
    init_path2();
    init_asterisk();
    init_circle();
    init_cross2();
    init_diamond();
    init_diamond2();
    init_plus();
    init_square();
    init_square2();
    init_star();
    init_triangle();
    init_triangle2();
    init_wye();
    init_times();
    symbolsFill = [
      circle_default,
      cross_default,
      diamond_default,
      square_default,
      star_default,
      triangle_default,
      wye_default
    ];
    symbolsStroke = [
      circle_default,
      plus_default,
      times_default,
      triangle2_default,
      asterisk_default,
      square2_default,
      diamond2_default
    ];
  }
});

// node_modules/d3-shape/src/noop.js
function noop_default() {
}
var init_noop = __esm({
  "node_modules/d3-shape/src/noop.js"() {
  }
});

// node_modules/d3-shape/src/curve/basis.js
function point2(that, x5, y4) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x5) / 6,
    (that._y0 + 4 * that._y1 + y4) / 6
  );
}
function Basis(context) {
  this._context = context;
}
function basis_default2(context) {
  return new Basis(context);
}
var init_basis2 = __esm({
  "node_modules/d3-shape/src/curve/basis.js"() {
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point2(this, this._x1, this._y1);
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          default:
            point2(this, x5, y4);
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y4;
      }
    };
  }
});

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
function basisClosed_default2(context) {
  return new BasisClosed(context);
}
var init_basisClosed2 = __esm({
  "node_modules/d3-shape/src/curve/basisClosed.js"() {
    init_noop();
    init_basis2();
    BasisClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x5, this._y2 = y4;
            break;
          case 1:
            this._point = 2;
            this._x3 = x5, this._y3 = y4;
            break;
          case 2:
            this._point = 3;
            this._x4 = x5, this._y4 = y4;
            this._context.moveTo((this._x0 + 4 * this._x1 + x5) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
            break;
          default:
            point2(this, x5, y4);
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y4;
      }
    };
  }
});

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
function basisOpen_default(context) {
  return new BasisOpen(context);
}
var init_basisOpen = __esm({
  "node_modules/d3-shape/src/curve/basisOpen.js"() {
    init_basis2();
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x5) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          default:
            point2(this, x5, y4);
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y4;
      }
    };
  }
});

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
var bundle_default;
var init_bundle = __esm({
  "node_modules/d3-shape/src/curve/bundle.js"() {
    init_basis2();
    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x5 = this._x, y4 = this._y, j5 = x5.length - 1;
        if (j5 > 0) {
          var x0 = x5[0], y0 = y4[0], dx = x5[j5] - x0, dy = y4[j5] - y0, i3 = -1, t;
          while (++i3 <= j5) {
            t = i3 / j5;
            this._basis.point(
              this._beta * x5[i3] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y4[i3] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x5, y4) {
        this._x.push(+x5);
        this._y.push(+y4);
      }
    };
    bundle_default = function custom(beta) {
      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }
      bundle.beta = function(beta2) {
        return custom(+beta2);
      };
      return bundle;
    }(0.85);
  }
});

// node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x5, y4) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x5),
    that._y2 + that._k * (that._y1 - y4),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinal_default;
var init_cardinal = __esm({
  "node_modules/d3-shape/src/curve/cardinal.js"() {
    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point3(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
            break;
          case 1:
            this._point = 2;
            this._x1 = x5, this._y1 = y4;
            break;
          case 2:
            this._point = 3;
          default:
            point3(this, x5, y4);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
      }
    };
    cardinal_default = function custom2(tension) {
      function cardinal(context) {
        return new Cardinal(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom2(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalClosed_default;
var init_cardinalClosed = __esm({
  "node_modules/d3-shape/src/curve/cardinalClosed.js"() {
    init_noop();
    init_cardinal();
    CardinalClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x5, this._y3 = y4;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x5, this._y4 = y4);
            break;
          case 2:
            this._point = 3;
            this._x5 = x5, this._y5 = y4;
            break;
          default:
            point3(this, x5, y4);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
      }
    };
    cardinalClosed_default = function custom3(tension) {
      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom3(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalOpen_default;
var init_cardinalOpen = __esm({
  "node_modules/d3-shape/src/curve/cardinalOpen.js"() {
    init_cardinal();
    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point3(this, x5, y4);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
      }
    };
    cardinalOpen_default = function custom4(tension) {
      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom4(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x5, y4) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a4 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n2 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a4 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n2;
    y1 = (y1 * a4 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n2;
  }
  if (that._l23_a > epsilon3) {
    var b4 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b4 + that._x1 * that._l23_2a - x5 * that._l12_2a) / m2;
    y22 = (y22 * b4 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m2;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRom_default;
var init_catmullRom = __esm({
  "node_modules/d3-shape/src/curve/catmullRom.js"() {
    init_math2();
    init_cardinal();
    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        if (this._point) {
          var x23 = this._x2 - x5, y23 = this._y2 - y4;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          default:
            point4(this, x5, y4);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
      }
    };
    catmullRom_default = function custom5(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom5(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomClosed_default;
var init_catmullRomClosed = __esm({
  "node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
    init_cardinalClosed();
    init_noop();
    init_catmullRom();
    CatmullRomClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        if (this._point) {
          var x23 = this._x2 - x5, y23 = this._y2 - y4;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x5, this._y3 = y4;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x5, this._y4 = y4);
            break;
          case 2:
            this._point = 3;
            this._x5 = x5, this._y5 = y4;
            break;
          default:
            point4(this, x5, y4);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
      }
    };
    catmullRomClosed_default = function custom6(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom6(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomOpen_default;
var init_catmullRomOpen = __esm({
  "node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
    init_cardinalOpen();
    init_catmullRom();
    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        if (this._point) {
          var x23 = this._x2 - x5, y23 = this._y2 - y4;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point4(this, x5, y4);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
      }
    };
    catmullRomOpen_default = function custom7(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom7(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
function linearClosed_default(context) {
  return new LinearClosed(context);
}
var init_linearClosed = __esm({
  "node_modules/d3-shape/src/curve/linearClosed.js"() {
    init_noop();
    LinearClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point)
          this._context.closePath();
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        if (this._point)
          this._context.lineTo(x5, y4);
        else
          this._point = 1, this._context.moveTo(x5, y4);
      }
    };
  }
});

// node_modules/d3-shape/src/curve/monotone.js
function sign(x5) {
  return x5 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
}
function slope2(that, t) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t) / 2 : t;
}
function point5(that, t02, t12) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
function ReflectContext(context) {
  this._context = context;
}
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}
var init_monotone = __esm({
  "node_modules/d3-shape/src/curve/monotone.js"() {
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point5(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        var t12 = NaN;
        x5 = +x5, y4 = +y4;
        if (x5 === this._x1 && y4 === this._y1)
          return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point5(this, slope2(this, t12 = slope3(this, x5, y4)), t12);
            break;
          default:
            point5(this, this._t0, t12 = slope3(this, x5, y4));
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y4;
        this._t0 = t12;
      }
    };
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x5, y4) {
      MonotoneX.prototype.point.call(this, y4, x5);
    };
    ReflectContext.prototype = {
      moveTo: function(x5, y4) {
        this._context.moveTo(y4, x5);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x5, y4) {
        this._context.lineTo(y4, x5);
      },
      bezierCurveTo: function(x1, y1, x22, y22, x5, y4) {
        this._context.bezierCurveTo(y1, x1, y22, x22, y4, x5);
      }
    };
  }
});

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
function controlPoints(x5) {
  var i3, n2 = x5.length - 1, m2, a4 = new Array(n2), b4 = new Array(n2), r = new Array(n2);
  a4[0] = 0, b4[0] = 2, r[0] = x5[0] + 2 * x5[1];
  for (i3 = 1; i3 < n2 - 1; ++i3)
    a4[i3] = 1, b4[i3] = 4, r[i3] = 4 * x5[i3] + 2 * x5[i3 + 1];
  a4[n2 - 1] = 2, b4[n2 - 1] = 7, r[n2 - 1] = 8 * x5[n2 - 1] + x5[n2];
  for (i3 = 1; i3 < n2; ++i3)
    m2 = a4[i3] / b4[i3 - 1], b4[i3] -= m2, r[i3] -= m2 * r[i3 - 1];
  a4[n2 - 1] = r[n2 - 1] / b4[n2 - 1];
  for (i3 = n2 - 2; i3 >= 0; --i3)
    a4[i3] = (r[i3] - a4[i3 + 1]) / b4[i3];
  b4[n2 - 1] = (x5[n2] + a4[n2 - 1]) / 2;
  for (i3 = 0; i3 < n2 - 1; ++i3)
    b4[i3] = 2 * x5[i3 + 1] - a4[i3 + 1];
  return [a4, b4];
}
function natural_default(context) {
  return new Natural(context);
}
var init_natural = __esm({
  "node_modules/d3-shape/src/curve/natural.js"() {
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x5 = this._x, y4 = this._y, n2 = x5.length;
        if (n2) {
          this._line ? this._context.lineTo(x5[0], y4[0]) : this._context.moveTo(x5[0], y4[0]);
          if (n2 === 2) {
            this._context.lineTo(x5[1], y4[1]);
          } else {
            var px = controlPoints(x5), py = controlPoints(y4);
            for (var i0 = 0, i1 = 1; i1 < n2; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x5[i1], y4[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n2 === 1)
          this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x5, y4) {
        this._x.push(+x5);
        this._y.push(+y4);
      }
    };
  }
});

// node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}
var init_step = __esm({
  "node_modules/d3-shape/src/curve/step.js"() {
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2)
          this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        if (this._line >= 0)
          this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x5, y4) {
        x5 = +x5, y4 = +y4;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
            break;
          case 1:
            this._point = 2;
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y4);
              this._context.lineTo(x5, y4);
            } else {
              var x1 = this._x * (1 - this._t) + x5 * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y4);
            }
            break;
          }
        }
        this._x = x5, this._y = y4;
      }
    };
  }
});

// node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n2 = series.length) > 1))
    return;
  for (var i3 = 1, j5, s0, s1 = series[order[0]], n2, m2 = s1.length; i3 < n2; ++i3) {
    s0 = s1, s1 = series[order[i3]];
    for (j5 = 0; j5 < m2; ++j5) {
      s1[j5][1] += s1[j5][0] = isNaN(s0[j5][1]) ? s0[j5][0] : s0[j5][1];
    }
  }
}
var init_none = __esm({
  "node_modules/d3-shape/src/offset/none.js"() {
  }
});

// node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n2 = series.length, o = new Array(n2);
  while (--n2 >= 0)
    o[n2] = n2;
  return o;
}
var init_none2 = __esm({
  "node_modules/d3-shape/src/order/none.js"() {
  }
});

// node_modules/d3-shape/src/stack.js
function stackValue(d2, key) {
  return d2[key];
}
function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}
function stack_default() {
  var keys = constant_default3([]), order = none_default2, offset = none_default, value = stackValue;
  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries), i3, n2 = sz.length, j5 = -1, oz;
    for (const d2 of data) {
      for (i3 = 0, ++j5; i3 < n2; ++i3) {
        (sz[i3][j5] = [0, +value(d2, sz[i3].key, j5, data)]).data = d2;
      }
    }
    for (i3 = 0, oz = array_default(order(sz)); i3 < n2; ++i3) {
      sz[oz[i3]].index = i3;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_3) {
    return arguments.length ? (keys = typeof _3 === "function" ? _3 : constant_default3(Array.from(_3)), stack) : keys;
  };
  stack.value = function(_3) {
    return arguments.length ? (value = typeof _3 === "function" ? _3 : constant_default3(+_3), stack) : value;
  };
  stack.order = function(_3) {
    return arguments.length ? (order = _3 == null ? none_default2 : typeof _3 === "function" ? _3 : constant_default3(Array.from(_3)), stack) : order;
  };
  stack.offset = function(_3) {
    return arguments.length ? (offset = _3 == null ? none_default : _3, stack) : offset;
  };
  return stack;
}
var init_stack = __esm({
  "node_modules/d3-shape/src/stack.js"() {
    init_array4();
    init_constant5();
    init_none();
    init_none2();
  }
});

// node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n2 = series.length) > 0))
    return;
  for (var i3, n2, j5 = 0, m2 = series[0].length, y4; j5 < m2; ++j5) {
    for (y4 = i3 = 0; i3 < n2; ++i3)
      y4 += series[i3][j5][1] || 0;
    if (y4)
      for (i3 = 0; i3 < n2; ++i3)
        series[i3][j5][1] /= y4;
  }
  none_default(series, order);
}
var init_expand = __esm({
  "node_modules/d3-shape/src/offset/expand.js"() {
    init_none();
  }
});

// node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n2 = series.length) > 0))
    return;
  for (var i3, j5 = 0, d2, dy, yp, yn2, n2, m2 = series[order[0]].length; j5 < m2; ++j5) {
    for (yp = yn2 = 0, i3 = 0; i3 < n2; ++i3) {
      if ((dy = (d2 = series[order[i3]][j5])[1] - d2[0]) > 0) {
        d2[0] = yp, d2[1] = yp += dy;
      } else if (dy < 0) {
        d2[1] = yn2, d2[0] = yn2 += dy;
      } else {
        d2[0] = 0, d2[1] = dy;
      }
    }
  }
}
var init_diverging2 = __esm({
  "node_modules/d3-shape/src/offset/diverging.js"() {
  }
});

// node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n2 = series.length) > 0))
    return;
  for (var j5 = 0, s0 = series[order[0]], n2, m2 = s0.length; j5 < m2; ++j5) {
    for (var i3 = 0, y4 = 0; i3 < n2; ++i3)
      y4 += series[i3][j5][1] || 0;
    s0[j5][1] += s0[j5][0] = -y4 / 2;
  }
  none_default(series, order);
}
var init_silhouette = __esm({
  "node_modules/d3-shape/src/offset/silhouette.js"() {
    init_none();
  }
});

// node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n2 = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0))
    return;
  for (var y4 = 0, j5 = 1, s0, m2, n2; j5 < m2; ++j5) {
    for (var i3 = 0, s1 = 0, s2 = 0; i3 < n2; ++i3) {
      var si = series[order[i3]], sij0 = si[j5][1] || 0, sij1 = si[j5 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k4 = 0; k4 < i3; ++k4) {
        var sk = series[order[k4]], skj0 = sk[j5][1] || 0, skj1 = sk[j5 - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j5 - 1][1] += s0[j5 - 1][0] = y4;
    if (s1)
      y4 -= s2 / s1;
  }
  s0[j5 - 1][1] += s0[j5 - 1][0] = y4;
  none_default(series, order);
}
var init_wiggle = __esm({
  "node_modules/d3-shape/src/offset/wiggle.js"() {
    init_none();
  }
});

// node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a4, b4) {
    return peaks[a4] - peaks[b4];
  });
}
function peak(series) {
  var i3 = -1, j5 = 0, n2 = series.length, vi, vj = -Infinity;
  while (++i3 < n2)
    if ((vi = +series[i3][1]) > vj)
      vj = vi, j5 = i3;
  return j5;
}
var init_appearance = __esm({
  "node_modules/d3-shape/src/order/appearance.js"() {
    init_none2();
  }
});

// node_modules/d3-shape/src/order/ascending.js
function ascending_default(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a4, b4) {
    return sums[a4] - sums[b4];
  });
}
function sum2(series) {
  var s2 = 0, i3 = -1, n2 = series.length, v2;
  while (++i3 < n2)
    if (v2 = +series[i3][1])
      s2 += v2;
  return s2;
}
var init_ascending2 = __esm({
  "node_modules/d3-shape/src/order/ascending.js"() {
    init_none2();
  }
});

// node_modules/d3-shape/src/order/descending.js
function descending_default2(series) {
  return ascending_default(series).reverse();
}
var init_descending3 = __esm({
  "node_modules/d3-shape/src/order/descending.js"() {
    init_ascending2();
  }
});

// node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n2 = series.length, i3, j5, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i3 = 0; i3 < n2; ++i3) {
    j5 = order[i3];
    if (top < bottom) {
      top += sums[j5];
      tops.push(j5);
    } else {
      bottom += sums[j5];
      bottoms.push(j5);
    }
  }
  return bottoms.reverse().concat(tops);
}
var init_insideOut = __esm({
  "node_modules/d3-shape/src/order/insideOut.js"() {
    init_appearance();
    init_ascending2();
  }
});

// node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}
var init_reverse2 = __esm({
  "node_modules/d3-shape/src/order/reverse.js"() {
    init_none2();
  }
});

// node_modules/d3-shape/src/index.js
var src_exports8 = {};
__export(src_exports8, {
  arc: () => arc_default,
  area: () => area_default,
  areaRadial: () => areaRadial_default,
  curveBasis: () => basis_default2,
  curveBasisClosed: () => basisClosed_default2,
  curveBasisOpen: () => basisOpen_default,
  curveBumpX: () => bumpX,
  curveBumpY: () => bumpY,
  curveBundle: () => bundle_default,
  curveCardinal: () => cardinal_default,
  curveCardinalClosed: () => cardinalClosed_default,
  curveCardinalOpen: () => cardinalOpen_default,
  curveCatmullRom: () => catmullRom_default,
  curveCatmullRomClosed: () => catmullRomClosed_default,
  curveCatmullRomOpen: () => catmullRomOpen_default,
  curveLinear: () => linear_default,
  curveLinearClosed: () => linearClosed_default,
  curveMonotoneX: () => monotoneX,
  curveMonotoneY: () => monotoneY,
  curveNatural: () => natural_default,
  curveStep: () => step_default,
  curveStepAfter: () => stepAfter,
  curveStepBefore: () => stepBefore,
  line: () => line_default,
  lineRadial: () => lineRadial_default,
  link: () => link,
  linkHorizontal: () => linkHorizontal,
  linkRadial: () => linkRadial,
  linkVertical: () => linkVertical,
  pie: () => pie_default,
  pointRadial: () => pointRadial_default,
  radialArea: () => areaRadial_default,
  radialLine: () => lineRadial_default,
  stack: () => stack_default,
  stackOffsetDiverging: () => diverging_default,
  stackOffsetExpand: () => expand_default,
  stackOffsetNone: () => none_default,
  stackOffsetSilhouette: () => silhouette_default,
  stackOffsetWiggle: () => wiggle_default,
  stackOrderAppearance: () => appearance_default,
  stackOrderAscending: () => ascending_default,
  stackOrderDescending: () => descending_default2,
  stackOrderInsideOut: () => insideOut_default,
  stackOrderNone: () => none_default2,
  stackOrderReverse: () => reverse_default,
  symbol: () => Symbol2,
  symbolAsterisk: () => asterisk_default,
  symbolCircle: () => circle_default,
  symbolCross: () => cross_default,
  symbolDiamond: () => diamond_default,
  symbolDiamond2: () => diamond2_default,
  symbolPlus: () => plus_default,
  symbolSquare: () => square_default,
  symbolSquare2: () => square2_default,
  symbolStar: () => star_default,
  symbolTimes: () => times_default,
  symbolTriangle: () => triangle_default,
  symbolTriangle2: () => triangle2_default,
  symbolWye: () => wye_default,
  symbolX: () => times_default,
  symbols: () => symbolsFill,
  symbolsFill: () => symbolsFill,
  symbolsStroke: () => symbolsStroke
});
var init_src14 = __esm({
  "node_modules/d3-shape/src/index.js"() {
    init_arc();
    init_area();
    init_line();
    init_pie();
    init_areaRadial();
    init_lineRadial();
    init_pointRadial();
    init_link();
    init_symbol();
    init_asterisk();
    init_circle();
    init_cross2();
    init_diamond();
    init_diamond2();
    init_plus();
    init_square();
    init_square2();
    init_star();
    init_triangle();
    init_triangle2();
    init_wye();
    init_times();
    init_basisClosed2();
    init_basisOpen();
    init_basis2();
    init_bump();
    init_bundle();
    init_cardinalClosed();
    init_cardinalOpen();
    init_cardinal();
    init_catmullRomClosed();
    init_catmullRomOpen();
    init_catmullRom();
    init_linearClosed();
    init_linear2();
    init_monotone();
    init_natural();
    init_step();
    init_stack();
    init_expand();
    init_diverging2();
    init_none();
    init_silhouette();
    init_wiggle();
    init_appearance();
    init_ascending2();
    init_descending3();
    init_insideOut();
    init_none2();
    init_reverse2();
  }
});

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n2 = specifier.length / 6 | 0, colors = new Array(n2), i3 = 0;
  while (i3 < n2)
    colors[i3] = "#" + specifier.slice(i3 * 6, ++i3 * 6);
  return colors;
}
var init_colors = __esm({
  "node_modules/d3-scale-chromatic/src/colors.js"() {
  }
});

// node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default;
var init_category10 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/category10.js"() {
    init_colors();
    category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default;
var init_Accent = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Accent.js"() {
    init_colors();
    Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default;
var init_Dark2 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Dark2.js"() {
    init_colors();
    Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default;
var init_Paired = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Paired.js"() {
    init_colors();
    Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default;
var init_Pastel1 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Pastel1.js"() {
    init_colors();
    Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default;
var init_Pastel2 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Pastel2.js"() {
    init_colors();
    Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default;
var init_Set1 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Set1.js"() {
    init_colors();
    Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default;
var init_Set2 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Set2.js"() {
    init_colors();
    Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default;
var init_Set3 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Set3.js"() {
    init_colors();
    Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
  }
});

// node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default;
var init_Tableau10 = __esm({
  "node_modules/d3-scale-chromatic/src/categorical/Tableau10.js"() {
    init_colors();
    Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");
  }
});

// node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default;
var init_ramp = __esm({
  "node_modules/d3-scale-chromatic/src/ramp.js"() {
    init_src4();
    ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme, BrBG_default;
var init_BrBG = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/BrBG.js"() {
    init_colors();
    init_ramp();
    scheme = new Array(3).concat(
      "d8b365f5f5f55ab4ac",
      "a6611adfc27d80cdc1018571",
      "a6611adfc27df5f5f580cdc1018571",
      "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
      "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
      "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
      "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
      "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
      "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
    ).map(colors_default);
    BrBG_default = ramp_default(scheme);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2, PRGn_default;
var init_PRGn = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/PRGn.js"() {
    init_colors();
    init_ramp();
    scheme2 = new Array(3).concat(
      "af8dc3f7f7f77fbf7b",
      "7b3294c2a5cfa6dba0008837",
      "7b3294c2a5cff7f7f7a6dba0008837",
      "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
      "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
      "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
      "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
      "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
      "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
    ).map(colors_default);
    PRGn_default = ramp_default(scheme2);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3, PiYG_default;
var init_PiYG = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/PiYG.js"() {
    init_colors();
    init_ramp();
    scheme3 = new Array(3).concat(
      "e9a3c9f7f7f7a1d76a",
      "d01c8bf1b6dab8e1864dac26",
      "d01c8bf1b6daf7f7f7b8e1864dac26",
      "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
      "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
      "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
      "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
      "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
      "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
    ).map(colors_default);
    PiYG_default = ramp_default(scheme3);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4, PuOr_default;
var init_PuOr = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/PuOr.js"() {
    init_colors();
    init_ramp();
    scheme4 = new Array(3).concat(
      "998ec3f7f7f7f1a340",
      "5e3c99b2abd2fdb863e66101",
      "5e3c99b2abd2f7f7f7fdb863e66101",
      "542788998ec3d8daebfee0b6f1a340b35806",
      "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
      "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
      "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
      "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
      "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
    ).map(colors_default);
    PuOr_default = ramp_default(scheme4);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5, RdBu_default;
var init_RdBu = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/RdBu.js"() {
    init_colors();
    init_ramp();
    scheme5 = new Array(3).concat(
      "ef8a62f7f7f767a9cf",
      "ca0020f4a58292c5de0571b0",
      "ca0020f4a582f7f7f792c5de0571b0",
      "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
      "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
      "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
      "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
      "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
      "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
    ).map(colors_default);
    RdBu_default = ramp_default(scheme5);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6, RdGy_default;
var init_RdGy = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/RdGy.js"() {
    init_colors();
    init_ramp();
    scheme6 = new Array(3).concat(
      "ef8a62ffffff999999",
      "ca0020f4a582bababa404040",
      "ca0020f4a582ffffffbababa404040",
      "b2182bef8a62fddbc7e0e0e09999994d4d4d",
      "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
      "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
      "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
      "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
      "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
    ).map(colors_default);
    RdGy_default = ramp_default(scheme6);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7, RdYlBu_default;
var init_RdYlBu = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js"() {
    init_colors();
    init_ramp();
    scheme7 = new Array(3).concat(
      "fc8d59ffffbf91bfdb",
      "d7191cfdae61abd9e92c7bb6",
      "d7191cfdae61ffffbfabd9e92c7bb6",
      "d73027fc8d59fee090e0f3f891bfdb4575b4",
      "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
      "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
      "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
      "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
      "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
    ).map(colors_default);
    RdYlBu_default = ramp_default(scheme7);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8, RdYlGn_default;
var init_RdYlGn = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js"() {
    init_colors();
    init_ramp();
    scheme8 = new Array(3).concat(
      "fc8d59ffffbf91cf60",
      "d7191cfdae61a6d96a1a9641",
      "d7191cfdae61ffffbfa6d96a1a9641",
      "d73027fc8d59fee08bd9ef8b91cf601a9850",
      "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
      "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
      "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
      "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
      "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
    ).map(colors_default);
    RdYlGn_default = ramp_default(scheme8);
  }
});

// node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9, Spectral_default;
var init_Spectral = __esm({
  "node_modules/d3-scale-chromatic/src/diverging/Spectral.js"() {
    init_colors();
    init_ramp();
    scheme9 = new Array(3).concat(
      "fc8d59ffffbf99d594",
      "d7191cfdae61abdda42b83ba",
      "d7191cfdae61ffffbfabdda42b83ba",
      "d53e4ffc8d59fee08be6f59899d5943288bd",
      "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
      "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
      "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
      "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
      "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
    ).map(colors_default);
    Spectral_default = ramp_default(scheme9);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10, BuGn_default;
var init_BuGn = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js"() {
    init_colors();
    init_ramp();
    scheme10 = new Array(3).concat(
      "e5f5f999d8c92ca25f",
      "edf8fbb2e2e266c2a4238b45",
      "edf8fbb2e2e266c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
    ).map(colors_default);
    BuGn_default = ramp_default(scheme10);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11, BuPu_default;
var init_BuPu = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js"() {
    init_colors();
    init_ramp();
    scheme11 = new Array(3).concat(
      "e0ecf49ebcda8856a7",
      "edf8fbb3cde38c96c688419d",
      "edf8fbb3cde38c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
    ).map(colors_default);
    BuPu_default = ramp_default(scheme11);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12, GnBu_default;
var init_GnBu = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js"() {
    init_colors();
    init_ramp();
    scheme12 = new Array(3).concat(
      "e0f3dba8ddb543a2ca",
      "f0f9e8bae4bc7bccc42b8cbe",
      "f0f9e8bae4bc7bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
    ).map(colors_default);
    GnBu_default = ramp_default(scheme12);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13, OrRd_default;
var init_OrRd = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js"() {
    init_colors();
    init_ramp();
    scheme13 = new Array(3).concat(
      "fee8c8fdbb84e34a33",
      "fef0d9fdcc8afc8d59d7301f",
      "fef0d9fdcc8afc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
    ).map(colors_default);
    OrRd_default = ramp_default(scheme13);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14, PuBuGn_default;
var init_PuBuGn = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js"() {
    init_colors();
    init_ramp();
    scheme14 = new Array(3).concat(
      "ece2f0a6bddb1c9099",
      "f6eff7bdc9e167a9cf02818a",
      "f6eff7bdc9e167a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
    ).map(colors_default);
    PuBuGn_default = ramp_default(scheme14);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15, PuBu_default;
var init_PuBu = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js"() {
    init_colors();
    init_ramp();
    scheme15 = new Array(3).concat(
      "ece7f2a6bddb2b8cbe",
      "f1eef6bdc9e174a9cf0570b0",
      "f1eef6bdc9e174a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
    ).map(colors_default);
    PuBu_default = ramp_default(scheme15);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16, PuRd_default;
var init_PuRd = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js"() {
    init_colors();
    init_ramp();
    scheme16 = new Array(3).concat(
      "e7e1efc994c7dd1c77",
      "f1eef6d7b5d8df65b0ce1256",
      "f1eef6d7b5d8df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
    ).map(colors_default);
    PuRd_default = ramp_default(scheme16);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17, RdPu_default;
var init_RdPu = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js"() {
    init_colors();
    init_ramp();
    scheme17 = new Array(3).concat(
      "fde0ddfa9fb5c51b8a",
      "feebe2fbb4b9f768a1ae017e",
      "feebe2fbb4b9f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
    ).map(colors_default);
    RdPu_default = ramp_default(scheme17);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18, YlGnBu_default;
var init_YlGnBu = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js"() {
    init_colors();
    init_ramp();
    scheme18 = new Array(3).concat(
      "edf8b17fcdbb2c7fb8",
      "ffffcca1dab441b6c4225ea8",
      "ffffcca1dab441b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
    ).map(colors_default);
    YlGnBu_default = ramp_default(scheme18);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19, YlGn_default;
var init_YlGn = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js"() {
    init_colors();
    init_ramp();
    scheme19 = new Array(3).concat(
      "f7fcb9addd8e31a354",
      "ffffccc2e69978c679238443",
      "ffffccc2e69978c67931a354006837",
      "ffffccd9f0a3addd8e78c67931a354006837",
      "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
    ).map(colors_default);
    YlGn_default = ramp_default(scheme19);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20, YlOrBr_default;
var init_YlOrBr = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js"() {
    init_colors();
    init_ramp();
    scheme20 = new Array(3).concat(
      "fff7bcfec44fd95f0e",
      "ffffd4fed98efe9929cc4c02",
      "ffffd4fed98efe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
    ).map(colors_default);
    YlOrBr_default = ramp_default(scheme20);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21, YlOrRd_default;
var init_YlOrRd = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js"() {
    init_colors();
    init_ramp();
    scheme21 = new Array(3).concat(
      "ffeda0feb24cf03b20",
      "ffffb2fecc5cfd8d3ce31a1c",
      "ffffb2fecc5cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
    ).map(colors_default);
    YlOrRd_default = ramp_default(scheme21);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22, Blues_default;
var init_Blues = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-single/Blues.js"() {
    init_colors();
    init_ramp();
    scheme22 = new Array(3).concat(
      "deebf79ecae13182bd",
      "eff3ffbdd7e76baed62171b5",
      "eff3ffbdd7e76baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
    ).map(colors_default);
    Blues_default = ramp_default(scheme22);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23, Greens_default;
var init_Greens = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-single/Greens.js"() {
    init_colors();
    init_ramp();
    scheme23 = new Array(3).concat(
      "e5f5e0a1d99b31a354",
      "edf8e9bae4b374c476238b45",
      "edf8e9bae4b374c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
    ).map(colors_default);
    Greens_default = ramp_default(scheme23);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24, Greys_default;
var init_Greys = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-single/Greys.js"() {
    init_colors();
    init_ramp();
    scheme24 = new Array(3).concat(
      "f0f0f0bdbdbd636363",
      "f7f7f7cccccc969696525252",
      "f7f7f7cccccc969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
    ).map(colors_default);
    Greys_default = ramp_default(scheme24);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25, Purples_default;
var init_Purples = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-single/Purples.js"() {
    init_colors();
    init_ramp();
    scheme25 = new Array(3).concat(
      "efedf5bcbddc756bb1",
      "f2f0f7cbc9e29e9ac86a51a3",
      "f2f0f7cbc9e29e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
    ).map(colors_default);
    Purples_default = ramp_default(scheme25);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26, Reds_default;
var init_Reds = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-single/Reds.js"() {
    init_colors();
    init_ramp();
    scheme26 = new Array(3).concat(
      "fee0d2fc9272de2d26",
      "fee5d9fcae91fb6a4acb181d",
      "fee5d9fcae91fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
    ).map(colors_default);
    Reds_default = ramp_default(scheme26);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27, Oranges_default;
var init_Oranges = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js"() {
    init_colors();
    init_ramp();
    scheme27 = new Array(3).concat(
      "fee6cefdae6be6550d",
      "feeddefdbe85fd8d3cd94701",
      "feeddefdbe85fd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
    ).map(colors_default);
    Oranges_default = ramp_default(scheme27);
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}
var init_cividis = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js"() {
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2;
var init_cubehelix3 = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js"() {
    init_src3();
    init_src4();
    cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
function rainbow_default(t) {
  if (t < 0 || t > 1)
    t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c4.h = 360 * t - 100;
  c4.s = 1.5 - 1.5 * ts;
  c4.l = 0.8 - 0.9 * ts;
  return c4 + "";
}
var warm, cool, c4;
var init_rainbow = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js"() {
    init_src3();
    init_src4();
    warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    c4 = cubehelix();
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
function sinebow_default(t) {
  var x5;
  t = (0.5 - t) * Math.PI;
  c5.r = 255 * (x5 = Math.sin(t)) * x5;
  c5.g = 255 * (x5 = Math.sin(t + pi_1_3)) * x5;
  c5.b = 255 * (x5 = Math.sin(t + pi_2_3)) * x5;
  return c5 + "";
}
var c5, pi_1_3, pi_2_3;
var init_sinebow = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js"() {
    init_src3();
    c5 = rgb();
    pi_1_3 = Math.PI / 3;
    pi_2_3 = Math.PI * 2 / 3;
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}
var init_turbo = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js"() {
  }
});

// node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range2) {
  var n2 = range2.length;
  return function(t) {
    return range2[Math.max(0, Math.min(n2 - 1, Math.floor(t * n2)))];
  };
}
var viridis_default, magma, inferno, plasma;
var init_viridis = __esm({
  "node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"() {
    init_colors();
    viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
    magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
    inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
    plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
  }
});

// node_modules/d3-scale-chromatic/src/index.js
var src_exports9 = {};
__export(src_exports9, {
  interpolateBlues: () => Blues_default,
  interpolateBrBG: () => BrBG_default,
  interpolateBuGn: () => BuGn_default,
  interpolateBuPu: () => BuPu_default,
  interpolateCividis: () => cividis_default,
  interpolateCool: () => cool,
  interpolateCubehelixDefault: () => cubehelix_default2,
  interpolateGnBu: () => GnBu_default,
  interpolateGreens: () => Greens_default,
  interpolateGreys: () => Greys_default,
  interpolateInferno: () => inferno,
  interpolateMagma: () => magma,
  interpolateOrRd: () => OrRd_default,
  interpolateOranges: () => Oranges_default,
  interpolatePRGn: () => PRGn_default,
  interpolatePiYG: () => PiYG_default,
  interpolatePlasma: () => plasma,
  interpolatePuBu: () => PuBu_default,
  interpolatePuBuGn: () => PuBuGn_default,
  interpolatePuOr: () => PuOr_default,
  interpolatePuRd: () => PuRd_default,
  interpolatePurples: () => Purples_default,
  interpolateRainbow: () => rainbow_default,
  interpolateRdBu: () => RdBu_default,
  interpolateRdGy: () => RdGy_default,
  interpolateRdPu: () => RdPu_default,
  interpolateRdYlBu: () => RdYlBu_default,
  interpolateRdYlGn: () => RdYlGn_default,
  interpolateReds: () => Reds_default,
  interpolateSinebow: () => sinebow_default,
  interpolateSpectral: () => Spectral_default,
  interpolateTurbo: () => turbo_default,
  interpolateViridis: () => viridis_default,
  interpolateWarm: () => warm,
  interpolateYlGn: () => YlGn_default,
  interpolateYlGnBu: () => YlGnBu_default,
  interpolateYlOrBr: () => YlOrBr_default,
  interpolateYlOrRd: () => YlOrRd_default,
  schemeAccent: () => Accent_default,
  schemeBlues: () => scheme22,
  schemeBrBG: () => scheme,
  schemeBuGn: () => scheme10,
  schemeBuPu: () => scheme11,
  schemeCategory10: () => category10_default,
  schemeDark2: () => Dark2_default,
  schemeGnBu: () => scheme12,
  schemeGreens: () => scheme23,
  schemeGreys: () => scheme24,
  schemeOrRd: () => scheme13,
  schemeOranges: () => scheme27,
  schemePRGn: () => scheme2,
  schemePaired: () => Paired_default,
  schemePastel1: () => Pastel1_default,
  schemePastel2: () => Pastel2_default,
  schemePiYG: () => scheme3,
  schemePuBu: () => scheme15,
  schemePuBuGn: () => scheme14,
  schemePuOr: () => scheme4,
  schemePuRd: () => scheme16,
  schemePurples: () => scheme25,
  schemeRdBu: () => scheme5,
  schemeRdGy: () => scheme6,
  schemeRdPu: () => scheme17,
  schemeRdYlBu: () => scheme7,
  schemeRdYlGn: () => scheme8,
  schemeReds: () => scheme26,
  schemeSet1: () => Set1_default,
  schemeSet2: () => Set2_default,
  schemeSet3: () => Set3_default,
  schemeSpectral: () => scheme9,
  schemeTableau10: () => Tableau10_default,
  schemeYlGn: () => scheme19,
  schemeYlGnBu: () => scheme18,
  schemeYlOrBr: () => scheme20,
  schemeYlOrRd: () => scheme21
});
var init_src15 = __esm({
  "node_modules/d3-scale-chromatic/src/index.js"() {
    init_category10();
    init_Accent();
    init_Dark2();
    init_Paired();
    init_Pastel1();
    init_Pastel2();
    init_Set1();
    init_Set2();
    init_Set3();
    init_Tableau10();
    init_BrBG();
    init_PRGn();
    init_PiYG();
    init_PuOr();
    init_RdBu();
    init_RdGy();
    init_RdYlBu();
    init_RdYlGn();
    init_Spectral();
    init_BuGn();
    init_BuPu();
    init_GnBu();
    init_OrRd();
    init_PuBuGn();
    init_PuBu();
    init_PuRd();
    init_RdPu();
    init_YlGnBu();
    init_YlGn();
    init_YlOrBr();
    init_YlOrRd();
    init_Blues();
    init_Greens();
    init_Greys();
    init_Purples();
    init_Reds();
    init_Oranges();
    init_cividis();
    init_cubehelix3();
    init_rainbow();
    init_sinebow();
    init_turbo();
    init_viridis();
  }
});

// node_modules/d3-dispatch/src/dispatch.js
function dispatch() {
  for (var i3 = 0, n2 = arguments.length, _3 = {}, t; i3 < n2; ++i3) {
    if (!(t = arguments[i3] + "") || t in _3 || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _3[t] = [];
  }
  return new Dispatch(_3);
}
function Dispatch(_3) {
  this._ = _3;
}
function parseTypenames2(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i3 = t.indexOf(".");
    if (i3 >= 0)
      name = t.slice(i3 + 1), t = t.slice(0, i3);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
function get(type2, name) {
  for (var i3 = 0, n2 = type2.length, c6; i3 < n2; ++i3) {
    if ((c6 = type2[i3]).name === name) {
      return c6.value;
    }
  }
}
function set2(type2, name, callback) {
  for (var i3 = 0, n2 = type2.length; i3 < n2; ++i3) {
    if (type2[i3].name === name) {
      type2[i3] = noop, type2 = type2.slice(0, i3).concat(type2.slice(i3 + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var noop, dispatch_default2;
var init_dispatch2 = __esm({
  "node_modules/d3-dispatch/src/dispatch.js"() {
    noop = { value: () => {
    } };
    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _3 = this._, T3 = parseTypenames2(typename + "", _3), t, i3 = -1, n2 = T3.length;
        if (arguments.length < 2) {
          while (++i3 < n2)
            if ((t = (typename = T3[i3]).type) && (t = get(_3[t], typename.name)))
              return t;
          return;
        }
        if (callback != null && typeof callback !== "function")
          throw new Error("invalid callback: " + callback);
        while (++i3 < n2) {
          if (t = (typename = T3[i3]).type)
            _3[t] = set2(_3[t], typename.name, callback);
          else if (callback == null)
            for (t in _3)
              _3[t] = set2(_3[t], typename.name, null);
        }
        return this;
      },
      copy: function() {
        var copy4 = {}, _3 = this._;
        for (var t in _3)
          copy4[t] = _3[t].slice();
        return new Dispatch(copy4);
      },
      call: function(type2, that) {
        if ((n2 = arguments.length - 2) > 0)
          for (var args = new Array(n2), i3 = 0, n2, t; i3 < n2; ++i3)
            args[i3] = arguments[i3 + 2];
        if (!this._.hasOwnProperty(type2))
          throw new Error("unknown type: " + type2);
        for (t = this._[type2], i3 = 0, n2 = t.length; i3 < n2; ++i3)
          t[i3].value.apply(that, args);
      },
      apply: function(type2, that, args) {
        if (!this._.hasOwnProperty(type2))
          throw new Error("unknown type: " + type2);
        for (var t = this._[type2], i3 = 0, n2 = t.length; i3 < n2; ++i3)
          t[i3].value.apply(that, args);
      }
    };
    dispatch_default2 = dispatch;
  }
});

// node_modules/d3-dispatch/src/index.js
var src_exports10 = {};
__export(src_exports10, {
  dispatch: () => dispatch_default2
});
var init_src16 = __esm({
  "node_modules/d3-dispatch/src/index.js"() {
    init_dispatch2();
  }
});

// node_modules/d3-drag/src/noevent.js
function nopropagation(event2) {
  event2.stopImmediatePropagation();
}
function noevent_default(event2) {
  event2.preventDefault();
  event2.stopImmediatePropagation();
}
var nonpassive, nonpassivecapture;
var init_noevent = __esm({
  "node_modules/d3-drag/src/noevent.js"() {
    nonpassive = { passive: false };
    nonpassivecapture = { capture: true, passive: false };
  }
});

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root3 = view.document.documentElement, selection3 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root3) {
    selection3.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root3.__noselect = root3.style.MozUserSelect;
    root3.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root3 = view.document.documentElement, selection3 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection3.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection3.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root3) {
    selection3.on("selectstart.drag", null);
  } else {
    root3.style.MozUserSelect = root3.__noselect;
    delete root3.__noselect;
  }
}
var init_nodrag = __esm({
  "node_modules/d3-drag/src/nodrag.js"() {
    init_src13();
    init_noevent();
  }
});

// node_modules/d3-drag/src/constant.js
var constant_default4;
var init_constant6 = __esm({
  "node_modules/d3-drag/src/constant.js"() {
    constant_default4 = (x5) => () => x5;
  }
});

// node_modules/d3-drag/src/event.js
function DragEvent(type2, {
  sourceEvent,
  subject,
  target,
  identifier,
  active,
  x: x5,
  y: y4,
  dx,
  dy,
  dispatch: dispatch3
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    subject: { value: subject, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    identifier: { value: identifier, enumerable: true, configurable: true },
    active: { value: active, enumerable: true, configurable: true },
    x: { value: x5, enumerable: true, configurable: true },
    y: { value: y4, enumerable: true, configurable: true },
    dx: { value: dx, enumerable: true, configurable: true },
    dy: { value: dy, enumerable: true, configurable: true },
    _: { value: dispatch3 }
  });
}
var init_event = __esm({
  "node_modules/d3-drag/src/event.js"() {
    DragEvent.prototype.on = function() {
      var value = this._.on.apply(this._, arguments);
      return value === this._ ? this : value;
    };
  }
});

// node_modules/d3-drag/src/drag.js
function defaultFilter(event2) {
  return !event2.ctrlKey && !event2.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(event2, d2) {
  return d2 == null ? { x: event2.x, y: event2.y } : d2;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter3 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default2("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection3) {
    selection3.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned(event2, d2) {
    if (touchending || !filter3.call(this, event2, d2))
      return;
    var gesture = beforestart(this, container.call(this, event2, d2), event2, d2, "mouse");
    if (!gesture)
      return;
    select_default2(event2.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
    nodrag_default(event2.view);
    nopropagation(event2);
    mousemoving = false;
    mousedownx = event2.clientX;
    mousedowny = event2.clientY;
    gesture("start", event2);
  }
  function mousemoved(event2) {
    noevent_default(event2);
    if (!mousemoving) {
      var dx = event2.clientX - mousedownx, dy = event2.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag", event2);
  }
  function mouseupped(event2) {
    select_default2(event2.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event2.view, mousemoving);
    noevent_default(event2);
    gestures.mouse("end", event2);
  }
  function touchstarted(event2, d2) {
    if (!filter3.call(this, event2, d2))
      return;
    var touches = event2.changedTouches, c6 = container.call(this, event2, d2), n2 = touches.length, i3, gesture;
    for (i3 = 0; i3 < n2; ++i3) {
      if (gesture = beforestart(this, c6, event2, d2, touches[i3].identifier, touches[i3])) {
        nopropagation(event2);
        gesture("start", event2, touches[i3]);
      }
    }
  }
  function touchmoved(event2) {
    var touches = event2.changedTouches, n2 = touches.length, i3, gesture;
    for (i3 = 0; i3 < n2; ++i3) {
      if (gesture = gestures[touches[i3].identifier]) {
        noevent_default(event2);
        gesture("drag", event2, touches[i3]);
      }
    }
  }
  function touchended(event2) {
    var touches = event2.changedTouches, n2 = touches.length, i3, gesture;
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i3 = 0; i3 < n2; ++i3) {
      if (gesture = gestures[touches[i3].identifier]) {
        nopropagation(event2);
        gesture("end", event2, touches[i3]);
      }
    }
  }
  function beforestart(that, container2, event2, d2, identifier, touch) {
    var dispatch3 = listeners.copy(), p2 = pointer_default(touch || event2, container2), dx, dy, s2;
    if ((s2 = subject.call(that, new DragEvent("beforestart", {
      sourceEvent: event2,
      target: drag,
      identifier,
      active,
      x: p2[0],
      y: p2[1],
      dx: 0,
      dy: 0,
      dispatch: dispatch3
    }), d2)) == null)
      return;
    dx = s2.x - p2[0] || 0;
    dy = s2.y - p2[1] || 0;
    return function gesture(type2, event3, touch2) {
      var p0 = p2, n2;
      switch (type2) {
        case "start":
          gestures[identifier] = gesture, n2 = active++;
          break;
        case "end":
          delete gestures[identifier], --active;
        case "drag":
          p2 = pointer_default(touch2 || event3, container2), n2 = active;
          break;
      }
      dispatch3.call(
        type2,
        that,
        new DragEvent(type2, {
          sourceEvent: event3,
          subject: s2,
          target: drag,
          identifier,
          active: n2,
          x: p2[0] + dx,
          y: p2[1] + dy,
          dx: p2[0] - p0[0],
          dy: p2[1] - p0[1],
          dispatch: dispatch3
        }),
        d2
      );
    };
  }
  drag.filter = function(_3) {
    return arguments.length ? (filter3 = typeof _3 === "function" ? _3 : constant_default4(!!_3), drag) : filter3;
  };
  drag.container = function(_3) {
    return arguments.length ? (container = typeof _3 === "function" ? _3 : constant_default4(_3), drag) : container;
  };
  drag.subject = function(_3) {
    return arguments.length ? (subject = typeof _3 === "function" ? _3 : constant_default4(_3), drag) : subject;
  };
  drag.touchable = function(_3) {
    return arguments.length ? (touchable = typeof _3 === "function" ? _3 : constant_default4(!!_3), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_3) {
    return arguments.length ? (clickDistance2 = (_3 = +_3) * _3, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}
var init_drag = __esm({
  "node_modules/d3-drag/src/drag.js"() {
    init_src16();
    init_src13();
    init_nodrag();
    init_noevent();
    init_constant6();
    init_event();
  }
});

// node_modules/d3-drag/src/index.js
var init_src17 = __esm({
  "node_modules/d3-drag/src/index.js"() {
    init_drag();
    init_nodrag();
  }
});

// node_modules/d3-timer/src/timer.js
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
function timer(callback, delay, time2) {
  var t = new Timer();
  t.restart(callback, delay, time2);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t02, t12 = taskHead, t2, time2 = Infinity;
  while (t12) {
    if (t12._call) {
      if (time2 > t12._time)
        time2 = t12._time;
      t02 = t12, t12 = t12._next;
    } else {
      t2 = t12._next, t12._next = null;
      t12 = t02 ? t02._next = t2 : taskHead = t2;
    }
  }
  taskTail = t02;
  sleep(time2);
}
function sleep(time2) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity)
      timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
var frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame;
var init_timer = __esm({
  "node_modules/d3-timer/src/timer.js"() {
    frame = 0;
    timeout = 0;
    interval = 0;
    pokeDelay = 1e3;
    clockLast = 0;
    clockNow = 0;
    clockSkew = 0;
    clock = typeof performance === "object" && performance.now ? performance : Date;
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f3) {
      setTimeout(f3, 17);
    };
    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time2) {
        if (typeof callback !== "function")
          throw new TypeError("callback is not a function");
        time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail)
            taskTail._next = this;
          else
            taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time2;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };
  }
});

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t;
}
var init_timeout = __esm({
  "node_modules/d3-timer/src/timeout.js"() {
    init_timer();
  }
});

// node_modules/d3-timer/src/index.js
var init_src18 = __esm({
  "node_modules/d3-timer/src/index.js"() {
    init_timer();
    init_timeout();
  }
});

// node_modules/d3-transition/src/transition/schedule.js
function schedule_default(node, name, id2, index2, group2, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index2,
    group: group2,
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set3(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i3, j5, n2, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i3 in schedules) {
      o = schedules[i3];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i3];
      } else if (+i3 < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i3];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n2 = self2.tween.length);
    for (i3 = 0, j5 = -1; i3 < n2; ++i3) {
      if (o = self2.tween[i3].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j5] = o;
      }
    }
    tween.length = j5 + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i3 = -1, n2 = tween.length;
    while (++i3 < n2) {
      tween[i3].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i3 in schedules)
      return;
    delete node.__transition;
  }
}
var emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED;
var init_schedule = __esm({
  "node_modules/d3-transition/src/transition/schedule.js"() {
    init_src16();
    init_src18();
    emptyOn = dispatch_default2("start", "end", "cancel", "interrupt");
    emptyTween = [];
    CREATED = 0;
    SCHEDULED = 1;
    STARTING = 2;
    STARTED = 3;
    RUNNING = 4;
    ENDING = 5;
    ENDED = 6;
  }
});

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty5 = true, i3;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i3 in schedules) {
    if ((schedule = schedules[i3]).name !== name) {
      empty5 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i3];
  }
  if (empty5)
    delete node.__transition;
}
var init_interrupt = __esm({
  "node_modules/d3-transition/src/interrupt.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}
var init_interrupt2 = __esm({
  "node_modules/d3-transition/src/selection/interrupt.js"() {
    init_interrupt();
  }
});

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set3(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i3 = 0, n2 = tween1.length; i3 < n2; ++i3) {
        if (tween1[i3].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i3, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set3(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i3 = 0, n2 = tween1.length; i3 < n2; ++i3) {
        if (tween1[i3].name === name) {
          tween1[i3] = t;
          break;
        }
      }
      if (i3 === n2)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i3 = 0, n2 = tween.length, t; i3 < n2; ++i3) {
      if ((t = tween[i3]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set3(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}
var init_tween = __esm({
  "node_modules/d3-transition/src/transition/tween.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a4, b4) {
  var c6;
  return (typeof b4 === "number" ? number_default : b4 instanceof color ? rgb_default : (c6 = color(b4)) ? (b4 = c6, rgb_default) : string_default)(a4, b4);
}
var init_interpolate = __esm({
  "node_modules/d3-transition/src/transition/interpolate.js"() {
    init_src3();
    init_src4();
  }
});

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i3 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i3, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i3, value));
}
var init_attr2 = __esm({
  "node_modules/d3-transition/src/transition/attr.js"() {
    init_src4();
    init_src13();
    init_tween();
    init_interpolate();
  }
});

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i3) {
  return function(t) {
    this.setAttribute(name, i3.call(this, t));
  };
}
function attrInterpolateNS(fullname, i3) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i3.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t02, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t02 = (i0 = i3) && attrInterpolateNS(fullname, i3);
    return t02;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t02, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t02 = (i0 = i3) && attrInterpolate(name, i3);
    return t02;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
var init_attrTween = __esm({
  "node_modules/d3-transition/src/transition/attrTween.js"() {
    init_src13();
  }
});

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}
var init_delay = __esm({
  "node_modules/d3-transition/src/transition/delay.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set3(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set3(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}
var init_duration2 = __esm({
  "node_modules/d3-transition/src/transition/duration.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set3(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}
var init_ease = __esm({
  "node_modules/d3-transition/src/transition/ease.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (typeof v2 !== "function")
      throw new Error();
    set3(this, id2).ease = v2;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}
var init_easeVarying = __esm({
  "node_modules/d3-transition/src/transition/easeVarying.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, subgroup = subgroups[j5] = [], node, i3 = 0; i3 < n2; ++i3) {
      if ((node = group2[i3]) && match.call(node, node.__data__, i3, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}
var init_filter3 = __esm({
  "node_modules/d3-transition/src/transition/filter.js"() {
    init_src13();
    init_transition2();
  }
});

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j5 = 0; j5 < m2; ++j5) {
    for (var group0 = groups0[j5], group1 = groups1[j5], n2 = group0.length, merge2 = merges[j5] = new Array(n2), node, i3 = 0; i3 < n2; ++i3) {
      if (node = group0[i3] || group1[i3]) {
        merge2[i3] = node;
      }
    }
  }
  for (; j5 < m0; ++j5) {
    merges[j5] = groups0[j5];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}
var init_merge3 = __esm({
  "node_modules/d3-transition/src/transition/merge.js"() {
    init_transition2();
  }
});

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i3 = t.indexOf(".");
    if (i3 >= 0)
      t = t.slice(0, i3);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set3;
  return function() {
    var schedule = sit(this, id2), on2 = schedule.on;
    if (on2 !== on0)
      (on1 = (on0 = on2).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}
var init_on2 = __esm({
  "node_modules/d3-transition/src/transition/on.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i3 in this.__transition)
      if (+i3 !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}
var init_remove2 = __esm({
  "node_modules/d3-transition/src/transition/remove.js"() {
  }
});

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, subgroup = subgroups[j5] = new Array(n2), node, subnode, i3 = 0; i3 < n2; ++i3) {
      if ((node = group2[i3]) && (subnode = select.call(node, node.__data__, i3, group2))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i3] = subnode;
        schedule_default(subgroup[i3], name, id2, i3, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}
var init_select3 = __esm({
  "node_modules/d3-transition/src/transition/select.js"() {
    init_src13();
    init_transition2();
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents = [], j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        for (var children2 = select.call(node, node.__data__, i3, group2), child, inherit2 = get2(node, id2), k4 = 0, l = children2.length; k4 < l; ++k4) {
          if (child = children2[k4]) {
            schedule_default(child, name, id2, k4, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}
var init_selectAll3 = __esm({
  "node_modules/d3-transition/src/transition/selectAll.js"() {
    init_src13();
    init_transition2();
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/selection.js
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}
var Selection2;
var init_selection2 = __esm({
  "node_modules/d3-transition/src/transition/selection.js"() {
    init_src13();
    Selection2 = selection_default.prototype.constructor;
  }
});

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event2 = "end." + key, remove3;
  return function() {
    var schedule = set3(this, id2), on2 = schedule.on, listener = schedule.value[key] == null ? remove3 || (remove3 = styleRemove2(name)) : void 0;
    if (on2 !== on0 || listener0 !== listener)
      (on1 = (on0 = on2).copy()).on(event2, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i3 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i3)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i3, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i3, value), priority).on("end.style." + name, null);
}
var init_style2 = __esm({
  "node_modules/d3-transition/src/transition/style.js"() {
    init_src4();
    init_src13();
    init_schedule();
    init_tween();
    init_interpolate();
  }
});

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i3, priority) {
  return function(t) {
    this.style.setProperty(name, i3.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t = (i0 = i3) && styleInterpolate(name, i3, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
var init_styleTween = __esm({
  "node_modules/d3-transition/src/transition/styleTween.js"() {
  }
});

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default3(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}
var init_text3 = __esm({
  "node_modules/d3-transition/src/transition/text.js"() {
    init_tween();
  }
});

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i3) {
  return function(t) {
    this.textContent = i3.call(this, t);
  };
}
function textTween(value) {
  var t02, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t02 = (i0 = i3) && textInterpolate(i3);
    return t02;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}
var init_textTween = __esm({
  "node_modules/d3-transition/src/transition/textTween.js"() {
  }
});

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups2 = this._groups, m2 = groups2.length, j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i3, group2, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups2, this._parents, name, id1);
}
var init_transition = __esm({
  "node_modules/d3-transition/src/transition/transition.js"() {
    init_transition2();
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set3(this, id2), on2 = schedule.on;
      if (on2 !== on0) {
        on1 = (on0 = on2).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}
var init_end = __esm({
  "node_modules/d3-transition/src/transition/end.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/index.js
function Transition(groups2, parents, name, id2) {
  this._groups = groups2;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var id, selection_prototype;
var init_transition2 = __esm({
  "node_modules/d3-transition/src/transition/index.js"() {
    init_src13();
    init_attr2();
    init_attrTween();
    init_delay();
    init_duration2();
    init_ease();
    init_easeVarying();
    init_filter3();
    init_merge3();
    init_on2();
    init_remove2();
    init_select3();
    init_selectAll3();
    init_selection2();
    init_style2();
    init_styleTween();
    init_text3();
    init_textTween();
    init_transition();
    init_tween();
    init_end();
    id = 0;
    selection_prototype = selection_default.prototype;
    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: select_default3,
      selectAll: selectAll_default3,
      selectChild: selection_prototype.selectChild,
      selectChildren: selection_prototype.selectChildren,
      filter: filter_default2,
      merge: merge_default2,
      selection: selection_default2,
      transition: transition_default,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: on_default2,
      attr: attr_default2,
      attrTween: attrTween_default,
      style: style_default2,
      styleTween: styleTween_default,
      text: text_default3,
      textTween: textTween_default,
      remove: remove_default2,
      tween: tween_default,
      delay: delay_default,
      duration: duration_default,
      ease: ease_default,
      easeVarying: easeVarying_default,
      end: end_default,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };
  }
});

// node_modules/d3-ease/src/cubic.js
function cubicOut(t) {
  return --t * t * t + 1;
}
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
var init_cubic = __esm({
  "node_modules/d3-ease/src/cubic.js"() {
  }
});

// node_modules/d3-ease/src/index.js
var init_src19 = __esm({
  "node_modules/d3-ease/src/index.js"() {
    init_cubic();
  }
});

// node_modules/d3-transition/src/selection/transition.js
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups2 = this._groups, m2 = groups2.length, j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        schedule_default(node, name, id2, i3, group2, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups2, this._parents, name, id2);
}
var defaultTiming;
var init_transition3 = __esm({
  "node_modules/d3-transition/src/selection/transition.js"() {
    init_transition2();
    init_schedule();
    init_src19();
    init_src18();
    defaultTiming = {
      time: null,
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };
  }
});

// node_modules/d3-transition/src/selection/index.js
var init_selection3 = __esm({
  "node_modules/d3-transition/src/selection/index.js"() {
    init_src13();
    init_interrupt2();
    init_transition3();
    selection_default.prototype.interrupt = interrupt_default2;
    selection_default.prototype.transition = transition_default2;
  }
});

// node_modules/d3-transition/src/index.js
var init_src20 = __esm({
  "node_modules/d3-transition/src/index.js"() {
    init_selection3();
    init_interrupt();
  }
});

// node_modules/d3-brush/src/constant.js
var constant_default5;
var init_constant7 = __esm({
  "node_modules/d3-brush/src/constant.js"() {
    constant_default5 = (x5) => () => x5;
  }
});

// node_modules/d3-brush/src/event.js
function BrushEvent(type2, {
  sourceEvent,
  target,
  selection: selection3,
  mode: mode2,
  dispatch: dispatch3
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    selection: { value: selection3, enumerable: true, configurable: true },
    mode: { value: mode2, enumerable: true, configurable: true },
    _: { value: dispatch3 }
  });
}
var init_event2 = __esm({
  "node_modules/d3-brush/src/event.js"() {
  }
});

// node_modules/d3-brush/src/noevent.js
function nopropagation2(event2) {
  event2.stopImmediatePropagation();
}
function noevent_default2(event2) {
  event2.preventDefault();
  event2.stopImmediatePropagation();
}
var init_noevent2 = __esm({
  "node_modules/d3-brush/src/noevent.js"() {
  }
});

// node_modules/d3-brush/src/brush.js
function number1(e) {
  return [+e[0], +e[1]];
}
function number22(e) {
  return [number1(e[0]), number1(e[1])];
}
function type(t) {
  return { type: t };
}
function defaultFilter2(event2) {
  return !event2.ctrlKey && !event2.button;
}
function defaultExtent() {
  var svg2 = this.ownerSVGElement || this;
  if (svg2.hasAttribute("viewBox")) {
    svg2 = svg2.viewBox.baseVal;
    return [[svg2.x, svg2.y], [svg2.x + svg2.width, svg2.y + svg2.height]];
  }
  return [[0, 0], [svg2.width.baseVal.value, svg2.height.baseVal.value]];
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function local2(node) {
  while (!node.__brush)
    if (!(node = node.parentNode))
      return;
  return node.__brush;
}
function empty3(extent2) {
  return extent2[0][0] === extent2[1][0] || extent2[0][1] === extent2[1][1];
}
function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}
function brushX() {
  return brush(X4);
}
function brushY() {
  return brush(Y5);
}
function brush_default() {
  return brush(XY);
}
function brush(dim) {
  var extent2 = defaultExtent, filter3 = defaultFilter2, touchable = defaultTouchable2, keys = true, listeners = dispatch_default2("start", "brush", "end"), handleSize = 6, touchending;
  function brush2(group2) {
    var overlay = group2.property("__brush", initialize2).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
      var extent3 = local2(this).extent;
      select_default2(this).attr("x", extent3[0][0]).attr("y", extent3[0][1]).attr("width", extent3[1][0] - extent3[0][0]).attr("height", extent3[1][1] - extent3[0][1]);
    });
    group2.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group2.selectAll(".handle").data(dim.handles, function(d2) {
      return d2.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function(d2) {
      return "handle handle--" + d2.type;
    }).attr("cursor", function(d2) {
      return cursors[d2.type];
    });
    group2.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  brush2.move = function(group2, selection3, event2) {
    if (group2.tween) {
      group2.on("start.brush", function(event3) {
        emitter(this, arguments).beforestart().start(event3);
      }).on("interrupt.brush end.brush", function(event3) {
        emitter(this, arguments).end(event3);
      }).tween("brush", function() {
        var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection3 === "function" ? selection3.apply(this, arguments) : selection3, state.extent), i3 = value_default(selection0, selection1);
        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i3(t);
          redraw.call(that);
          emit.brush();
        }
        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group2.each(function() {
        var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection3 === "function" ? selection3.apply(that, args) : selection3, state.extent), emit = emitter(that, args).beforestart();
        interrupt_default(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start(event2).brush(event2).end(event2);
      });
    }
  };
  brush2.clear = function(group2, event2) {
    brush2.move(group2, null, event2);
  };
  function redraw() {
    var group2 = select_default2(this), selection3 = local2(this).selection;
    if (selection3) {
      group2.selectAll(".selection").style("display", null).attr("x", selection3[0][0]).attr("y", selection3[0][1]).attr("width", selection3[1][0] - selection3[0][0]).attr("height", selection3[1][1] - selection3[0][1]);
      group2.selectAll(".handle").style("display", null).attr("x", function(d2) {
        return d2.type[d2.type.length - 1] === "e" ? selection3[1][0] - handleSize / 2 : selection3[0][0] - handleSize / 2;
      }).attr("y", function(d2) {
        return d2.type[0] === "s" ? selection3[1][1] - handleSize / 2 : selection3[0][1] - handleSize / 2;
      }).attr("width", function(d2) {
        return d2.type === "n" || d2.type === "s" ? selection3[1][0] - selection3[0][0] + handleSize : handleSize;
      }).attr("height", function(d2) {
        return d2.type === "e" || d2.type === "w" ? selection3[1][1] - selection3[0][1] + handleSize : handleSize;
      });
    } else {
      group2.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }
  function emitter(that, args, clean) {
    var emit = that.__brush.emitter;
    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
  }
  function Emitter(that, args, clean) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
    this.clean = clean;
  }
  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1)
        this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function(event2, mode2) {
      if (this.starting)
        this.starting = false, this.emit("start", event2, mode2);
      else
        this.emit("brush", event2);
      return this;
    },
    brush: function(event2, mode2) {
      this.emit("brush", event2, mode2);
      return this;
    },
    end: function(event2, mode2) {
      if (--this.active === 0)
        delete this.state.emitter, this.emit("end", event2, mode2);
      return this;
    },
    emit: function(type2, event2, mode2) {
      var d2 = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new BrushEvent(type2, {
          sourceEvent: event2,
          target: brush2,
          selection: dim.output(this.state.selection),
          mode: mode2,
          dispatch: listeners
        }),
        d2
      );
    }
  };
  function started(event2) {
    if (touchending && !event2.touches)
      return;
    if (!filter3.apply(this, arguments))
      return;
    var that = this, type2 = event2.target.__data__.type, mode2 = (keys && event2.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys && event2.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y5 ? null : signsX[type2], signY = dim === X4 ? null : signsY[type2], state = local2(that), extent3 = state.extent, selection3 = state.selection, W4 = extent3[0][0], w0, w1, N6 = extent3[0][1], n0, n1, E6 = extent3[1][0], e0, e1, S5 = extent3[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event2.shiftKey, lockX, lockY, points = Array.from(event2.touches || [event2], (t) => {
      const i3 = t.identifier;
      t = pointer_default(t, that);
      t.point0 = t.slice();
      t.identifier = i3;
      return t;
    });
    interrupt_default(that);
    var emit = emitter(that, arguments, true).beforestart();
    if (type2 === "overlay") {
      if (selection3)
        moving = true;
      const pts = [points[0], points[1] || points[0]];
      state.selection = selection3 = [[
        w0 = dim === Y5 ? W4 : min3(pts[0][0], pts[1][0]),
        n0 = dim === X4 ? N6 : min3(pts[0][1], pts[1][1])
      ], [
        e0 = dim === Y5 ? E6 : max4(pts[0][0], pts[1][0]),
        s0 = dim === X4 ? S5 : max4(pts[0][1], pts[1][1])
      ]];
      if (points.length > 1)
        move(event2);
    } else {
      w0 = selection3[0][0];
      n0 = selection3[0][1];
      e0 = selection3[1][0];
      s0 = selection3[1][1];
    }
    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group2 = select_default2(that).attr("pointer-events", "none");
    var overlay = group2.selectAll(".overlay").attr("cursor", cursors[type2]);
    if (event2.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = select_default2(event2.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys)
        view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      nodrag_default(event2.view);
    }
    redraw.call(that);
    emit.start(event2, mode2.name);
    function moved(event3) {
      for (const p2 of event3.changedTouches || [event3]) {
        for (const d2 of points)
          if (d2.identifier === p2.identifier)
            d2.cur = pointer_default(p2, that);
      }
      if (shifting && !lockX && !lockY && points.length === 1) {
        const point7 = points[0];
        if (abs2(point7.cur[0] - point7[0]) > abs2(point7.cur[1] - point7[1]))
          lockY = true;
        else
          lockX = true;
      }
      for (const point7 of points)
        if (point7.cur)
          point7[0] = point7.cur[0], point7[1] = point7.cur[1];
      moving = true;
      noevent_default2(event3);
      move(event3);
    }
    function move(event3) {
      const point7 = points[0], point0 = point7.point0;
      var t;
      dx = point7[0] - point0[0];
      dy = point7[1] - point0[1];
      switch (mode2) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX)
            dx = max4(W4 - w0, min3(E6 - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY)
            dy = max4(N6 - n0, min3(S5 - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (points[1]) {
            if (signX)
              w1 = max4(W4, min3(E6, points[0][0])), e1 = max4(W4, min3(E6, points[1][0])), signX = 1;
            if (signY)
              n1 = max4(N6, min3(S5, points[0][1])), s1 = max4(N6, min3(S5, points[1][1])), signY = 1;
          } else {
            if (signX < 0)
              dx = max4(W4 - w0, min3(E6 - w0, dx)), w1 = w0 + dx, e1 = e0;
            else if (signX > 0)
              dx = max4(W4 - e0, min3(E6 - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0)
              dy = max4(N6 - n0, min3(S5 - n0, dy)), n1 = n0 + dy, s1 = s0;
            else if (signY > 0)
              dy = max4(N6 - s0, min3(S5 - s0, dy)), n1 = n0, s1 = s0 + dy;
          }
          break;
        }
        case MODE_CENTER: {
          if (signX)
            w1 = max4(W4, min3(E6, w0 - dx * signX)), e1 = max4(W4, min3(E6, e0 + dx * signX));
          if (signY)
            n1 = max4(N6, min3(S5, n0 - dy * signY)), s1 = max4(N6, min3(S5, s0 + dy * signY));
          break;
        }
      }
      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type2 in flipX)
          overlay.attr("cursor", cursors[type2 = flipX[type2]]);
      }
      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type2 in flipY)
          overlay.attr("cursor", cursors[type2 = flipY[type2]]);
      }
      if (state.selection)
        selection3 = state.selection;
      if (lockX)
        w1 = selection3[0][0], e1 = selection3[1][0];
      if (lockY)
        n1 = selection3[0][1], s1 = selection3[1][1];
      if (selection3[0][0] !== w1 || selection3[0][1] !== n1 || selection3[1][0] !== e1 || selection3[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush(event3, mode2.name);
      }
    }
    function ended(event3) {
      nopropagation2(event3);
      if (event3.touches) {
        if (event3.touches.length)
          return;
        if (touchending)
          clearTimeout(touchending);
        touchending = setTimeout(function() {
          touchending = null;
        }, 500);
      } else {
        yesdrag(event3.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group2.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection)
        selection3 = state.selection;
      if (empty3(selection3))
        state.selection = null, redraw.call(that);
      emit.end(event3, mode2.name);
    }
    function keydowned(event3) {
      switch (event3.keyCode) {
        case 16: {
          shifting = signX && signY;
          break;
        }
        case 18: {
          if (mode2 === MODE_HANDLE) {
            if (signX)
              e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY)
              s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode2 = MODE_CENTER;
            move(event3);
          }
          break;
        }
        case 32: {
          if (mode2 === MODE_HANDLE || mode2 === MODE_CENTER) {
            if (signX < 0)
              e0 = e1 - dx;
            else if (signX > 0)
              w0 = w1 - dx;
            if (signY < 0)
              s0 = s1 - dy;
            else if (signY > 0)
              n0 = n1 - dy;
            mode2 = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move(event3);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event3);
    }
    function keyupped(event3) {
      switch (event3.keyCode) {
        case 16: {
          if (shifting) {
            lockX = lockY = shifting = false;
            move(event3);
          }
          break;
        }
        case 18: {
          if (mode2 === MODE_CENTER) {
            if (signX < 0)
              e0 = e1;
            else if (signX > 0)
              w0 = w1;
            if (signY < 0)
              s0 = s1;
            else if (signY > 0)
              n0 = n1;
            mode2 = MODE_HANDLE;
            move(event3);
          }
          break;
        }
        case 32: {
          if (mode2 === MODE_SPACE) {
            if (event3.altKey) {
              if (signX)
                e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY)
                s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode2 = MODE_CENTER;
            } else {
              if (signX < 0)
                e0 = e1;
              else if (signX > 0)
                w0 = w1;
              if (signY < 0)
                s0 = s1;
              else if (signY > 0)
                n0 = n1;
              mode2 = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type2]);
            move(event3);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event3);
    }
  }
  function touchmoved(event2) {
    emitter(this, arguments).moved(event2);
  }
  function touchended(event2) {
    emitter(this, arguments).ended(event2);
  }
  function initialize2() {
    var state = this.__brush || { selection: null };
    state.extent = number22(extent2.apply(this, arguments));
    state.dim = dim;
    return state;
  }
  brush2.extent = function(_3) {
    return arguments.length ? (extent2 = typeof _3 === "function" ? _3 : constant_default5(number22(_3)), brush2) : extent2;
  };
  brush2.filter = function(_3) {
    return arguments.length ? (filter3 = typeof _3 === "function" ? _3 : constant_default5(!!_3), brush2) : filter3;
  };
  brush2.touchable = function(_3) {
    return arguments.length ? (touchable = typeof _3 === "function" ? _3 : constant_default5(!!_3), brush2) : touchable;
  };
  brush2.handleSize = function(_3) {
    return arguments.length ? (handleSize = +_3, brush2) : handleSize;
  };
  brush2.keyModifiers = function(_3) {
    return arguments.length ? (keys = !!_3, brush2) : keys;
  };
  brush2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush2 : value;
  };
  return brush2;
}
var MODE_DRAG, MODE_SPACE, MODE_HANDLE, MODE_CENTER, abs2, max4, min3, X4, Y5, XY, cursors, flipX, flipY, signsX, signsY;
var init_brush = __esm({
  "node_modules/d3-brush/src/brush.js"() {
    init_src16();
    init_src17();
    init_src4();
    init_src13();
    init_src20();
    init_constant7();
    init_event2();
    init_noevent2();
    MODE_DRAG = { name: "drag" };
    MODE_SPACE = { name: "space" };
    MODE_HANDLE = { name: "handle" };
    MODE_CENTER = { name: "center" };
    ({ abs: abs2, max: max4, min: min3 } = Math);
    X4 = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x5, e) {
        return x5 == null ? null : [[+x5[0], e[0][1]], [+x5[1], e[1][1]]];
      },
      output: function(xy) {
        return xy && [xy[0][0], xy[1][0]];
      }
    };
    Y5 = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y4, e) {
        return y4 == null ? null : [[e[0][0], +y4[0]], [e[1][0], +y4[1]]];
      },
      output: function(xy) {
        return xy && [xy[0][1], xy[1][1]];
      }
    };
    XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) {
        return xy == null ? null : number22(xy);
      },
      output: function(xy) {
        return xy;
      }
    };
    cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };
    flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };
    flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };
    signsX = {
      overlay: 1,
      selection: 1,
      n: null,
      e: 1,
      s: null,
      w: -1,
      nw: -1,
      ne: 1,
      se: 1,
      sw: -1
    };
    signsY = {
      overlay: 1,
      selection: 1,
      n: -1,
      e: null,
      s: 1,
      w: null,
      nw: -1,
      ne: -1,
      se: 1,
      sw: 1
    };
  }
});

// node_modules/d3-brush/src/index.js
var src_exports11 = {};
__export(src_exports11, {
  brush: () => brush_default,
  brushSelection: () => brushSelection,
  brushX: () => brushX,
  brushY: () => brushY
});
var init_src21 = __esm({
  "node_modules/d3-brush/src/index.js"() {
    init_brush();
  }
});

// node_modules/d3-zoom/src/constant.js
var constant_default6;
var init_constant8 = __esm({
  "node_modules/d3-zoom/src/constant.js"() {
    constant_default6 = (x5) => () => x5;
  }
});

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch3
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch3 }
  });
}
var init_event3 = __esm({
  "node_modules/d3-zoom/src/event.js"() {
  }
});

// node_modules/d3-zoom/src/transform.js
function Transform(k4, x5, y4) {
  this.k = k4;
  this.x = x5;
  this.y = y4;
}
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity5;
  return node.__zoom;
}
var identity5;
var init_transform2 = __esm({
  "node_modules/d3-zoom/src/transform.js"() {
    Transform.prototype = {
      constructor: Transform,
      scale: function(k4) {
        return k4 === 1 ? this : new Transform(this.k * k4, this.x, this.y);
      },
      translate: function(x5, y4) {
        return x5 === 0 & y4 === 0 ? this : new Transform(this.k, this.x + this.k * x5, this.y + this.k * y4);
      },
      apply: function(point7) {
        return [point7[0] * this.k + this.x, point7[1] * this.k + this.y];
      },
      applyX: function(x5) {
        return x5 * this.k + this.x;
      },
      applyY: function(y4) {
        return y4 * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x5) {
        return (x5 - this.x) / this.k;
      },
      invertY: function(y4) {
        return (y4 - this.y) / this.k;
      },
      rescaleX: function(x5) {
        return x5.copy().domain(x5.range().map(this.invertX, this).map(x5.invert, x5));
      },
      rescaleY: function(y4) {
        return y4.copy().domain(y4.range().map(this.invertY, this).map(y4.invert, y4));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };
    identity5 = new Transform(1, 0, 0);
    transform.prototype = Transform.prototype;
  }
});

// node_modules/d3-zoom/src/noevent.js
function nopropagation3(event2) {
  event2.stopImmediatePropagation();
}
function noevent_default3(event2) {
  event2.preventDefault();
  event2.stopImmediatePropagation();
}
var init_noevent3 = __esm({
  "node_modules/d3-zoom/src/noevent.js"() {
  }
});

// node_modules/d3-zoom/src/zoom.js
function defaultFilter3(event2) {
  return (!event2.ctrlKey || event2.type === "wheel") && !event2.button;
}
function defaultExtent2() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity5;
}
function defaultWheelDelta(event2) {
  return -event2.deltaY * (event2.deltaMode === 1 ? 0.05 : event2.deltaMode ? 1 : 2e-3) * (event2.ctrlKey ? 10 : 1);
}
function defaultTouchable3() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent2, translateExtent) {
  var dx0 = transform2.invertX(extent2[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent2[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent2[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent2[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter3 = defaultFilter3, extent2 = defaultExtent2, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable3, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default2("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection3) {
    selection3.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point7, event2) {
    var selection3 = collection.selection ? collection.selection() : collection;
    selection3.property("__zoom", defaultTransform);
    if (collection !== selection3) {
      schedule(collection, transform2, point7, event2);
    } else {
      selection3.interrupt().each(function() {
        gesture(this, arguments).event(event2).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection3, k4, p2, event2) {
    zoom.scaleTo(selection3, function() {
      var k0 = this.__zoom.k, k1 = typeof k4 === "function" ? k4.apply(this, arguments) : k4;
      return k0 * k1;
    }, p2, event2);
  };
  zoom.scaleTo = function(selection3, k4, p2, event2) {
    zoom.transform(selection3, function() {
      var e = extent2.apply(this, arguments), t02 = this.__zoom, p0 = p2 == null ? centroid(e) : typeof p2 === "function" ? p2.apply(this, arguments) : p2, p1 = t02.invert(p0), k1 = typeof k4 === "function" ? k4.apply(this, arguments) : k4;
      return constrain(translate(scale(t02, k1), p0, p1), e, translateExtent);
    }, p2, event2);
  };
  zoom.translateBy = function(selection3, x5, y4, event2) {
    zoom.transform(selection3, function() {
      return constrain(this.__zoom.translate(
        typeof x5 === "function" ? x5.apply(this, arguments) : x5,
        typeof y4 === "function" ? y4.apply(this, arguments) : y4
      ), extent2.apply(this, arguments), translateExtent);
    }, null, event2);
  };
  zoom.translateTo = function(selection3, x5, y4, p2, event2) {
    zoom.transform(selection3, function() {
      var e = extent2.apply(this, arguments), t = this.__zoom, p0 = p2 == null ? centroid(e) : typeof p2 === "function" ? p2.apply(this, arguments) : p2;
      return constrain(identity5.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x5 === "function" ? -x5.apply(this, arguments) : -x5,
        typeof y4 === "function" ? -y4.apply(this, arguments) : -y4
      ), e, translateExtent);
    }, p2, event2);
  };
  function scale(transform2, k4) {
    k4 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k4));
    return k4 === transform2.k ? transform2 : new Transform(k4, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x5 = p0[0] - p1[0] * transform2.k, y4 = p0[1] - p1[1] * transform2.k;
    return x5 === transform2.x && y4 === transform2.y ? transform2 : new Transform(transform2.k, x5, y4);
  }
  function centroid(extent3) {
    return [(+extent3[0][0] + +extent3[1][0]) / 2, (+extent3[0][1] + +extent3[1][1]) / 2];
  }
  function schedule(transition2, transform2, point7, event2) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event2).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event2).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g2 = gesture(that, args).event(event2), e = extent2.apply(that, args), p2 = point7 == null ? centroid(e) : typeof point7 === "function" ? point7.apply(that, args) : point7, w3 = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a4 = that.__zoom, b4 = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i3 = interpolate(a4.invert(p2).concat(w3 / a4.k), b4.invert(p2).concat(w3 / b4.k));
      return function(t) {
        if (t === 1)
          t = b4;
        else {
          var l = i3(t), k4 = w3 / l[2];
          t = new Transform(k4, p2[0] - l[0] * k4, p2[1] - l[1] * k4);
        }
        g2.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent2.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event2) {
      if (event2)
        this.sourceEvent = event2;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d2 = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d2
      );
    }
  };
  function wheeled(event2, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var g2 = gesture(this, args).event(event2), t = this.__zoom, k4 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p2 = pointer_default(event2);
    if (g2.wheel) {
      if (g2.mouse[0][0] !== p2[0] || g2.mouse[0][1] !== p2[1]) {
        g2.mouse[1] = t.invert(g2.mouse[0] = p2);
      }
      clearTimeout(g2.wheel);
    } else if (t.k === k4)
      return;
    else {
      g2.mouse = [p2, t.invert(p2)];
      interrupt_default(this);
      g2.start();
    }
    noevent_default3(event2);
    g2.wheel = setTimeout(wheelidled, wheelDelay);
    g2.zoom("mouse", constrain(translate(scale(t, k4), g2.mouse[0], g2.mouse[1]), g2.extent, translateExtent));
    function wheelidled() {
      g2.wheel = null;
      g2.end();
    }
  }
  function mousedowned(event2, ...args) {
    if (touchending || !filter3.apply(this, arguments))
      return;
    var currentTarget = event2.currentTarget, g2 = gesture(this, args, true).event(event2), v2 = select_default2(event2.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p2 = pointer_default(event2, currentTarget), x0 = event2.clientX, y0 = event2.clientY;
    nodrag_default(event2.view);
    nopropagation3(event2);
    g2.mouse = [p2, this.__zoom.invert(p2)];
    interrupt_default(this);
    g2.start();
    function mousemoved(event3) {
      noevent_default3(event3);
      if (!g2.moved) {
        var dx = event3.clientX - x0, dy = event3.clientY - y0;
        g2.moved = dx * dx + dy * dy > clickDistance2;
      }
      g2.event(event3).zoom("mouse", constrain(translate(g2.that.__zoom, g2.mouse[0] = pointer_default(event3, currentTarget), g2.mouse[1]), g2.extent, translateExtent));
    }
    function mouseupped(event3) {
      v2.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event3.view, g2.moved);
      noevent_default3(event3);
      g2.event(event3).end();
    }
  }
  function dblclicked(event2, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var t02 = this.__zoom, p0 = pointer_default(event2.changedTouches ? event2.changedTouches[0] : event2, this), p1 = t02.invert(p0), k1 = t02.k * (event2.shiftKey ? 0.5 : 2), t12 = constrain(translate(scale(t02, k1), p0, p1), extent2.apply(this, args), translateExtent);
    noevent_default3(event2);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t12, p0, event2);
    else
      select_default2(this).call(zoom.transform, t12, p0, event2);
  }
  function touchstarted(event2, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var touches = event2.touches, n2 = touches.length, g2 = gesture(this, args, event2.changedTouches.length === n2).event(event2), started, i3, t, p2;
    nopropagation3(event2);
    for (i3 = 0; i3 < n2; ++i3) {
      t = touches[i3], p2 = pointer_default(t, this);
      p2 = [p2, this.__zoom.invert(p2), t.identifier];
      if (!g2.touch0)
        g2.touch0 = p2, started = true, g2.taps = 1 + !!touchstarting;
      else if (!g2.touch1 && g2.touch0[2] !== p2[2])
        g2.touch1 = p2, g2.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g2.taps < 2)
        touchfirst = p2[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g2.start();
    }
  }
  function touchmoved(event2, ...args) {
    if (!this.__zooming)
      return;
    var g2 = gesture(this, args).event(event2), touches = event2.changedTouches, n2 = touches.length, i3, t, p2, l;
    noevent_default3(event2);
    for (i3 = 0; i3 < n2; ++i3) {
      t = touches[i3], p2 = pointer_default(t, this);
      if (g2.touch0 && g2.touch0[2] === t.identifier)
        g2.touch0[0] = p2;
      else if (g2.touch1 && g2.touch1[2] === t.identifier)
        g2.touch1[0] = p2;
    }
    t = g2.that.__zoom;
    if (g2.touch1) {
      var p0 = g2.touch0[0], l0 = g2.touch0[1], p1 = g2.touch1[0], l1 = g2.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p2 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g2.touch0)
      p2 = g2.touch0[0], l = g2.touch0[1];
    else
      return;
    g2.zoom("touch", constrain(translate(t, p2, l), g2.extent, translateExtent));
  }
  function touchended(event2, ...args) {
    if (!this.__zooming)
      return;
    var g2 = gesture(this, args).event(event2), touches = event2.changedTouches, n2 = touches.length, i3, t;
    nopropagation3(event2);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i3 = 0; i3 < n2; ++i3) {
      t = touches[i3];
      if (g2.touch0 && g2.touch0[2] === t.identifier)
        delete g2.touch0;
      else if (g2.touch1 && g2.touch1[2] === t.identifier)
        delete g2.touch1;
    }
    if (g2.touch1 && !g2.touch0)
      g2.touch0 = g2.touch1, delete g2.touch1;
    if (g2.touch0)
      g2.touch0[1] = this.__zoom.invert(g2.touch0[0]);
    else {
      g2.end();
      if (g2.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p2 = select_default2(this).on("dblclick.zoom");
          if (p2)
            p2.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_3) {
    return arguments.length ? (wheelDelta = typeof _3 === "function" ? _3 : constant_default6(+_3), zoom) : wheelDelta;
  };
  zoom.filter = function(_3) {
    return arguments.length ? (filter3 = typeof _3 === "function" ? _3 : constant_default6(!!_3), zoom) : filter3;
  };
  zoom.touchable = function(_3) {
    return arguments.length ? (touchable = typeof _3 === "function" ? _3 : constant_default6(!!_3), zoom) : touchable;
  };
  zoom.extent = function(_3) {
    return arguments.length ? (extent2 = typeof _3 === "function" ? _3 : constant_default6([[+_3[0][0], +_3[0][1]], [+_3[1][0], +_3[1][1]]]), zoom) : extent2;
  };
  zoom.scaleExtent = function(_3) {
    return arguments.length ? (scaleExtent[0] = +_3[0], scaleExtent[1] = +_3[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_3) {
    return arguments.length ? (translateExtent[0][0] = +_3[0][0], translateExtent[1][0] = +_3[1][0], translateExtent[0][1] = +_3[0][1], translateExtent[1][1] = +_3[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_3) {
    return arguments.length ? (constrain = _3, zoom) : constrain;
  };
  zoom.duration = function(_3) {
    return arguments.length ? (duration = +_3, zoom) : duration;
  };
  zoom.interpolate = function(_3) {
    return arguments.length ? (interpolate = _3, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_3) {
    return arguments.length ? (clickDistance2 = (_3 = +_3) * _3, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_3) {
    return arguments.length ? (tapDistance = +_3, zoom) : tapDistance;
  };
  return zoom;
}
var init_zoom2 = __esm({
  "node_modules/d3-zoom/src/zoom.js"() {
    init_src16();
    init_src17();
    init_src4();
    init_src13();
    init_src20();
    init_constant8();
    init_event3();
    init_transform2();
    init_noevent3();
  }
});

// node_modules/d3-zoom/src/index.js
var src_exports12 = {};
__export(src_exports12, {
  ZoomTransform: () => Transform,
  zoom: () => zoom_default2,
  zoomIdentity: () => identity5,
  zoomTransform: () => transform
});
var init_src22 = __esm({
  "node_modules/d3-zoom/src/index.js"() {
    init_zoom2();
    init_transform2();
  }
});

// node_modules/d3fc/build/d3fc.js
var require_d3fc = __commonJS({
  "node_modules/d3fc/build/d3fc.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, (init_src2(), __toCommonJS(src_exports)), (init_src8(), __toCommonJS(src_exports3)), (init_src6(), __toCommonJS(src_exports2)), (init_src9(), __toCommonJS(src_exports4)), (init_src11(), __toCommonJS(src_exports5)), (init_src12(), __toCommonJS(src_exports6)), (init_src13(), __toCommonJS(src_exports7)), (init_src14(), __toCommonJS(src_exports8)), (init_src15(), __toCommonJS(src_exports9)), (init_src16(), __toCommonJS(src_exports10)), (init_src21(), __toCommonJS(src_exports11)), (init_src22(), __toCommonJS(src_exports12))) : typeof define === "function" && define.amd ? define(["exports", "d3-array", "d3-scale", "d3-time", "d3-random", "d3-fetch", "d3-path", "d3-selection", "d3-shape", "d3-scale-chromatic", "d3-dispatch", "d3-brush", "d3-zoom"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.fc = {}, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3));
    })(exports, function(exports2, d3Array, d3Scale, d3Time, d3Random, d3Fetch, d3Path, d3Selection, d3Shape, d3ScaleChromatic, d3Dispatch, d3Brush, d3Zoom) {
      "use strict";
      var createReboundMethod = function(target, source, name) {
        var method = source[name];
        if (typeof method !== "function") {
          throw new Error("Attempt to rebind ".concat(name, " which isn't a function on the source object"));
        }
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var value = method.apply(source, args);
          return value === source ? target : value;
        };
      };
      var rebind = function(target, source) {
        for (var _len = arguments.length, names = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          names[_key - 2] = arguments[_key];
        }
        for (var _i = 0, _names = names; _i < _names.length; _i++) {
          var name = _names[_i];
          target[name] = createReboundMethod(target, source, name);
        }
        return target;
      };
      var createTransform = function createTransform2(transforms) {
        return function(name) {
          return transforms.reduce(function(name2, fn2) {
            return name2 && fn2(name2);
          }, name);
        };
      };
      var rebindAll6 = function(target, source) {
        for (var _len = arguments.length, transforms = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          transforms[_key - 2] = arguments[_key];
        }
        var transform2 = createTransform(transforms);
        for (var _i = 0, _Object$keys = Object.keys(source); _i < _Object$keys.length; _i++) {
          var name = _Object$keys[_i];
          var result = transform2(name);
          if (result) {
            target[result] = createReboundMethod(target, source, name);
          }
        }
        return target;
      };
      var regexify = function(strsOrRegexes) {
        return strsOrRegexes.map(function(strOrRegex) {
          return typeof strOrRegex === "string" ? new RegExp("^".concat(strOrRegex, "$")) : strOrRegex;
        });
      };
      var exclude2 = function() {
        for (var _len = arguments.length, exclusions = new Array(_len), _key = 0; _key < _len; _key++) {
          exclusions[_key] = arguments[_key];
        }
        exclusions = regexify(exclusions);
        return function(name) {
          return exclusions.every(function(exclusion) {
            return !exclusion.test(name);
          }) && name;
        };
      };
      var include = function() {
        for (var _len = arguments.length, inclusions = new Array(_len), _key = 0; _key < _len; _key++) {
          inclusions[_key] = arguments[_key];
        }
        inclusions = regexify(inclusions);
        return function(name) {
          return inclusions.some(function(inclusion) {
            return inclusion.test(name);
          }) && name;
        };
      };
      var includeMap = function(mappings) {
        return function(name) {
          return mappings[name];
        };
      };
      var capitalizeFirstLetter = function capitalizeFirstLetter2(str) {
        return str[0].toUpperCase() + str.slice(1);
      };
      var prefix2 = function(prefix3) {
        return function(name) {
          return prefix3 + capitalizeFirstLetter(name);
        };
      };
      function identity8(d2) {
        return d2;
      }
      function noop3(d2) {
      }
      function functor(v2) {
        return typeof v2 === "function" ? v2 : function() {
          return v2;
        };
      }
      function convertNaN(value) {
        return typeof value === "number" && isNaN(value) ? void 0 : value;
      }
      function _slidingWindow() {
        var period = function period2() {
          return 10;
        };
        var accumulator = noop3;
        var value = identity8;
        var defined2 = function defined3(d2) {
          return d2 != null;
        };
        var slidingWindow = function slidingWindow2(data) {
          var size = period.apply(this, arguments);
          var windowData = data.slice(0, size).map(value);
          return data.map(function(d2, i3) {
            if (i3 >= size) {
              windowData.shift();
              windowData.push(value(d2, i3));
            }
            if (i3 < size - 1 || windowData.some(function(d3) {
              return !defined2(d3);
            })) {
              return accumulator(void 0, i3);
            }
            return accumulator(windowData, i3);
          });
        };
        slidingWindow.period = function() {
          if (!arguments.length) {
            return period;
          }
          period = functor(arguments.length <= 0 ? void 0 : arguments[0]);
          return slidingWindow;
        };
        slidingWindow.accumulator = function() {
          if (!arguments.length) {
            return accumulator;
          }
          accumulator = arguments.length <= 0 ? void 0 : arguments[0];
          return slidingWindow;
        };
        slidingWindow.defined = function() {
          if (!arguments.length) {
            return defined2;
          }
          defined2 = arguments.length <= 0 ? void 0 : arguments[0];
          return slidingWindow;
        };
        slidingWindow.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return slidingWindow;
        };
        return slidingWindow;
      }
      function bollingerBands() {
        var multiplier = 2;
        var slidingWindow = _slidingWindow().accumulator(function(values) {
          var stdDev = values && d3Array.deviation(values);
          var average = values && d3Array.mean(values);
          return {
            average,
            upper: convertNaN(average + multiplier * stdDev),
            lower: convertNaN(average - multiplier * stdDev)
          };
        });
        var bollingerBands2 = function bollingerBands3(data) {
          return slidingWindow(data);
        };
        bollingerBands2.multiplier = function() {
          if (!arguments.length) {
            return multiplier;
          }
          multiplier = arguments.length <= 0 ? void 0 : arguments[0];
          return bollingerBands2;
        };
        rebind(bollingerBands2, slidingWindow, "period", "value");
        return bollingerBands2;
      }
      function exponentialMovingAverage() {
        var value = identity8;
        var period = function period2() {
          return 9;
        };
        var initialMovingAverageAccumulator = function initialMovingAverageAccumulator2(period2) {
          var values = [];
          return function(value2) {
            var movingAverage2;
            if (values.length < period2) {
              if (value2 != null) {
                values.push(value2);
              } else {
                values = [];
              }
            }
            if (values.length >= period2) {
              movingAverage2 = d3Array.mean(values);
            }
            return movingAverage2;
          };
        };
        var exponentialMovingAverage2 = function exponentialMovingAverage3(data) {
          var size = period.apply(this, arguments);
          var alpha = 2 / (size + 1);
          var initialAccumulator = initialMovingAverageAccumulator(size);
          var ema;
          return data.map(function(d2, i3) {
            var v2 = value(d2, i3);
            if (ema === void 0) {
              ema = initialAccumulator(v2);
            } else {
              ema = v2 * alpha + (1 - alpha) * ema;
            }
            return convertNaN(ema);
          });
        };
        exponentialMovingAverage2.period = function() {
          if (!arguments.length) {
            return period;
          }
          period = functor(arguments.length <= 0 ? void 0 : arguments[0]);
          return exponentialMovingAverage2;
        };
        exponentialMovingAverage2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return exponentialMovingAverage2;
        };
        return exponentialMovingAverage2;
      }
      function macd() {
        var value = identity8;
        var fastEMA = exponentialMovingAverage().period(12);
        var slowEMA = exponentialMovingAverage().period(26);
        var signalEMA = exponentialMovingAverage().period(9);
        var macd2 = function macd3(data) {
          fastEMA.value(value);
          slowEMA.value(value);
          var diff = d3Array.zip(fastEMA(data), slowEMA(data)).map(function(d2) {
            return d2[0] !== void 0 && d2[1] !== void 0 ? d2[0] - d2[1] : void 0;
          });
          var averageDiff = signalEMA(diff);
          return d3Array.zip(diff, averageDiff).map(function(d2) {
            return {
              macd: d2[0],
              signal: d2[1],
              divergence: d2[0] !== void 0 && d2[1] !== void 0 ? d2[0] - d2[1] : void 0
            };
          });
        };
        macd2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return macd2;
        };
        rebindAll6(macd2, fastEMA, includeMap({
          "period": "fastPeriod"
        }));
        rebindAll6(macd2, slowEMA, includeMap({
          "period": "slowPeriod"
        }));
        rebindAll6(macd2, signalEMA, includeMap({
          "period": "signalPeriod"
        }));
        return macd2;
      }
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof2 = function(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof2 = function(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof2(obj);
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i3 = 0; i3 < props.length; i3++) {
          var descriptor = props[i3];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _setPrototypeOf(o, p2) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p3) {
          o2.__proto__ = p3;
          return o2;
        };
        return _setPrototypeOf(o, p2);
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct2(Parent2, args2, Class2) {
            var a4 = [null];
            a4.push.apply(a4, args2);
            var Constructor = Function.bind.apply(Parent2, a4);
            var instance = new Constructor();
            if (Class2)
              _setPrototypeOf(instance, Class2.prototype);
            return instance;
          };
        }
        return _construct.apply(null, arguments);
      }
      function _isNativeFunction(fn2) {
        return Function.toString.call(fn2).indexOf("[native code]") !== -1;
      }
      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
        _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
          if (Class2 === null || !_isNativeFunction(Class2))
            return Class2;
          if (typeof Class2 !== "function") {
            throw new TypeError("Super expression must either be null or a function");
          }
          if (typeof _cache !== "undefined") {
            if (_cache.has(Class2))
              return _cache.get(Class2);
            _cache.set(Class2, Wrapper);
          }
          function Wrapper() {
            return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
          }
          Wrapper.prototype = Object.create(Class2.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          return _setPrototypeOf(Wrapper, Class2);
        };
        return _wrapNativeSuper(Class);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (typeof call === "object" || typeof call === "function")) {
          return call;
        }
        return _assertThisInitialized(self2);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _slicedToArray(arr, i3) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
      }
      function _toArray(arr) {
        return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
          return Array.from(iter);
      }
      function _iterableToArrayLimit(arr, i3) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
          return;
        var _arr = [];
        var _n2 = true;
        var _d = false;
        var _e5 = void 0;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n2 = (_s = _i.next()).done); _n2 = true) {
            _arr.push(_s.value);
            if (i3 && _arr.length === i3)
              break;
          }
        } catch (err2) {
          _d = true;
          _e5 = err2;
        } finally {
          try {
            if (!_n2 && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e5;
          }
        }
        return _arr;
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n2 = Object.prototype.toString.call(o).slice(8, -1);
        if (n2 === "Object" && o.constructor)
          n2 = o.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
          arr2[i3] = arr[i3];
        return arr2;
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it2;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it2)
              o = it2;
            var i3 = 0;
            var F5 = function() {
            };
            return {
              s: F5,
              n: function() {
                if (i3 >= o.length)
                  return {
                    done: true
                  };
                return {
                  done: false,
                  value: o[i3++]
                };
              },
              e: function(e) {
                throw e;
              },
              f: F5
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err2;
        return {
          s: function() {
            it2 = o[Symbol.iterator]();
          },
          n: function() {
            var step = it2.next();
            normalCompletion = step.done;
            return step;
          },
          e: function(e) {
            didErr = true;
            err2 = e;
          },
          f: function() {
            try {
              if (!normalCompletion && it2.return != null)
                it2.return();
            } finally {
              if (didErr)
                throw err2;
            }
          }
        };
      }
      function relativeStrengthIndex() {
        var slidingWindow = _slidingWindow().period(14);
        var wildersSmoothing = function wildersSmoothing2(values, prevAvg) {
          return prevAvg + (values[values.length - 1] - prevAvg) / values.length;
        };
        var downChange = function downChange2(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), prevClose = _ref2[0], close = _ref2[1];
          return prevClose < close ? 0 : prevClose - close;
        };
        var upChange = function upChange2(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), prevClose = _ref4[0], close = _ref4[1];
          return prevClose > close ? 0 : close - prevClose;
        };
        var updateAverage = function updateAverage2(changes, prevAverage) {
          return prevAverage !== void 0 ? wildersSmoothing(changes, prevAverage) : d3Array.mean(changes);
        };
        var makeAccumulator = function makeAccumulator2() {
          var prevClose;
          var downChangesAvg;
          var upChangesAvg;
          return function(closes) {
            if (!closes) {
              if (prevClose !== void 0) {
                prevClose = NaN;
              }
              return void 0;
            }
            if (prevClose === void 0) {
              prevClose = closes[0];
              return void 0;
            }
            var closePairs = d3Array.pairs([prevClose].concat(_toConsumableArray(closes)));
            downChangesAvg = updateAverage(closePairs.map(downChange), downChangesAvg);
            upChangesAvg = updateAverage(closePairs.map(upChange), upChangesAvg);
            var rs = !isNaN(prevClose) ? upChangesAvg / downChangesAvg : NaN;
            return convertNaN(100 - 100 / (1 + rs));
          };
        };
        var rsi = function rsi2(data) {
          var rsiAccumulator = makeAccumulator();
          slidingWindow.accumulator(rsiAccumulator);
          return slidingWindow(data);
        };
        rebind(rsi, slidingWindow, "period", "value");
        return rsi;
      }
      function movingAverage() {
        var slidingWindow = _slidingWindow().accumulator(function(values) {
          return values && d3Array.mean(values);
        });
        var movingAverage2 = function movingAverage3(data) {
          return slidingWindow(data);
        };
        rebind(movingAverage2, slidingWindow, "period", "value");
        return movingAverage2;
      }
      function stochasticOscillator() {
        var closeValue = function closeValue2(d2, i3) {
          return d2.close;
        };
        var highValue = function highValue2(d2, i3) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2, i3) {
          return d2.low;
        };
        var kWindow = _slidingWindow().period(5).defined(function(d2) {
          return closeValue(d2) != null && highValue(d2) != null && lowValue(d2) != null;
        }).accumulator(function(values) {
          var maxHigh = values && d3Array.max(values, highValue);
          var minLow = values && d3Array.min(values, lowValue);
          var kValue = values && 100 * (closeValue(values[values.length - 1]) - minLow) / (maxHigh - minLow);
          return convertNaN(kValue);
        });
        var dWindow = movingAverage().period(3);
        var stochastic = function stochastic2(data) {
          var kValues = kWindow(data);
          var dValues = dWindow(kValues);
          return kValues.map(function(k4, i3) {
            return {
              k: k4,
              d: dValues[i3]
            };
          });
        };
        stochastic.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return stochastic;
        };
        stochastic.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = arguments.length <= 0 ? void 0 : arguments[0];
          return stochastic;
        };
        stochastic.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = arguments.length <= 0 ? void 0 : arguments[0];
          return stochastic;
        };
        rebindAll6(stochastic, kWindow, includeMap({
          "period": "kPeriod"
        }));
        rebindAll6(stochastic, dWindow, includeMap({
          "period": "dPeriod"
        }));
        return stochastic;
      }
      function forceIndex() {
        var volumeValue = function volumeValue2(d2, i3) {
          return d2.volume;
        };
        var closeValue = function closeValue2(d2, i3) {
          return d2.close;
        };
        var emaComputer = exponentialMovingAverage().period(13);
        var slidingWindow = _slidingWindow().period(2).defined(function(d2) {
          return closeValue(d2) != null && volumeValue(d2) != null;
        }).accumulator(function(values) {
          return values && convertNaN((closeValue(values[1]) - closeValue(values[0])) * volumeValue(values[1]));
        });
        var force = function force2(data) {
          var forceIndex2 = slidingWindow(data);
          return emaComputer(forceIndex2);
        };
        force.volumeValue = function() {
          if (!arguments.length) {
            return volumeValue;
          }
          volumeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return force;
        };
        force.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return force;
        };
        rebind(force, emaComputer, "period");
        return force;
      }
      function envelope() {
        var factor = 0.1;
        var value = identity8;
        var envelope2 = function envelope3(data) {
          return data.map(function(d2) {
            var lower3 = convertNaN(value(d2) * (1 - factor));
            var upper = convertNaN(value(d2) * (1 + factor));
            return {
              lower: lower3,
              upper
            };
          });
        };
        envelope2.factor = function() {
          if (!arguments.length) {
            return factor;
          }
          factor = arguments.length <= 0 ? void 0 : arguments[0];
          return envelope2;
        };
        envelope2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return envelope2;
        };
        return envelope2;
      }
      function elderRay() {
        var closeValue = function closeValue2(d2, i3) {
          return d2.close;
        };
        var highValue = function highValue2(d2, i3) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2, i3) {
          return d2.low;
        };
        var emaComputer = exponentialMovingAverage().period(13);
        var elderRay2 = function elderRay3(data) {
          emaComputer.value(closeValue);
          return d3Array.zip(data, emaComputer(data)).map(function(d2) {
            var bullPower = convertNaN(highValue(d2[0]) - d2[1]);
            var bearPower = convertNaN(lowValue(d2[0]) - d2[1]);
            return {
              bullPower,
              bearPower
            };
          });
        };
        elderRay2.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return elderRay2;
        };
        elderRay2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = arguments.length <= 0 ? void 0 : arguments[0];
          return elderRay2;
        };
        elderRay2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = arguments.length <= 0 ? void 0 : arguments[0];
          return elderRay2;
        };
        rebind(elderRay2, emaComputer, "period");
        return elderRay2;
      }
      function identity$1() {
        var identity9 = {};
        identity9.distance = function(start2, end) {
          return end - start2;
        };
        identity9.offset = function(start2, offset) {
          return start2 instanceof Date ? new Date(start2.getTime() + offset) : start2 + offset;
        };
        identity9.clampUp = function(d2) {
          return d2;
        };
        identity9.clampDown = function(d2) {
          return d2;
        };
        identity9.copy = function() {
          return identity9;
        };
        return identity9;
      }
      function tickFilter(ticks3, discontinuityProvider) {
        var discontinuousTicks = ticks3.map(discontinuityProvider.clampUp);
        if (discontinuousTicks.length !== new Set(discontinuousTicks.map(function(d2) {
          return d2 === null || d2 === void 0 ? void 0 : d2.valueOf();
        })).size) {
          console.warn("There are multiple ticks that fall within a discontinuity, which has led to them being rendered on top of each other. Consider using scale.ticks to explicitly specify the ticks for the scale.");
        }
        return discontinuousTicks;
      }
      function discontinuous(adaptedScale) {
        var _this = this;
        if (!arguments.length) {
          adaptedScale = d3Scale.scaleIdentity();
        }
        var discontinuityProvider = identity$1();
        var scale = function scale2(value) {
          var domain = adaptedScale.domain();
          var range2 = adaptedScale.range();
          var totalDomainDistance = discontinuityProvider.distance(domain[0], domain[1]);
          var distanceToX = discontinuityProvider.distance(domain[0], value);
          var ratioToX = distanceToX / totalDomainDistance;
          var scaledByRange = ratioToX * (range2[1] - range2[0]) + range2[0];
          return scaledByRange;
        };
        scale.invert = function(x5) {
          var domain = adaptedScale.domain();
          var range2 = adaptedScale.range();
          var ratioToX = (x5 - range2[0]) / (range2[1] - range2[0]);
          var totalDomainDistance = discontinuityProvider.distance(domain[0], domain[1]);
          var distanceToX = ratioToX * totalDomainDistance;
          return discontinuityProvider.offset(domain[0], distanceToX);
        };
        scale.domain = function() {
          if (!arguments.length) {
            return adaptedScale.domain();
          }
          var newDomain = arguments.length <= 0 ? void 0 : arguments[0];
          var domainLower = discontinuityProvider.clampUp(newDomain[0]);
          var domainUpper = discontinuityProvider.clampDown(newDomain[1]);
          adaptedScale.domain([domainLower, domainUpper]);
          return scale;
        };
        scale.nice = function() {
          adaptedScale.nice();
          var domain = adaptedScale.domain();
          var domainLower = discontinuityProvider.clampUp(domain[0]);
          var domainUpper = discontinuityProvider.clampDown(domain[1]);
          adaptedScale.domain([domainLower, domainUpper]);
          return scale;
        };
        scale.ticks = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var ticks3 = adaptedScale.ticks.apply(_this, args);
          return tickFilter(ticks3, discontinuityProvider);
        };
        scale.copy = function() {
          return discontinuous(adaptedScale.copy()).discontinuityProvider(discontinuityProvider.copy());
        };
        scale.discontinuityProvider = function() {
          if (!arguments.length) {
            return discontinuityProvider;
          }
          discontinuityProvider = arguments.length <= 0 ? void 0 : arguments[0];
          return scale;
        };
        rebindAll6(scale, adaptedScale, include("range", "rangeRound", "interpolate", "clamp", "tickFormat"));
        return scale;
      }
      var base = function base2(dayAccessor, intervalDay, intervalSaturday, intervalMonday) {
        var day = {
          sunday: 0,
          monday: 1,
          saturday: 6
        };
        var millisPerDay2 = 24 * 3600 * 1e3;
        var millisPerWorkWeek = millisPerDay2 * 5;
        var millisPerWeek = millisPerDay2 * 7;
        var skipWeekends2 = {};
        var isWeekend = function isWeekend2(date2) {
          return dayAccessor(date2) === 0 || dayAccessor(date2) === 6;
        };
        skipWeekends2.clampDown = function(date2) {
          if (date2 && isWeekend(date2)) {
            var newDate2 = intervalDay.ceil(date2);
            if (dayAccessor(newDate2) === day.sunday) {
              return intervalDay.offset(newDate2, -1);
            } else if (dayAccessor(newDate2) === day.monday) {
              return intervalDay.offset(newDate2, -2);
            } else {
              return newDate2;
            }
          } else {
            return date2;
          }
        };
        skipWeekends2.clampUp = function(date2) {
          if (date2 && isWeekend(date2)) {
            var newDate2 = intervalDay.floor(date2);
            if (dayAccessor(newDate2) === day.saturday) {
              return intervalDay.offset(newDate2, 2);
            } else if (dayAccessor(newDate2) === day.sunday) {
              return intervalDay.offset(newDate2, 1);
            } else {
              return newDate2;
            }
          } else {
            return date2;
          }
        };
        skipWeekends2.distance = function(startDate, endDate) {
          startDate = skipWeekends2.clampUp(startDate);
          endDate = skipWeekends2.clampDown(endDate);
          var offsetStart = intervalSaturday.ceil(startDate);
          if (endDate < offsetStart) {
            return endDate.getTime() - startDate.getTime();
          }
          var msAdded = offsetStart.getTime() - startDate.getTime();
          var offsetEnd = intervalSaturday.ceil(endDate);
          var msRemoved = offsetEnd.getTime() - endDate.getTime();
          var weeks = Math.round((offsetEnd.getTime() - offsetStart.getTime()) / millisPerWeek);
          return weeks * millisPerWorkWeek + msAdded - msRemoved;
        };
        skipWeekends2.offset = function(startDate, ms) {
          var date2 = isWeekend(startDate) ? skipWeekends2.clampUp(startDate) : startDate;
          if (ms === 0) {
            return date2;
          }
          var isNegativeOffset = ms < 0;
          var isPositiveOffset = ms > 0;
          var remainingms = ms;
          var weekBoundary = isNegativeOffset ? intervalMonday.floor(date2) : intervalSaturday.ceil(date2);
          remainingms -= weekBoundary.getTime() - date2.getTime();
          if (isNegativeOffset && remainingms > 0 || isPositiveOffset && remainingms < 0) {
            return new Date(date2.getTime() + ms);
          }
          date2 = isNegativeOffset ? weekBoundary : intervalDay.offset(weekBoundary, 2);
          var completeWeeks = Math.floor(remainingms / millisPerWorkWeek);
          date2 = intervalDay.offset(date2, completeWeeks * 7);
          remainingms -= completeWeeks * millisPerWorkWeek;
          date2 = new Date(date2.getTime() + remainingms);
          return date2;
        };
        skipWeekends2.copy = function() {
          return skipWeekends2;
        };
        return skipWeekends2;
      };
      var skipWeekends = function() {
        return base(function(date2) {
          return date2.getDay();
        }, d3Time.timeDay, d3Time.timeSaturday, d3Time.timeMonday);
      };
      var skipUtcWeekends = function() {
        return base(function(date2) {
          return date2.getUTCDay();
        }, d3Time.utcDay, d3Time.utcSaturday, d3Time.utcMonday);
      };
      var provider = function provider2() {
        for (var _len = arguments.length, ranges = new Array(_len), _key = 0; _key < _len; _key++) {
          ranges[_key] = arguments[_key];
        }
        var inRange = function inRange2(number4, range2) {
          return number4 > range2[0] && number4 < range2[1];
        };
        var surroundsRange = function surroundsRange2(inner, outer) {
          return inner[0] >= outer[0] && inner[1] <= outer[1];
        };
        var identity9 = {};
        identity9.distance = function(start2, end) {
          start2 = identity9.clampUp(start2);
          end = identity9.clampDown(end);
          var surroundedRanges = ranges.filter(function(r) {
            return surroundsRange(r, [start2, end]);
          });
          var rangeSizes = surroundedRanges.map(function(r) {
            return r[1] - r[0];
          });
          return end - start2 - rangeSizes.reduce(function(total, current) {
            return total + current;
          }, 0);
        };
        var add = function add2(value, offset) {
          return value instanceof Date ? new Date(value.getTime() + offset) : value + offset;
        };
        identity9.offset = function(location, offset) {
          if (offset > 0) {
            var _ret = function() {
              var currentLocation = identity9.clampUp(location);
              var offsetRemaining = offset;
              while (offsetRemaining > 0) {
                var futureRanges = ranges.filter(function(r) {
                  return r[0] > currentLocation;
                }).sort(function(a4, b4) {
                  return a4[0] - b4[0];
                });
                if (futureRanges.length) {
                  var nextRange = futureRanges[0];
                  var delta = nextRange[0] - currentLocation;
                  if (delta > offsetRemaining) {
                    currentLocation = add(currentLocation, offsetRemaining);
                    offsetRemaining = 0;
                  } else {
                    currentLocation = nextRange[1];
                    offsetRemaining -= delta;
                  }
                } else {
                  currentLocation = add(currentLocation, offsetRemaining);
                  offsetRemaining = 0;
                }
              }
              return {
                v: currentLocation
              };
            }();
            if (_typeof2(_ret) === "object")
              return _ret.v;
          } else {
            var _ret2 = function() {
              var currentLocation = identity9.clampDown(location);
              var offsetRemaining = offset;
              while (offsetRemaining < 0) {
                var futureRanges = ranges.filter(function(r) {
                  return r[1] < currentLocation;
                }).sort(function(a4, b4) {
                  return b4[0] - a4[0];
                });
                if (futureRanges.length) {
                  var nextRange = futureRanges[0];
                  var delta = nextRange[1] - currentLocation;
                  if (delta < offsetRemaining) {
                    currentLocation = add(currentLocation, offsetRemaining);
                    offsetRemaining = 0;
                  } else {
                    currentLocation = nextRange[0];
                    offsetRemaining -= delta;
                  }
                } else {
                  currentLocation = add(currentLocation, offsetRemaining);
                  offsetRemaining = 0;
                }
              }
              return {
                v: currentLocation
              };
            }();
            if (_typeof2(_ret2) === "object")
              return _ret2.v;
          }
        };
        identity9.clampUp = function(d2) {
          return ranges.reduce(function(value, range2) {
            return inRange(value, range2) ? range2[1] : value;
          }, d2);
        };
        identity9.clampDown = function(d2) {
          return ranges.reduce(function(value, range2) {
            return inRange(value, range2) ? range2[0] : value;
          }, d2);
        };
        identity9.copy = function() {
          return identity9;
        };
        return identity9;
      };
      var millisPerDay = 24 * 3600 * 1e3;
      var dayBoundary = "00:00:00.000";
      var SOD = "SOD";
      var EOD = "EOD";
      function standardiseTimeString(timeString) {
        if (arguments.length !== 1 || typeof timeString !== "string") {
          throw "Expected single argument of type string";
        }
        var isPositiveIntegerUpTo = function isPositiveIntegerUpTo2(toCheck, upperBound) {
          if (!Number.isInteger(toCheck))
            return false;
          return toCheck >= 0 && toCheck <= upperBound;
        };
        var result = [0, 0, 0, 0];
        var time_components = timeString.split(":");
        if (time_components.length < 2 || time_components.length > 3) {
          throw "Expected an argument wiht 2 or 3 colon delimited parts.";
        }
        result[0] = isPositiveIntegerUpTo(parseInt(time_components[0], 10), 23) ? parseInt(time_components[0], 10) : function() {
          throw "'Hours' component must be an int between 0 and 23, but was '".concat(time_components[0], "'");
        }();
        result[1] = isPositiveIntegerUpTo(parseInt(time_components[1], 10), 59) ? parseInt(time_components[1], 10) : function() {
          throw "'Minutes' component must be an int between 0 and 59, but was '".concat(time_components[1], "'");
        }();
        if (time_components.length === 3) {
          var ms_components = time_components[2].split(".").map(function(x5) {
            return parseInt(x5, 10);
          });
          result[2] = isPositiveIntegerUpTo(ms_components[0], 59) ? ms_components[0] : function() {
            throw "'Seconds' component must be an int between 0 and 59, but was '".concat(ms_components[0], "'");
          }();
          if (ms_components.length === 2) {
            result[3] = isPositiveIntegerUpTo(ms_components[1], 999) ? ms_components[1] : function() {
              throw "'Miliseconds' component must be an int between 0 and 999, but was '".concat(ms_components[1], "'");
            }();
          }
        }
        return "".concat(result[0].toString(10).padStart(2, "0"), ":").concat(result[1].toString(10).padStart(2, "0"), ":").concat(result[2].toString(10).padStart(2, "0"), ".").concat(result[3].toString(10).padStart(3, "0"));
      }
      function nonTradingTimeRange(timeRangeTuple, dateTimeUtility2) {
        if (arguments.length != 2 || !Array.isArray(timeRangeTuple) || timeRangeTuple.length !== 2 || typeof timeRangeTuple[0] !== "string" || typeof timeRangeTuple[1] !== "string") {
          throw "Expected argument is a single string[] of length 2.";
        }
        if (timeRangeTuple[0] === SOD) {
          timeRangeTuple[0] = dayBoundary;
        }
        if (timeRangeTuple[1] === EOD) {
          timeRangeTuple[1] = dayBoundary;
        }
        var startTime = standardiseTimeString(timeRangeTuple[0]);
        var endTime = standardiseTimeString(timeRangeTuple[1]);
        if (endTime !== dayBoundary && startTime > endTime) {
          throw "Time range start time '".concat(startTime, "' must be before end time '").concat(endTime, "' or both must equal ").concat(dayBoundary);
        }
        var lenghtInMs = dateTimeUtility2.setTime(new Date(endTime === dayBoundary ? millisPerDay : 0), endTime) - dateTimeUtility2.setTime(new Date(0), startTime);
        var instance = {
          startTime,
          endTime,
          lenghtInMs
        };
        instance.isInRange = function(date2) {
          var time3 = dateTimeUtility2.getTimeString(date2);
          if (instance.startTime <= time3 && (instance.endTime === dayBoundary || instance.endTime > time3)) {
            return true;
          }
          return false;
        };
        return instance;
      }
      var tradingDay = function tradingDay2(rawDiscontinuityTimeRanges, dateTimeUtility2) {
        var nonTradingTimeRanges = rawDiscontinuityTimeRanges.map(function(rawRange) {
          return nonTradingTimeRange(rawRange, dateTimeUtility2);
        }).sort(function(a4, b4) {
          return a4.startTime < b4.startTime ? -1 : a4.startTime > b4.startTime ? 1 : 0;
        });
        var totalTradingTimeInMiliseconds = millisPerDay - nonTradingTimeRanges.reduce(function(total, range2) {
          return total + range2.lenghtInMs;
        }, 0);
        var totalTradingMillisecondsBetween = function totalTradingMillisecondsBetween2(intervalStart, intervalEnd) {
          if (intervalStart.getTime() === intervalEnd.getTime()) {
            return 0;
          }
          if (dateTimeUtility2.dayInterval(intervalStart).getTime() !== dateTimeUtility2.dayInterval(intervalEnd).getTime() && dateTimeUtility2.getStartOfNextDay(intervalStart).getTime() !== intervalEnd.getTime()) {
            throw "tradingDay.totalTradingMillisecondsBetween arguments must be on the same day or intervalEnd must be the start of the next day instead: intervalStart: '".concat(intervalStart, "'; intervalEnd: '").concat(intervalEnd, "'");
          }
          var total = 0;
          var relevantDiscontinuityRanges = nonTradingTimeRanges.filter(function(range2) {
            return range2.endTime === dayBoundary || dateTimeUtility2.setTime(intervalStart, range2.endTime) >= intervalStart;
          });
          var _iterator = _createForOfIteratorHelper(relevantDiscontinuityRanges), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var nonTradingRange = _step.value;
              var nonTradingStart = dateTimeUtility2.setTime(intervalStart, nonTradingRange.startTime);
              var nonTradingEnd = nonTradingRange.endTime === dayBoundary ? dateTimeUtility2.getStartOfNextDay(intervalStart) : dateTimeUtility2.setTime(intervalStart, nonTradingRange.endTime);
              if (intervalStart < nonTradingStart && intervalEnd < nonTradingStart) {
                return total + dateTimeUtility2.msInterval.count(intervalStart, intervalEnd);
              }
              if (intervalStart < nonTradingStart) {
                total += dateTimeUtility2.msInterval.count(intervalStart, nonTradingStart);
              }
              if (intervalEnd < nonTradingEnd) {
                return total;
              }
              intervalStart = nonTradingEnd;
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          return total + dateTimeUtility2.msInterval.count(intervalStart, intervalEnd);
        };
        var offset = function offset2(date2, ms) {
          if (ms === 0) {
            return [date2, ms];
          }
          var offsetDate = dateTimeUtility2.msInterval.offset(date2, ms);
          var nonTradingRanges = ms > 0 ? nonTradingTimeRanges.filter(function(range2) {
            return dateTimeUtility2.setTime(date2, range2.startTime) >= date2;
          }) : nonTradingTimeRanges.filter(function(range2) {
            return dateTimeUtility2.setTime(date2, range2.startTime) < date2;
          }).reverse();
          if (nonTradingRanges.length === 0) {
            return [dateTimeUtility2.msInterval.offset(date2, ms), 0];
          }
          if (ms > 0) {
            var _iterator2 = _createForOfIteratorHelper(nonTradingRanges), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var nonTradingRange = _step2.value;
                var rangeStart = dateTimeUtility2.setTime(date2, nonTradingRange.startTime);
                if (rangeStart <= offsetDate) {
                  ms -= dateTimeUtility2.msInterval.count(date2, rangeStart);
                  date2 = nonTradingRange.endTime === dayBoundary ? dateTimeUtility2.getStartOfNextDay(date2) : dateTimeUtility2.setTime(date2, nonTradingRange.endTime);
                  offsetDate = dateTimeUtility2.msInterval.offset(date2, ms);
                }
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
            ms -= dateTimeUtility2.msInterval.count(date2, offsetDate);
          } else {
            var _iterator3 = _createForOfIteratorHelper(nonTradingRanges), _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                var _nonTradingRange = _step3.value;
                var endTime = _nonTradingRange.endTime === dayBoundary ? dateTimeUtility2.getStartOfNextDay(date2) : dateTimeUtility2.setTime(date2, _nonTradingRange.endTime);
                if (offsetDate < endTime) {
                  ms += dateTimeUtility2.msInterval.count(endTime, date2) + 1;
                  date2 = dateTimeUtility2.msInterval.offset(dateTimeUtility2.setTime(date2, _nonTradingRange.startTime), -1);
                  offsetDate = dateTimeUtility2.msInterval.offset(date2, ms);
                }
              }
            } catch (err2) {
              _iterator3.e(err2);
            } finally {
              _iterator3.f();
            }
            ms += dateTimeUtility2.msInterval.count(offsetDate, date2);
          }
          if (ms !== 0) {
            throw "tradingDay.offset was called with an offset that spans more than a day";
          }
          return [offsetDate, ms];
        };
        return {
          totalTradingTimeInMiliseconds,
          nonTradingTimeRanges,
          totalTradingMillisecondsBetween,
          offset
        };
      };
      var dateTimeUtility = function dateTimeUtility2(setTimeForDate, getDay, getTimeComponentArray, dayInterval, msInterval) {
        var utility = {};
        utility.getTimeComponentArrayFromString = function(timeString) {
          return [timeString.slice(0, 2), timeString.slice(3, 5), timeString.slice(6, 8), timeString.slice(9, 12)];
        };
        utility.getTimeString = function(date2) {
          var _getTimeComponentArra = getTimeComponentArray(date2).map(function(x5) {
            return x5.toString(10).padStart(2, "0");
          }), _getTimeComponentArra2 = _slicedToArray(_getTimeComponentArra, 4), hh = _getTimeComponentArra2[0], mm = _getTimeComponentArra2[1], ss = _getTimeComponentArra2[2], ms = _getTimeComponentArra2[3];
          return "".concat(hh, ":").concat(mm, ":").concat(ss, ".").concat(ms.padStart(3, "0"));
        };
        utility.setTime = function(date2, timeString) {
          var offsetInmilliSeconds = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
          var _utility$getTimeCompo = utility.getTimeComponentArrayFromString(timeString), _utility$getTimeCompo2 = _slicedToArray(_utility$getTimeCompo, 4), hh = _utility$getTimeCompo2[0], mm = _utility$getTimeCompo2[1], ss = _utility$getTimeCompo2[2], ms = _utility$getTimeCompo2[3];
          return msInterval.offset(setTimeForDate(date2, hh, mm, ss, ms), offsetInmilliSeconds);
        };
        utility.getStartOfNextDay = function(date2) {
          return dayInterval.offset(dayInterval.floor(date2), 1);
        };
        utility.getEndOfPreviousDay = function(date2) {
          return msInterval.offset(dayInterval.floor(date2), -1);
        };
        utility.dayInterval = dayInterval;
        utility.msInterval = msInterval;
        utility.getDay = getDay;
        return utility;
      };
      var localDateTimeUtility = dateTimeUtility(function(date2, hh, mm, ss, ms) {
        return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), hh, mm, ss, ms);
      }, function(date2) {
        return date2.getDay();
      }, function(date2) {
        return [date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()];
      }, d3Time.timeDay, d3Time.timeMillisecond);
      var base$1 = function base2(nonTradingPattern, dateTimeUtility2) {
        var getDayPatternOrDefault = function getDayPatternOrDefault2(day) {
          return nonTradingPattern[day] === void 0 ? [] : nonTradingPattern[day];
        };
        var tradingDays = [tradingDay(getDayPatternOrDefault("Sunday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Monday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Tuesday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Wednesday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Thursday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Friday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Saturday"), dateTimeUtility2)];
        var totalTradingWeekMilliseconds = tradingDays.reduce(function(total, tradingDay2) {
          return total + tradingDay2.totalTradingTimeInMiliseconds;
        }, 0);
        if (totalTradingWeekMilliseconds === 0) {
          throw "Trading pattern must yield at least 1 ms of trading time";
        }
        var instance = {
          tradingDays,
          totalTradingWeekMilliseconds
        };
        instance.clampUp = function(date2) {
          var tradingDay2 = tradingDays[dateTimeUtility2.getDay(date2)];
          var _iterator = _createForOfIteratorHelper(tradingDay2.nonTradingTimeRanges), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var range2 = _step.value;
              if (range2.isInRange(date2)) {
                return range2.endTime === dayBoundary ? instance.clampUp(dateTimeUtility2.getStartOfNextDay(date2)) : dateTimeUtility2.setTime(date2, range2.endTime);
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          return date2;
        };
        instance.clampDown = function(date2) {
          var tradingDay2 = tradingDays[dateTimeUtility2.getDay(date2)];
          var _iterator2 = _createForOfIteratorHelper(tradingDay2.nonTradingTimeRanges), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var range2 = _step2.value;
              if (range2.isInRange(date2)) {
                return range2.startTime === dayBoundary ? instance.clampDown(dateTimeUtility2.getEndOfPreviousDay(date2)) : dateTimeUtility2.setTime(date2, range2.startTime, -1);
              }
            }
          } catch (err2) {
            _iterator2.e(err2);
          } finally {
            _iterator2.f();
          }
          return date2;
        };
        instance.distance = function(startDate, endDate) {
          if (startDate.getTime() === endDate.getTime()) {
            return 0;
          }
          var _ref = startDate <= endDate ? [startDate, endDate, 1] : [endDate, startDate, -1], _ref2 = _slicedToArray(_ref, 3), start2 = _ref2[0], end = _ref2[1], factor = _ref2[2];
          if (dateTimeUtility2.dayInterval(start2).getTime() === dateTimeUtility2.dayInterval(end).getTime()) {
            return instance.tradingDays[dateTimeUtility2.getDay(start2)].totalTradingMillisecondsBetween(start2, end);
          }
          var total = instance.tradingDays[dateTimeUtility2.getDay(start2)].totalTradingMillisecondsBetween(start2, dateTimeUtility2.dayInterval.offset(dateTimeUtility2.dayInterval(start2), 1)) + instance.tradingDays[dateTimeUtility2.getDay(end)].totalTradingMillisecondsBetween(dateTimeUtility2.dayInterval(end), end);
          if (dateTimeUtility2.dayInterval.count(start2, end) === 1) {
            return total;
          }
          start2 = dateTimeUtility2.dayInterval.offset(dateTimeUtility2.dayInterval(start2), 1);
          end = dateTimeUtility2.dayInterval(end);
          return factor * dateTimeUtility2.dayInterval.range(start2, end).reduce(function(runningTotal, currentDay, currentIndex, arr) {
            var nextDay = currentIndex < arr.length - 1 ? arr[currentIndex + 1] : dateTimeUtility2.dayInterval.offset(currentDay, 1);
            var isDstBoundary = nextDay - currentDay !== millisPerDay;
            var tradingDay2 = instance.tradingDays[dateTimeUtility2.getDay(currentDay)];
            return runningTotal += isDstBoundary ? tradingDay2.totalTradingMillisecondsBetween(currentDay, nextDay) : tradingDay2.totalTradingTimeInMiliseconds;
          }, total);
        };
        instance.offset = function(date2, ms) {
          date2 = ms >= 0 ? instance.clampUp(date2) : instance.clampDown(date2);
          var isDstBoundary = function isDstBoundary2(d2) {
            return dateTimeUtility2.dayInterval.offset(d2) - dateTimeUtility2.dayInterval(d2) !== millisPerDay;
          };
          var moveToDayBoundary = function moveToDayBoundary2(tradingDay3, date3, ms2) {
            if (ms2 < 0) {
              var dateFloor = dateTimeUtility2.dayInterval(date3);
              var distanceToStartOfDay = tradingDay3.totalTradingMillisecondsBetween(dateFloor, date3);
              return Math.abs(ms2) <= distanceToStartOfDay ? tradingDay3.offset(date3, ms2) : [instance.clampDown(dateTimeUtility2.msInterval.offset(dateFloor, -1)), ms2 + distanceToStartOfDay + 1];
            } else {
              var nextDate = dateTimeUtility2.getStartOfNextDay(date3);
              var distanceToDayBoundary = tradingDay3.totalTradingMillisecondsBetween(date3, nextDate);
              return ms2 < distanceToDayBoundary ? tradingDay3.offset(date3, ms2) : [instance.clampUp(nextDate), ms2 - distanceToDayBoundary];
            }
          };
          if (ms === 0)
            return date2;
          var moveDateDelegate = ms < 0 ? function(date3, remainingMs, tradingDayMs) {
            return [instance.clampDown(dateTimeUtility2.dayInterval.offset(date3, -1)), remainingMs + tradingDayMs];
          } : function(date3, remainingMs, tradingDayMs) {
            return [instance.clampUp(dateTimeUtility2.dayInterval.offset(date3)), remainingMs - tradingDayMs];
          };
          var tradingDay2 = instance.tradingDays[dateTimeUtility2.getDay(date2)];
          var _moveToDayBoundary = moveToDayBoundary(tradingDay2, date2, ms);
          var _moveToDayBoundary2 = _slicedToArray(_moveToDayBoundary, 2);
          date2 = _moveToDayBoundary2[0];
          ms = _moveToDayBoundary2[1];
          while (ms !== 0) {
            tradingDay2 = instance.tradingDays[dateTimeUtility2.getDay(date2)];
            if (isDstBoundary(date2)) {
              var _moveToDayBoundary3 = moveToDayBoundary(tradingDay2, date2, ms);
              var _moveToDayBoundary4 = _slicedToArray(_moveToDayBoundary3, 2);
              date2 = _moveToDayBoundary4[0];
              ms = _moveToDayBoundary4[1];
            } else {
              var _ref3 = Math.abs(ms) >= tradingDay2.totalTradingTimeInMiliseconds ? moveDateDelegate(date2, ms, tradingDay2.totalTradingTimeInMiliseconds) : moveToDayBoundary(tradingDay2, date2, ms);
              var _ref4 = _slicedToArray(_ref3, 2);
              date2 = _ref4[0];
              ms = _ref4[1];
            }
          }
          return date2;
        };
        instance.copy = function() {
          return instance;
        };
        return instance;
      };
      var skipWeeklyPattern = function(nonTradingHoursPattern) {
        return base$1(nonTradingHoursPattern, localDateTimeUtility);
      };
      var utcDateTimeUtility = dateTimeUtility(function(date2, hh, mm, ss, ms) {
        return new Date(Date.UTC(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), hh, mm, ss, ms));
      }, function(date2) {
        return date2.getUTCDay();
      }, function(date2) {
        return [date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds()];
      }, d3Time.utcDay, d3Time.utcMillisecond);
      var skipUtcWeeklyPattern = function(nonTradingUtcHoursPattern) {
        return base$1(nonTradingUtcHoursPattern, utcDateTimeUtility);
      };
      function linearExtent() {
        var accessors = [function(d2) {
          return d2;
        }];
        var pad3 = [0, 0];
        var padUnit = "percent";
        var symmetricalAbout = null;
        var include2 = [];
        var instance = function instance2(data) {
          var values = new Array(data.length);
          var _iterator = _createForOfIteratorHelper(accessors), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var accessor = _step.value;
              for (var i3 = 0; i3 < data.length; i3++) {
                var value = accessor(data[i3], i3);
                if (Array.isArray(value)) {
                  values.push.apply(values, _toConsumableArray(value));
                } else {
                  values.push(value);
                }
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          var extent2 = [d3Array.min(values), d3Array.max(values)];
          extent2[0] = extent2[0] == null ? d3Array.min(include2) : d3Array.min([extent2[0]].concat(_toConsumableArray(include2)));
          extent2[1] = extent2[1] == null ? d3Array.max(include2) : d3Array.max([extent2[1]].concat(_toConsumableArray(include2)));
          if (symmetricalAbout != null) {
            var halfRange = Math.max(Math.abs(extent2[1] - symmetricalAbout), Math.abs(extent2[0] - symmetricalAbout));
            extent2[0] = symmetricalAbout - halfRange;
            extent2[1] = symmetricalAbout + halfRange;
          }
          switch (padUnit) {
            case "domain": {
              extent2[0] -= pad3[0];
              extent2[1] += pad3[1];
              break;
            }
            case "percent": {
              var delta = extent2[1] - extent2[0];
              extent2[0] -= pad3[0] * delta;
              extent2[1] += pad3[1] * delta;
              break;
            }
            default:
              throw new Error("Unknown padUnit: ".concat(padUnit));
          }
          return extent2;
        };
        instance.accessors = function() {
          if (!arguments.length) {
            return accessors;
          }
          accessors = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.pad = function() {
          if (!arguments.length) {
            return pad3;
          }
          pad3 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.padUnit = function() {
          if (!arguments.length) {
            return padUnit;
          }
          padUnit = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.include = function() {
          if (!arguments.length) {
            return include2;
          }
          include2 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.symmetricalAbout = function() {
          if (!arguments.length) {
            return symmetricalAbout;
          }
          symmetricalAbout = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        return instance;
      }
      function time2() {
        var accessors = [];
        var pad3 = [0, 0];
        var padUnit = "percent";
        var symmetricalAbout = null;
        var include2 = [];
        var extent2 = linearExtent();
        var valueOf = function valueOf2(date2) {
          return date2 != null ? date2.valueOf() : null;
        };
        var instance = function instance2(data) {
          var adaptedAccessors = accessors.map(function(accessor) {
            return function() {
              var value = accessor.apply(void 0, arguments);
              return Array.isArray(value) ? value.map(valueOf) : valueOf(value);
            };
          });
          extent2.accessors(adaptedAccessors).pad(pad3).padUnit(padUnit).symmetricalAbout(symmetricalAbout != null ? symmetricalAbout.valueOf() : null).include(include2.map(function(date2) {
            return date2.valueOf();
          }));
          return extent2(data).map(function(value) {
            return new Date(value);
          });
        };
        instance.accessors = function() {
          if (!arguments.length) {
            return accessors;
          }
          accessors = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.pad = function() {
          if (!arguments.length) {
            return pad3;
          }
          pad3 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.padUnit = function() {
          if (!arguments.length) {
            return padUnit;
          }
          padUnit = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.include = function() {
          if (!arguments.length) {
            return include2;
          }
          include2 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.symmetricalAbout = function() {
          if (!arguments.length) {
            return symmetricalAbout;
          }
          symmetricalAbout = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        return instance;
      }
      function geometricBrownianMotion() {
        var period = 1;
        var steps = 20;
        var mu = 0.1;
        var sigma = 0.1;
        var random = d3Random.randomNormal();
        var geometricBrownianMotion2 = function geometricBrownianMotion3() {
          var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
          var timeStep = period / steps;
          var pathData = [];
          for (var i3 = 0; i3 < steps + 1; i3++) {
            pathData.push(value);
            var increment = random() * Math.sqrt(timeStep) * sigma + (mu - sigma * sigma / 2) * timeStep;
            value = value * Math.exp(increment);
          }
          return pathData;
        };
        geometricBrownianMotion2.period = function() {
          if (!arguments.length) {
            return period;
          }
          period = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.steps = function() {
          if (!arguments.length) {
            return steps;
          }
          steps = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.mu = function() {
          if (!arguments.length) {
            return mu;
          }
          mu = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.sigma = function() {
          if (!arguments.length) {
            return sigma;
          }
          sigma = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.random = function() {
          if (!arguments.length) {
            return random;
          }
          random = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        return geometricBrownianMotion2;
      }
      function functor$1(v2) {
        return typeof v2 === "function" ? v2 : function() {
          return v2;
        };
      }
      function financial() {
        var startDate = new Date();
        var startPrice = 100;
        var interval2 = d3Time.timeDay;
        var intervalStep = 1;
        var unitInterval = d3Time.timeYear;
        var unitIntervalStep = 1;
        var filter3 = null;
        var volume = function volume2() {
          var normal = d3Random.randomNormal(1, 0.1);
          return Math.ceil(normal() * 1e3);
        };
        var gbm = geometricBrownianMotion();
        var getOffsetPeriod = function getOffsetPeriod2(date2) {
          var unitMilliseconds = unitInterval.offset(date2, unitIntervalStep) - date2;
          return (interval2.offset(date2, intervalStep) - date2) / unitMilliseconds;
        };
        var calculateOHLC = function calculateOHLC2(start2, price) {
          var period = getOffsetPeriod(start2);
          var prices = gbm.period(period)(price);
          var ohlc2 = {
            date: start2,
            open: prices[0],
            high: Math.max.apply(Math, prices),
            low: Math.min.apply(Math, prices),
            close: prices[gbm.steps()]
          };
          ohlc2.volume = volume(ohlc2);
          return ohlc2;
        };
        var getNextDatum = function getNextDatum2(ohlc2) {
          var date2, price, filtered;
          do {
            date2 = ohlc2 ? interval2.offset(ohlc2.date, intervalStep) : new Date(startDate.getTime());
            price = ohlc2 ? ohlc2.close : startPrice;
            ohlc2 = calculateOHLC(date2, price);
            filtered = filter3 && !filter3(ohlc2);
          } while (filtered);
          return ohlc2;
        };
        var makeStream = function makeStream2() {
          var latest;
          var stream = {};
          stream.next = function() {
            var ohlc2 = getNextDatum(latest);
            latest = ohlc2;
            return ohlc2;
          };
          stream.take = function(numPoints) {
            return stream.until(function(d2, i3) {
              return !numPoints || numPoints < 0 || i3 === numPoints;
            });
          };
          stream.until = function(comparison) {
            var data = [];
            var index2 = 0;
            var ohlc2 = getNextDatum(latest);
            var compared = comparison && !comparison(ohlc2, index2);
            while (compared) {
              data.push(ohlc2);
              latest = ohlc2;
              ohlc2 = getNextDatum(latest);
              index2 += 1;
              compared = comparison && !comparison(ohlc2, index2);
            }
            return data;
          };
          return stream;
        };
        var financial2 = function financial3(numPoints) {
          return makeStream().take(numPoints);
        };
        financial2.stream = makeStream;
        if (typeof Symbol !== "function" || _typeof2(Symbol.iterator) !== "symbol") {
          throw new Error("d3fc-random-data depends on Symbol. Make sure that you load a polyfill in older browsers. See README.");
        }
        financial2[Symbol.iterator] = function() {
          var stream = makeStream();
          return {
            next: function next() {
              return {
                value: stream.next(),
                done: false
              };
            }
          };
        };
        financial2.startDate = function() {
          if (!arguments.length) {
            return startDate;
          }
          startDate = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.startPrice = function() {
          if (!arguments.length) {
            return startPrice;
          }
          startPrice = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.interval = function() {
          if (!arguments.length) {
            return interval2;
          }
          interval2 = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.intervalStep = function() {
          if (!arguments.length) {
            return intervalStep;
          }
          intervalStep = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.unitInterval = function() {
          if (!arguments.length) {
            return unitInterval;
          }
          unitInterval = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.unitIntervalStep = function() {
          if (!arguments.length) {
            return unitIntervalStep;
          }
          unitIntervalStep = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.filter = function() {
          if (!arguments.length) {
            return filter3;
          }
          filter3 = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.volume = function() {
          if (!arguments.length) {
            return volume;
          }
          volume = functor$1(arguments.length <= 0 ? void 0 : arguments[0]);
          return financial2;
        };
        rebindAll6(financial2, gbm);
        return financial2;
      }
      function skipWeekends$1(datum2) {
        var day = datum2.date.getDay();
        return !(day === 0 || day === 6);
      }
      function gdax() {
        var product = "BTC-USD";
        var start2 = null;
        var end = null;
        var granularity = null;
        var gdax2 = function gdax3() {
          var params = [];
          if (start2 != null) {
            params.push("start=" + start2.toISOString());
          }
          if (end != null) {
            params.push("end=" + end.toISOString());
          }
          if (granularity != null) {
            params.push("granularity=" + granularity);
          }
          var url = "https://api.gdax.com/products/" + product + "/candles?" + params.join("&");
          return d3Fetch.json(url).then(function(data) {
            return data.map(function(d2) {
              return {
                date: new Date(d2[0] * 1e3),
                open: d2[3],
                high: d2[2],
                low: d2[1],
                close: d2[4],
                volume: d2[5]
              };
            });
          });
        };
        gdax2.product = function(x5) {
          if (!arguments.length) {
            return product;
          }
          product = x5;
          return gdax2;
        };
        gdax2.start = function(x5) {
          if (!arguments.length) {
            return start2;
          }
          start2 = x5;
          return gdax2;
        };
        gdax2.end = function(x5) {
          if (!arguments.length) {
            return end;
          }
          end = x5;
          return gdax2;
        };
        gdax2.granularity = function(x5) {
          if (!arguments.length) {
            return granularity;
          }
          granularity = x5;
          return gdax2;
        };
        return gdax2;
      }
      function bucket() {
        var bucketSize = 10;
        var bucket2 = function bucket3(data) {
          return bucketSize <= 1 ? data.map(function(d2) {
            return [d2];
          }) : d3Array.range(0, Math.ceil(data.length / bucketSize)).map(function(i3) {
            return data.slice(i3 * bucketSize, (i3 + 1) * bucketSize);
          });
        };
        bucket2.bucketSize = function(x5) {
          if (!arguments.length) {
            return bucketSize;
          }
          bucketSize = x5;
          return bucket2;
        };
        return bucket2;
      }
      function largestTriangleOneBucket() {
        var dataBucketer = bucket();
        var x5 = function x6(d2) {
          return d2;
        };
        var y4 = function y5(d2) {
          return d2;
        };
        var largestTriangleOneBucket2 = function largestTriangleOneBucket3(data) {
          if (dataBucketer.bucketSize() >= data.length) {
            return data;
          }
          var pointAreas = calculateAreaOfPoints(data);
          var pointAreaBuckets = dataBucketer(pointAreas);
          var buckets = dataBucketer(data.slice(1, data.length - 1));
          var subsampledData = buckets.map(function(thisBucket, i3) {
            var pointAreaBucket = pointAreaBuckets[i3];
            var maxArea = d3Array.max(pointAreaBucket);
            var currentMaxIndex = pointAreaBucket.indexOf(maxArea);
            return thisBucket[currentMaxIndex];
          });
          return [].concat([data[0]], subsampledData, [data[data.length - 1]]);
        };
        function calculateAreaOfPoints(data) {
          var xyData = data.map(function(point8) {
            return [x5(point8), y4(point8)];
          });
          var pointAreas = d3Array.range(1, xyData.length - 1).map(function(i3) {
            var lastPoint = xyData[i3 - 1];
            var thisPoint = xyData[i3];
            var nextPoint = xyData[i3 + 1];
            return 0.5 * Math.abs((lastPoint[0] - nextPoint[0]) * (thisPoint[1] - lastPoint[1]) - (lastPoint[0] - thisPoint[0]) * (nextPoint[1] - lastPoint[1]));
          });
          return pointAreas;
        }
        rebind(largestTriangleOneBucket2, dataBucketer, "bucketSize");
        largestTriangleOneBucket2.x = function(d2) {
          if (!arguments.length) {
            return x5;
          }
          x5 = d2;
          return largestTriangleOneBucket2;
        };
        largestTriangleOneBucket2.y = function(d2) {
          if (!arguments.length) {
            return y4;
          }
          y4 = d2;
          return largestTriangleOneBucket2;
        };
        return largestTriangleOneBucket2;
      }
      function largestTriangleThreeBucket() {
        var x5 = function x6(d2) {
          return d2;
        };
        var y4 = function y5(d2) {
          return d2;
        };
        var dataBucketer = bucket();
        var largestTriangleThreeBucket2 = function largestTriangleThreeBucket3(data) {
          if (dataBucketer.bucketSize() >= data.length) {
            return data;
          }
          var buckets = dataBucketer(data.slice(1, data.length - 1));
          var firstBucket = data[0];
          var lastBucket = data[data.length - 1];
          var allBuckets = [].concat([firstBucket], buckets, [lastBucket]);
          var lastSelectedX = x5(firstBucket);
          var lastSelectedY = y4(firstBucket);
          var subsampledData = buckets.map(function(thisBucket, i3) {
            var nextAvgX = d3Array.mean(allBuckets[i3 + 1], x5);
            var nextAvgY = d3Array.mean(allBuckets[i3 + 1], y4);
            var xyData = thisBucket.map(function(item) {
              return [x5(item), y4(item)];
            });
            var areas = xyData.map(function(item) {
              return 0.5 * Math.abs((lastSelectedX - nextAvgX) * (item[1] - lastSelectedY) - (lastSelectedX - item[0]) * (nextAvgY - lastSelectedY));
            });
            var highestIndex = areas.indexOf(d3Array.max(areas));
            var highestXY = xyData[highestIndex];
            lastSelectedX = highestXY[0];
            lastSelectedY = highestXY[1];
            return thisBucket[highestIndex];
          });
          return [].concat([data[0]], subsampledData, [data[data.length - 1]]);
        };
        rebind(largestTriangleThreeBucket2, dataBucketer, "bucketSize");
        largestTriangleThreeBucket2.x = function(d2) {
          if (!arguments.length) {
            return x5;
          }
          x5 = d2;
          return largestTriangleThreeBucket2;
        };
        largestTriangleThreeBucket2.y = function(d2) {
          if (!arguments.length) {
            return y4;
          }
          y4 = d2;
          return largestTriangleThreeBucket2;
        };
        return largestTriangleThreeBucket2;
      }
      function modeMedian() {
        var dataBucketer = bucket();
        var value = function value2(d2) {
          return d2;
        };
        var modeMedian2 = function modeMedian3(data) {
          if (dataBucketer.bucketSize() > data.length) {
            return data;
          }
          var minMax = d3Array.extent(data, value);
          var buckets = dataBucketer(data.slice(1, data.length - 1));
          var subsampledData = buckets.map(function(thisBucket, i3) {
            var frequencies = {};
            var mostFrequent;
            var mostFrequentIndex;
            var singleMostFrequent = true;
            var values = thisBucket.map(value);
            var globalMinMax = values.filter(function(value2) {
              return value2 === minMax[0] || value2 === minMax[1];
            }).map(function(value2) {
              return values.indexOf(value2);
            })[0];
            if (globalMinMax !== void 0) {
              return thisBucket[globalMinMax];
            }
            values.forEach(function(item, i4) {
              if (frequencies[item] === void 0) {
                frequencies[item] = 0;
              }
              frequencies[item]++;
              if (frequencies[item] > frequencies[mostFrequent] || mostFrequent === void 0) {
                mostFrequent = item;
                mostFrequentIndex = i4;
                singleMostFrequent = true;
              } else if (frequencies[item] === frequencies[mostFrequent]) {
                singleMostFrequent = false;
              }
            });
            if (singleMostFrequent) {
              return thisBucket[mostFrequentIndex];
            } else {
              return thisBucket[Math.floor(thisBucket.length / 2)];
            }
          });
          return [].concat([data[0]], subsampledData, [data[data.length - 1]]);
        };
        rebind(modeMedian2, dataBucketer, "bucketSize");
        modeMedian2.value = function(x5) {
          if (!arguments.length) {
            return value;
          }
          value = x5;
          return modeMedian2;
        };
        return modeMedian2;
      }
      var functor$2 = function(v2) {
        return typeof v2 === "function" ? v2 : function() {
          return v2;
        };
      };
      var shapeOhlc = function() {
        var context = null;
        var x5 = function x6(d2) {
          return d2.date;
        };
        var open = function open2(d2) {
          return d2.open;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var close = function close2(d2) {
          return d2.close;
        };
        var orient = "vertical";
        var width = functor$2(3);
        var ohlc2 = function ohlc3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i3) {
            var xValue = x5(d2, i3);
            var yOpen = open(d2, i3);
            var yHigh = high(d2, i3);
            var yLow = low(d2, i3);
            var yClose = close(d2, i3);
            var halfWidth = width(d2, i3) / 2;
            if (orient === "vertical") {
              drawingContext.moveTo(xValue, yLow);
              drawingContext.lineTo(xValue, yHigh);
              drawingContext.moveTo(xValue, yOpen);
              drawingContext.lineTo(xValue - halfWidth, yOpen);
              drawingContext.moveTo(xValue, yClose);
              drawingContext.lineTo(xValue + halfWidth, yClose);
            } else {
              drawingContext.moveTo(yLow, xValue);
              drawingContext.lineTo(yHigh, xValue);
              drawingContext.moveTo(yOpen, xValue);
              drawingContext.lineTo(yOpen, xValue + halfWidth);
              drawingContext.moveTo(yClose, xValue);
              drawingContext.lineTo(yClose, xValue - halfWidth);
            }
          });
          return context ? null : drawingContext.toString();
        };
        ohlc2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return ohlc2;
        };
        ohlc2.x = function() {
          if (!arguments.length) {
            return x5;
          }
          x5 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.open = function() {
          if (!arguments.length) {
            return open;
          }
          open = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.close = function() {
          if (!arguments.length) {
            return close;
          }
          close = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return ohlc2;
        };
        return ohlc2;
      };
      var shapeBar = function() {
        var context = null;
        var x5 = function x6(d2) {
          return d2.x;
        };
        var y4 = function y5(d2) {
          return d2.y;
        };
        var horizontalAlign = "center";
        var verticalAlign = "center";
        var height = function height2(d2) {
          return d2.height;
        };
        var width = functor$2(3);
        var bar2 = function bar3(data, index2) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i3) {
            var xValue = x5.call(this, d2, index2 || i3);
            var yValue = y4.call(this, d2, index2 || i3);
            var barHeight = height.call(this, d2, index2 || i3);
            var barWidth = width.call(this, d2, index2 || i3);
            var horizontalOffset;
            switch (horizontalAlign) {
              case "left":
                horizontalOffset = barWidth;
                break;
              case "right":
                horizontalOffset = 0;
                break;
              case "center":
                horizontalOffset = barWidth / 2;
                break;
              default:
                throw new Error("Invalid horizontal alignment " + horizontalAlign);
            }
            var verticalOffset;
            switch (verticalAlign) {
              case "bottom":
                verticalOffset = -barHeight;
                break;
              case "top":
                verticalOffset = 0;
                break;
              case "center":
                verticalOffset = barHeight / 2;
                break;
              default:
                throw new Error("Invalid vertical alignment " + verticalAlign);
            }
            drawingContext.rect(xValue - horizontalOffset, yValue - verticalOffset, barWidth, barHeight);
          }, this);
          return context ? null : drawingContext.toString();
        };
        bar2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        bar2.x = function() {
          if (!arguments.length) {
            return x5;
          }
          x5 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.y = function() {
          if (!arguments.length) {
            return y4;
          }
          y4 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.horizontalAlign = function() {
          if (!arguments.length) {
            return horizontalAlign;
          }
          horizontalAlign = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        bar2.height = function() {
          if (!arguments.length) {
            return height;
          }
          height = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.verticalAlign = function() {
          if (!arguments.length) {
            return verticalAlign;
          }
          verticalAlign = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        return bar2;
      };
      var shapeCandlestick = function() {
        var context = null;
        var x5 = function x6(d2) {
          return d2.date;
        };
        var open = function open2(d2) {
          return d2.open;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var close = function close2(d2) {
          return d2.close;
        };
        var width = functor$2(3);
        var candlestick2 = function candlestick3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i3) {
            var xValue = x5(d2, i3);
            var yOpen = open(d2, i3);
            var yHigh = high(d2, i3);
            var yLow = low(d2, i3);
            var yClose = close(d2, i3);
            var barWidth = width(d2, i3);
            var halfBarWidth = barWidth / 2;
            drawingContext.rect(xValue - halfBarWidth, yOpen, barWidth, yClose - yOpen);
            drawingContext.moveTo(xValue, Math.min(yClose, yOpen));
            drawingContext.lineTo(xValue, yHigh);
            drawingContext.moveTo(xValue, Math.max(yClose, yOpen));
            drawingContext.lineTo(xValue, yLow);
          });
          return context ? null : drawingContext.toString();
        };
        candlestick2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return candlestick2;
        };
        candlestick2.x = function() {
          if (!arguments.length) {
            return x5;
          }
          x5 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.open = function() {
          if (!arguments.length) {
            return open;
          }
          open = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.close = function() {
          if (!arguments.length) {
            return close;
          }
          close = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        return candlestick2;
      };
      var shapeBoxPlot = function() {
        var context = null;
        var value = function value2(d2) {
          return d2.value;
        };
        var median2 = function median3(d2) {
          return d2.median;
        };
        var upperQuartile = function upperQuartile2(d2) {
          return d2.upperQuartile;
        };
        var lowerQuartile = function lowerQuartile2(d2) {
          return d2.lowerQuartile;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var orient = "vertical";
        var width = functor$2(5);
        var cap = functor$2(0.5);
        var boxPlot2 = function boxPlot3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i3) {
            var _value = value(d2, i3);
            var _width = width(d2, i3);
            var halfWidth = _width / 2;
            var capWidth = _width * cap(d2, i3);
            var halfCapWidth = capWidth / 2;
            var _high = high(d2, i3);
            var _upperQuartile = upperQuartile(d2, i3);
            var _median = median2(d2, i3);
            var _lowerQuartile = lowerQuartile(d2, i3);
            var _low = low(d2, i3);
            var upperQuartileToLowerQuartile = _lowerQuartile - _upperQuartile;
            if (orient === "vertical") {
              drawingContext.moveTo(_value - halfCapWidth, _high);
              drawingContext.lineTo(_value + halfCapWidth, _high);
              drawingContext.moveTo(_value, _high);
              drawingContext.lineTo(_value, _upperQuartile);
              drawingContext.rect(_value - halfWidth, _upperQuartile, _width, upperQuartileToLowerQuartile);
              drawingContext.moveTo(_value - halfWidth, _median);
              drawingContext.lineTo(_value + halfWidth, _median);
              drawingContext.moveTo(_value, _lowerQuartile);
              drawingContext.lineTo(_value, _low);
              drawingContext.moveTo(_value - halfCapWidth, _low);
              drawingContext.lineTo(_value + halfCapWidth, _low);
            } else {
              drawingContext.moveTo(_low, _value - halfCapWidth);
              drawingContext.lineTo(_low, _value + halfCapWidth);
              drawingContext.moveTo(_low, _value);
              drawingContext.lineTo(_lowerQuartile, _value);
              drawingContext.rect(_lowerQuartile, _value - halfWidth, -upperQuartileToLowerQuartile, _width);
              drawingContext.moveTo(_median, _value - halfWidth);
              drawingContext.lineTo(_median, _value + halfWidth);
              drawingContext.moveTo(_upperQuartile, _value);
              drawingContext.lineTo(_high, _value);
              drawingContext.moveTo(_high, _value - halfCapWidth);
              drawingContext.lineTo(_high, _value + halfCapWidth);
            }
          });
          return context ? null : drawingContext.toString();
        };
        boxPlot2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        boxPlot2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.median = function() {
          if (!arguments.length) {
            return median2;
          }
          median2 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.upperQuartile = function() {
          if (!arguments.length) {
            return upperQuartile;
          }
          upperQuartile = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.lowerQuartile = function() {
          if (!arguments.length) {
            return lowerQuartile;
          }
          lowerQuartile = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        boxPlot2.cap = function() {
          if (!arguments.length) {
            return cap;
          }
          cap = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        return boxPlot2;
      };
      var shapeErrorBar = function() {
        var context = null;
        var value = function value2(d2) {
          return d2.x;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var orient = "vertical";
        var width = functor$2(5);
        var errorBar2 = function errorBar3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i3) {
            var _value = value(d2, i3);
            var _width = width(d2, i3);
            var halfWidth = _width / 2;
            var _high = high(d2, i3);
            var _low = low(d2, i3);
            if (orient === "vertical") {
              drawingContext.moveTo(_value - halfWidth, _high);
              drawingContext.lineTo(_value + halfWidth, _high);
              drawingContext.moveTo(_value, _high);
              drawingContext.lineTo(_value, _low);
              drawingContext.moveTo(_value - halfWidth, _low);
              drawingContext.lineTo(_value + halfWidth, _low);
            } else {
              drawingContext.moveTo(_low, _value - halfWidth);
              drawingContext.lineTo(_low, _value + halfWidth);
              drawingContext.moveTo(_low, _value);
              drawingContext.lineTo(_high, _value);
              drawingContext.moveTo(_high, _value - halfWidth);
              drawingContext.lineTo(_high, _value + halfWidth);
            }
          });
          return context ? null : drawingContext.toString();
        };
        errorBar2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        errorBar2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        return errorBar2;
      };
      var functor$3 = function(d2) {
        return typeof d2 === "function" ? d2 : function() {
          return d2;
        };
      };
      var effectivelyZero = 1e-6;
      var isTransition = function isTransition2(selectionOrTransition) {
        return selectionOrTransition.selection() !== selectionOrTransition;
      };
      var dataJoin3 = function(element2, className) {
        element2 = element2 || "g";
        var key2 = function key3(_3, i3) {
          return i3;
        };
        var explicitTransition = null;
        var dataJoin4 = function dataJoin5(container, data) {
          data = data || function(d2) {
            return d2;
          };
          var selection3 = container.selection();
          var implicitTransition = isTransition(container) ? container : null;
          var selected = selection3.selectChildren(className == null ? element2 : "".concat(element2, ".").concat(className));
          var update = selected.data(data, key2);
          var enter = update.enter().append(element2).attr("class", className);
          var exit = update.exit();
          update = update.merge(enter);
          var transition2 = implicitTransition || explicitTransition;
          if (transition2) {
            update = update.transition(transition2).style("opacity", 1);
            enter.style("opacity", effectivelyZero);
            exit = exit.transition(transition2).style("opacity", effectivelyZero);
          }
          exit.remove();
          update.enter = function() {
            return enter;
          };
          update.exit = function() {
            return exit;
          };
          return update;
        };
        dataJoin4.element = function() {
          if (!arguments.length) {
            return element2;
          }
          element2 = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        dataJoin4.className = function() {
          if (!arguments.length) {
            return className;
          }
          className = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        dataJoin4.key = function() {
          if (!arguments.length) {
            return key2;
          }
          key2 = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        dataJoin4.transition = function() {
          if (!arguments.length) {
            return explicitTransition;
          }
          explicitTransition = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        return dataJoin4;
      };
      var label = function(layoutStrategy) {
        var decorate = function decorate2() {
        };
        var size = function size2() {
          return [0, 0];
        };
        var position = function position2(d2, i3) {
          return [d2.x, d2.y];
        };
        var strategy = layoutStrategy || function(x5) {
          return x5;
        };
        var component = function component2() {
        };
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var dataJoin$1 = dataJoin3("g", "label");
        var label2 = function label3(selection3) {
          selection3.each(function(data, index2, group3) {
            var g2 = dataJoin$1(d3Selection.select(group3[index2]), data).call(component);
            var nodes = g2.nodes();
            var childRects = nodes.map(function(node, i3) {
              var d2 = d3Selection.select(node).datum();
              var pos = position(d2, i3, nodes);
              var childPos = [xScale(pos[0]), yScale(pos[1])];
              var childSize = size(d2, i3, nodes);
              return {
                hidden: false,
                x: childPos[0],
                y: childPos[1],
                width: childSize[0],
                height: childSize[1]
              };
            });
            var layout = strategy(childRects);
            g2.attr("style", function(_3, i3) {
              return "display:" + (layout[i3].hidden ? "none" : "inherit");
            }).attr("transform", function(_3, i3) {
              return "translate(" + layout[i3].x + ", " + layout[i3].y + ")";
            }).attr("layout-width", function(_3, i3) {
              return layout[i3].width;
            }).attr("layout-height", function(_3, i3) {
              return layout[i3].height;
            }).attr("anchor-x", function(d2, i3, g3) {
              return childRects[i3].x - layout[i3].x;
            }).attr("anchor-y", function(d2, i3, g3) {
              return childRects[i3].y - layout[i3].y;
            });
            g2.call(component);
            decorate(g2, data, index2);
          });
        };
        rebindAll6(label2, dataJoin$1, include("key"));
        rebindAll6(label2, strategy);
        label2.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = functor$3(arguments.length <= 0 ? void 0 : arguments[0]);
          return label2;
        };
        label2.position = function() {
          if (!arguments.length) {
            return position;
          }
          position = functor$3(arguments.length <= 0 ? void 0 : arguments[0]);
          return label2;
        };
        label2.component = function() {
          if (!arguments.length) {
            return component;
          }
          component = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        label2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        label2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        label2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        return label2;
      };
      var textLabel = function(layoutStrategy) {
        var padding = 2;
        var value = function value2(x5) {
          return x5;
        };
        var textJoin = dataJoin3("text");
        var rectJoin = dataJoin3("rect");
        var pointJoin = dataJoin3("circle");
        var textLabel2 = function textLabel3(selection3) {
          selection3.each(function(data, index2, group3) {
            var node = group3[index2];
            var nodeSelection = d3Selection.select(node);
            var width = Number(node.getAttribute("layout-width"));
            var height = Number(node.getAttribute("layout-height"));
            var rect = rectJoin(nodeSelection, [data]);
            rect.attr("width", width).attr("height", height);
            var anchorX = Number(node.getAttribute("anchor-x"));
            var anchorY = Number(node.getAttribute("anchor-y"));
            var circle2 = pointJoin(nodeSelection, [data]);
            circle2.attr("r", 2).attr("cx", anchorX).attr("cy", anchorY);
            var text = textJoin(nodeSelection, [data]);
            text.enter().attr("dy", "0.9em").attr("transform", "translate(".concat(padding, ", ").concat(padding, ")"));
            text.text(value);
          });
        };
        textLabel2.padding = function() {
          if (!arguments.length) {
            return padding;
          }
          padding = arguments.length <= 0 ? void 0 : arguments[0];
          return textLabel2;
        };
        textLabel2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = functor$3(arguments.length <= 0 ? void 0 : arguments[0]);
          return textLabel2;
        };
        return textLabel2;
      };
      var isIntersecting = function isIntersecting2(a4, b4) {
        return !(a4.x >= b4.x + b4.width || a4.x + a4.width <= b4.x || a4.y >= b4.y + b4.height || a4.y + a4.height <= b4.y);
      };
      var intersect2 = function(a4, b4) {
        if (isIntersecting(a4, b4)) {
          var left = Math.max(a4.x, b4.x);
          var right = Math.min(a4.x + a4.width, b4.x + b4.width);
          var top = Math.max(a4.y, b4.y);
          var bottom = Math.min(a4.y + a4.height, b4.y + b4.height);
          return (right - left) * (bottom - top);
        } else {
          return 0;
        }
      };
      var collisionArea = function collisionArea2(rectangles, index2) {
        return d3Array.sum(rectangles.map(function(d2, i3) {
          return index2 === i3 ? 0 : intersect2(rectangles[index2], d2);
        }));
      };
      var getPlacement = function getPlacement2(x5, y4, width, height, location) {
        return {
          x: x5,
          y: y4,
          width,
          height,
          location
        };
      };
      var placements = function(label2) {
        var x5 = label2.x;
        var y4 = label2.y;
        var width = label2.width;
        var height = label2.height;
        return [getPlacement(x5, y4, width, height, "bottom-right"), getPlacement(x5 - width, y4, width, height, "bottom-left"), getPlacement(x5 - width, y4 - height, width, height, "top-left"), getPlacement(x5, y4 - height, width, height, "top-right"), getPlacement(x5, y4 - height / 2, width, height, "middle-right"), getPlacement(x5 - width / 2, y4, width, height, "bottom-center"), getPlacement(x5 - width, y4 - height / 2, width, height, "middle-left"), getPlacement(x5 - width / 2, y4 - height, width, height, "top-center")];
      };
      var substitute = function substitute2(array5, index2, substitution) {
        return [].concat(_toConsumableArray(array5.slice(0, index2)), [substitution], _toConsumableArray(array5.slice(index2 + 1)));
      };
      var lessThan = function lessThan2(a4, b4) {
        return a4 < b4;
      };
      var layoutComponent = function layoutComponent2() {
        var score = null;
        var winningScore = lessThan;
        var locationScore = function locationScore2() {
          return 0;
        };
        var rectangles;
        var evaluatePlacement = function evaluatePlacement2(placement, index2) {
          return score - locationScore(rectangles[index2], index2, rectangles) + locationScore(placement, index2, substitute(rectangles, index2, placement));
        };
        var layout = function layout2(placement, index2) {
          if (!score) {
            score = d3Array.sum(rectangles.map(function(r, i3) {
              return locationScore(r, i3, rectangles);
            }));
          }
          var newScore = evaluatePlacement(placement, index2);
          if (winningScore(newScore, score)) {
            return layoutComponent2().locationScore(locationScore).winningScore(winningScore).score(newScore).rectangles(substitute(rectangles, index2, placement));
          } else {
            return layout2;
          }
        };
        layout.rectangles = function() {
          if (!arguments.length) {
            return rectangles;
          }
          rectangles = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        layout.score = function() {
          if (!arguments.length) {
            return score;
          }
          score = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        layout.winningScore = function() {
          if (!arguments.length) {
            return winningScore;
          }
          winningScore = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        layout.locationScore = function() {
          if (!arguments.length) {
            return locationScore;
          }
          locationScore = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        return layout;
      };
      var greedy = function() {
        var bounds;
        var containerPenalty = function containerPenalty2(rectangle) {
          return bounds ? rectangle.width * rectangle.height - intersect2(rectangle, bounds) : 0;
        };
        var penaltyForRectangle = function penaltyForRectangle2(rectangle, index2, rectangles) {
          return collisionArea(rectangles, index2) + containerPenalty(rectangle);
        };
        var strategy = function strategy2(data) {
          var rectangles = layoutComponent().locationScore(penaltyForRectangle).rectangles(data);
          data.forEach(function(rectangle, index2) {
            placements(rectangle).forEach(function(placement, placementIndex) {
              rectangles = rectangles(placement, index2);
            });
          });
          return rectangles.rectangles();
        };
        strategy.bounds = function() {
          if (!arguments.length) {
            return bounds;
          }
          bounds = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        return strategy;
      };
      var randomItem = function randomItem2(array5) {
        return array5[randomIndex(array5)];
      };
      var randomIndex = function randomIndex2(array5) {
        return Math.floor(Math.random() * array5.length);
      };
      var annealing = function() {
        var temperature = 1e3;
        var cooling = 1;
        var bounds;
        var orientationPenalty = function orientationPenalty2(rectangle) {
          switch (rectangle.location) {
            case "bottom-right":
              return 0;
            case "middle-right":
            case "bottom-center":
              return rectangle.width * rectangle.height / 8;
          }
          return rectangle.width * rectangle.height / 4;
        };
        var containerPenalty = function containerPenalty2(rectangle) {
          return bounds ? rectangle.width * rectangle.height - intersect2(rectangle, bounds) : 0;
        };
        var penaltyForRectangle = function penaltyForRectangle2(rectangle, index2, rectangles) {
          return collisionArea(rectangles, index2) + containerPenalty(rectangle) + orientationPenalty(rectangle);
        };
        var strategy = function strategy2(data) {
          var currentTemperature = temperature;
          var winningScore = function winningScore2(newScore, oldScore) {
            return Math.exp((oldScore - newScore) / currentTemperature) > Math.random();
          };
          var rectangles = layoutComponent().locationScore(penaltyForRectangle).winningScore(winningScore).rectangles(data);
          while (currentTemperature > 0) {
            var index2 = randomIndex(data);
            var randomNewPlacement = randomItem(placements(data[index2]));
            rectangles = rectangles(randomNewPlacement, index2);
            currentTemperature -= cooling;
          }
          return rectangles.rectangles();
        };
        strategy.temperature = function() {
          if (!arguments.length) {
            return temperature;
          }
          temperature = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        strategy.cooling = function() {
          if (!arguments.length) {
            return cooling;
          }
          cooling = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        strategy.bounds = function() {
          if (!arguments.length) {
            return bounds;
          }
          bounds = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        return strategy;
      };
      var scanForObject = function scanForObject2(array5, comparator) {
        return array5[d3Array.scan(array5, comparator)];
      };
      var removeOverlaps = function(adaptedStrategy) {
        adaptedStrategy = adaptedStrategy || function(x5) {
          return x5;
        };
        var removeOverlaps2 = function removeOverlaps3(layout) {
          layout = adaptedStrategy(layout);
          var _loop = function _loop2() {
            var visible = layout.filter(function(d2) {
              return !d2.hidden;
            });
            var collisions = visible.map(function(d2, i3) {
              return [d2, collisionArea(visible, i3)];
            });
            var maximumCollision = scanForObject(collisions, function(a4, b4) {
              return b4[1] - a4[1];
            });
            if (maximumCollision[1] > 0) {
              maximumCollision[0].hidden = true;
            } else {
              return "break";
            }
          };
          while (true) {
            var _ret = _loop();
            if (_ret === "break")
              break;
          }
          return layout;
        };
        rebindAll6(removeOverlaps2, adaptedStrategy);
        return removeOverlaps2;
      };
      var boundingBox = function() {
        var bounds = [0, 0];
        var strategy = function strategy2(data) {
          return data.map(function(d2, i3) {
            var tx = d2.x;
            var ty = d2.y;
            if (tx + d2.width > bounds[0]) {
              tx -= d2.width;
            }
            if (ty + d2.height > bounds[1]) {
              ty -= d2.height;
            }
            return {
              height: d2.height,
              width: d2.width,
              x: tx,
              y: ty
            };
          });
        };
        strategy.bounds = function() {
          if (!arguments.length) {
            return bounds;
          }
          bounds = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        return strategy;
      };
      var functor$4 = function(d2) {
        return typeof d2 === "function" ? d2 : function() {
          return d2;
        };
      };
      function defined() {
        var outerArguments = arguments;
        return function(d2, i3) {
          for (var c6 = 0, j5 = outerArguments.length; c6 < j5; c6++) {
            if (outerArguments[c6](d2, i3) == null) {
              return false;
            }
          }
          return true;
        };
      }
      var alignOffset = function(align, width) {
        switch (align) {
          case "left":
            return width / 2;
          case "right":
            return -width / 2;
          default:
            return 0;
        }
      };
      var createBase = function(initialValues) {
        var env = Object.assign({}, initialValues);
        var base2 = function base3() {
        };
        Object.keys(env).forEach(function(key2) {
          base2[key2] = function() {
            if (!arguments.length) {
              return env[key2];
            }
            env[key2] = arguments.length <= 0 ? void 0 : arguments[0];
            return base2;
          };
        });
        return base2;
      };
      var xyBase = function() {
        var baseValue = function baseValue2() {
          return 0;
        };
        var crossValue = function crossValue2(d2) {
          return d2.x;
        };
        var mainValue = function mainValue2(d2) {
          return d2.y;
        };
        var align = "center";
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var orient = "vertical";
        var base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i3) {
            return defined(baseValue, crossValue, mainValue)(d2, i3);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i3) {
          var width = bandwidth(d2, i3);
          var offset = alignOffset(align, width);
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          if (orient === "vertical") {
            var y4 = yScale(mainValue(d2, i3), i3);
            var y0 = yScale(baseValue(d2, i3), i3);
            var x5 = xScale(crossValue(d2, i3), i3) + offset;
            return {
              d: d2,
              x: x5,
              y: y4,
              y0,
              width,
              height: y4 - y0,
              origin: [x5, y4],
              baseOrigin: [x5, y0],
              transposedX: x5,
              transposedY: y4
            };
          } else {
            var _y = xScale(mainValue(d2, i3), i3);
            var _y2 = xScale(baseValue(d2, i3), i3);
            var _x = yScale(crossValue(d2, i3), i3) + offset;
            return {
              d: d2,
              x: _x,
              y: _y,
              y0: _y2,
              width,
              height: _y - _y2,
              origin: [_y, _x],
              baseOrigin: [_y2, _x],
              transposedX: _y,
              transposedY: _x
            };
          }
        };
        base2.xValues = function() {
          return orient === "vertical" ? [crossValue] : [baseValue, mainValue];
        };
        base2.yValues = function() {
          return orient !== "vertical" ? [crossValue] : [baseValue, mainValue];
        };
        base2.baseValue = function() {
          if (!arguments.length) {
            return baseValue;
          }
          baseValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.mainValue = function() {
          if (!arguments.length) {
            return mainValue;
          }
          mainValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var red = "#c60";
      var green = "#6c0";
      var black = "#000";
      var gray = "#ddd";
      var darkGray = "#999";
      var colors = {
        red,
        green,
        black,
        gray,
        darkGray
      };
      var seriesSvgLine2 = function() {
        var base2 = xyBase();
        var lineData = d3Shape.line().x(function(d2, i3) {
          return base2.values(d2, i3).transposedX;
        }).y(function(d2, i3) {
          return base2.values(d2, i3).transposedY;
        });
        var join = dataJoin3("path", "line");
        var line2 = function line3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          lineData.defined(base2.defined());
          selection3.each(function(data, index2, group3) {
            var path2 = join(d3Selection.select(group3[index2]), [data]);
            path2.enter().attr("fill", "none").attr("stroke", colors.black);
            path2.attr("d", lineData);
            base2.decorate()(path2, data, index2);
          });
        };
        rebindAll6(line2, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(line2, join, "key");
        rebind(line2, lineData, "curve");
        return line2;
      };
      var seriesCanvasLine2 = function() {
        var base2 = xyBase();
        var lineData = d3Shape.line().x(function(d2, i3) {
          return base2.values(d2, i3).transposedX;
        }).y(function(d2, i3) {
          return base2.values(d2, i3).transposedY;
        });
        var line2 = function line3(data) {
          var context = lineData.context();
          context.beginPath();
          context.strokeStyle = colors.black;
          context.fillStyle = "transparent";
          base2.decorate()(context, data);
          lineData.defined(base2.defined())(data);
          context.fill();
          context.stroke();
          context.closePath();
        };
        rebindAll6(line2, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(line2, lineData, "curve", "context");
        return line2;
      };
      var baseScale = function() {
        var domain = [0, 1];
        var range2 = [-1, 1];
        var base2 = function base3() {
        };
        base2.domain = function() {
          if (!arguments.length) {
            return domain;
          }
          domain = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.range = function() {
          if (!arguments.length) {
            return range2;
          }
          range2 = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var bufferBuilder = function() {
        var attributes = {};
        var uniforms = {};
        var elementIndices2 = null;
        var bufferBuilder2 = function bufferBuilder3(programBuilder2, program) {
          var gl = programBuilder2.context();
          Object.keys(attributes).forEach(function(name) {
            var attribute = attributes[name];
            if (typeof attribute !== "function") {
              throw new Error("Expected an attribute for ".concat(name, ", found ").concat(attribute));
            }
            var location = gl.getAttribLocation(program, name);
            attribute.location(location)(programBuilder2);
          });
          Object.keys(uniforms).forEach(function(name) {
            var uniform2 = uniforms[name];
            if (typeof uniform2 !== "function") {
              throw new Error("Expected a uniform for ".concat(name, ", found ").concat(uniform2));
            }
            var location = gl.getUniformLocation(program, name);
            uniform2.location(location)(programBuilder2);
          });
          if (elementIndices2 !== null) {
            elementIndices2(programBuilder2);
          }
        };
        bufferBuilder2.flush = function() {
          Object.values(attributes).forEach(function(attribute) {
            return attribute.clear();
          });
          Object.values(uniforms).forEach(function(uniform2) {
            return uniform2.clear();
          });
          if (elementIndices2 !== null)
            elementIndices2.clear();
        };
        bufferBuilder2.attribute = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (args.length === 1) {
            return attributes[args[0]];
          }
          attributes[args[0]] = args[1];
          return bufferBuilder2;
        };
        bufferBuilder2.uniform = function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          if (args.length === 1) {
            return uniforms[args[0]];
          }
          uniforms[args[0]] = args[1];
          return bufferBuilder2;
        };
        bufferBuilder2.elementIndices = function() {
          if (!arguments.length) {
            return elementIndices2;
          }
          elementIndices2 = arguments.length <= 0 ? void 0 : arguments[0];
          return bufferBuilder2;
        };
        return bufferBuilder2;
      };
      var uniform = function(initialData) {
        var location = -1;
        var data = initialData;
        var dirty = true;
        var build = function build2(programBuilder2) {
          if (!dirty) {
            return;
          }
          var gl = programBuilder2.context();
          if (Array.isArray(data)) {
            switch (data.length) {
              case 1:
                gl.uniform1fv(location, data);
                break;
              case 2:
                gl.uniform2fv(location, data);
                break;
              case 3:
                gl.uniform3fv(location, data);
                break;
              case 4:
                gl.uniform4fv(location, data);
                break;
              default:
                throw new Error("Uniform supports up to 4 elements. ".concat(data.length, " provided."));
            }
          } else {
            gl.uniform1f(location, data);
          }
          dirty = false;
        };
        build.clear = function() {
          dirty = true;
        };
        build.location = function() {
          if (!arguments.length) {
            return location;
          }
          if (location !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            location = arguments.length <= 0 ? void 0 : arguments[0];
            dirty = true;
          }
          return build;
        };
        build.data = function() {
          if (!arguments.length) {
            return data;
          }
          data = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return build;
        };
        return build;
      };
      var drawModes = {
        POINTS: 0,
        LINES: 1,
        LINE_LOOP: 2,
        LINE_STRIP: 3,
        TRIANGLES: 4,
        TRIANGLE_STRIP: 5,
        TRIANGLE_FAN: 6
      };
      var programBuilder = function() {
        var context = null;
        var program = null;
        var vertexShader = null;
        var fragmentShader = null;
        var programVertexShader = null;
        var programFragmentShader = null;
        var mode2 = drawModes.TRIANGLES;
        var subInstanceCount = 0;
        var buffers = bufferBuilder();
        var debug = false;
        var extInstancedArrays = null;
        var dirty = true;
        var pixelRatio = 1;
        var build = function build2(count3) {
          if (context == null) {
            return;
          }
          var vertexShaderSource = vertexShader();
          var fragmentShaderSource = fragmentShader();
          if (newProgram(program, vertexShaderSource, fragmentShaderSource)) {
            program = createProgram(vertexShaderSource, fragmentShaderSource);
            programVertexShader = vertexShaderSource;
            programFragmentShader = fragmentShaderSource;
            dirty = false;
          }
          context.useProgram(program);
          buffers.uniform("uScreen", uniform([context.canvas.width / pixelRatio, context.canvas.height / pixelRatio]));
          buffers(build2, program);
          if (subInstanceCount === 0) {
            if (buffers.elementIndices() == null) {
              context.drawArrays(mode2, 0, count3);
            } else {
              context.drawElements(mode2, count3, context.UNSIGNED_SHORT, 0);
            }
          } else {
            if (buffers.elementIndices() == null) {
              extInstancedArrays.drawArraysInstancedANGLE(mode2, 0, subInstanceCount, count3);
            } else {
              var elementIndicesLength = buffers.elementIndices().data().length;
              if (subInstanceCount !== elementIndicesLength) {
                throw new Error("Expected elementIndices length ".concat(elementIndicesLength) + " to match subInstanceCount ".concat(subInstanceCount, "."));
              }
              extInstancedArrays.drawElementsInstancedANGLE(mode2, subInstanceCount, context.UNSIGNED_SHORT, 0, count3);
            }
          }
        };
        build.extInstancedArrays = function() {
          return extInstancedArrays;
        };
        build.context = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (!args.length) {
            return context;
          }
          if (args[0] == null || args[0] !== context) {
            buffers.flush();
            dirty = true;
          }
          if (args[0] != null && args[0] !== context) {
            extInstancedArrays = args[0].getExtension("ANGLE_instanced_arrays");
          }
          context = args[0];
          return build;
        };
        build.buffers = function() {
          if (!arguments.length) {
            return buffers;
          }
          buffers = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.vertexShader = function() {
          if (!arguments.length) {
            return vertexShader;
          }
          vertexShader = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.fragmentShader = function() {
          if (!arguments.length) {
            return fragmentShader;
          }
          fragmentShader = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.mode = function() {
          if (!arguments.length) {
            return mode2;
          }
          mode2 = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.subInstanceCount = function() {
          if (!arguments.length) {
            return subInstanceCount;
          }
          subInstanceCount = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.debug = function() {
          if (!arguments.length) {
            return debug;
          }
          debug = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.pixelRatio = function() {
          if (!arguments.length) {
            return pixelRatio;
          }
          pixelRatio = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        return build;
        function newProgram(program2, vertexShader2, fragmentShader2) {
          if (!program2 || dirty) {
            return true;
          }
          return vertexShader2 !== programVertexShader || fragmentShader2 !== programFragmentShader;
        }
        function createProgram(vertexShaderSource, fragmentShaderSource) {
          var vertexShader2 = loadShader(vertexShaderSource, context.VERTEX_SHADER);
          var fragmentShader2 = loadShader(fragmentShaderSource, context.FRAGMENT_SHADER);
          var program2 = context.createProgram();
          context.attachShader(program2, vertexShader2);
          context.attachShader(program2, fragmentShader2);
          context.linkProgram(program2);
          if (debug && !context.getProgramParameter(program2, context.LINK_STATUS)) {
            var message = context.getProgramInfoLog(program2);
            context.deleteProgram(program2);
            throw new Error("Failed to link program : ".concat(message, "\n            Vertex Shader : ").concat(vertexShaderSource, "\n            Fragment Shader : ").concat(fragmentShaderSource));
          }
          return program2;
        }
        function loadShader(source, type2) {
          var shader = context.createShader(type2);
          context.shaderSource(shader, source);
          context.compileShader(shader);
          if (debug && !context.getShaderParameter(shader, context.COMPILE_STATUS)) {
            var message = context.getShaderInfoLog(shader);
            context.deleteShader(shader);
            throw new Error("Failed to compile shader : ".concat(message, "\n            Shader : ").concat(source));
          }
          return shader;
        }
      };
      var shaderBuilder = function(base2) {
        var shaderHeaders = [];
        var shaderBodies = [];
        var build = function build2() {
          return base2(shaderHeaders.join("\n"), shaderBodies.join("\n"));
        };
        function append2(array5, element2) {
          array5.push(element2);
        }
        function insert(array5, element2, before) {
          var beforeIndex = array5.indexOf(before);
          array5.splice(beforeIndex >= 0 ? beforeIndex : array5.length, 0, element2);
        }
        function appendIfNotExists(array5, element2) {
          var elementIndex = array5.indexOf(element2);
          if (elementIndex === -1) {
            array5.push(element2);
          }
        }
        build.appendHeader = function(header) {
          append2(shaderHeaders, header);
          return build;
        };
        build.insertHeader = function(header, before) {
          insert(shaderHeaders, header, before);
          return build;
        };
        build.appendHeaderIfNotExists = function(header) {
          appendIfNotExists(shaderHeaders, header);
          return build;
        };
        build.appendBody = function(body) {
          append2(shaderBodies, body);
          return build;
        };
        build.insertBody = function(body, before) {
          insert(shaderBodies, body, before);
          return build;
        };
        build.appendBodyIfNotExists = function(body) {
          appendIfNotExists(shaderBodies, body);
          return build;
        };
        return build;
      };
      var vertexShaderBase = function vertexShaderBase2(header, body) {
        return "\nprecision mediump float;\nfloat inf = 1.0 / 0.0;\n".concat(header, "\nvoid main() {\n    ").concat(body, "\n}");
      };
      var fragmentShaderBase = function fragmentShaderBase2(header, body) {
        return "\nprecision mediump float;\n".concat(header, "\nvoid main() {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    ").concat(body, "\n}");
      };
      var fillColor = {
        header: "attribute vec4 aFillColor;\n             varying vec4 vFillColor;",
        body: "vFillColor = aFillColor;"
      };
      var strokeColor = {
        header: "attribute vec4 aStrokeColor;\n             varying vec4 vStrokeColor;",
        body: "vStrokeColor = aStrokeColor;"
      };
      var circle = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 2.0 * sqrt(aSize / 3.14159);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var star = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 4.0 * sqrt(aSize / 3.14159);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var wye = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 3.0 * sqrt(aSize / 3.14159);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var square2 = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = sqrt(aSize);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var diamond = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = sqrt(aSize);\n        gl_PointSize = 2.0 * (vSize + uStrokeWidth + 1.0);\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var triangle = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = sqrt((16.0 * aSize) / (3.0 * sqrt(3.0)));\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var cross2 = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vStrokeWidthRatio;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 3.0 * sqrt(aSize / 5.0);\n        vStrokeWidthRatio = uStrokeWidth / (vSize + uStrokeWidth + 1.0);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var candlestick = {
        header: "\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aHighValue;\n        attribute float aOpenValue;\n        attribute float aCloseValue;\n        attribute float aLowValue;\n        attribute vec3 aCorner;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vColorIndicator = sign(aCloseValue - aOpenValue);\n\n        float isPositiveY = (sign(aCorner.y) + 1.0) / 2.0;\n        float isNotPositiveY = 1.0 - isPositiveY;\n        float isExtremeY = abs(aCorner.y) - 1.0;\n        float isNotExtremeY = 1.0 - isExtremeY;\n        float yValue =\n         (isPositiveY * isExtremeY * aLowValue) +\n         (isPositiveY * isNotExtremeY * aCloseValue) +\n         (isNotPositiveY * isNotExtremeY * aOpenValue) +\n         (isNotPositiveY * isExtremeY * aHighValue);\n\n        float lineWidthXDirection = (isNotExtremeY * aCorner.x) + (isExtremeY * aCorner.z);\n        float lineWidthYDirection = isNotExtremeY * sign(aCloseValue - aOpenValue) * aCorner.y;\n\n        float bandwidthModifier = aBandwidth * aCorner.x / 2.0;\n\n        float xModifier = (uStrokeWidth * lineWidthXDirection / 2.0) + bandwidthModifier;\n        float yModifier = uStrokeWidth * lineWidthYDirection / 2.0;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);"
      };
      var ohlc = {
        header: "\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aHighValue;\n        attribute float aOpenValue;\n        attribute float aCloseValue;\n        attribute float aLowValue;\n        attribute vec3 aCorner;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vColorIndicator = sign(aCloseValue - aOpenValue);\n\n        float isPositiveY = (sign(aCorner.y) + 1.0) / 2.0;\n        float isNotPositiveY = 1.0 - isPositiveY;\n        float isExtremeY = abs(aCorner.y) - 1.0;\n        float isNotExtremeY = 1.0 - isExtremeY;\n        float yValue =\n            (isPositiveY * isExtremeY * aLowValue) +\n            (isPositiveY * isNotExtremeY * aCloseValue) +\n            (isNotPositiveY * isNotExtremeY * aOpenValue) +\n            (isNotPositiveY * isExtremeY * aHighValue);\n\n        float lineWidthXDirection = isExtremeY * aCorner.z;\n        float lineWidthYDirection = isNotExtremeY * aCorner.z;\n\n        float bandwidthModifier = isNotExtremeY * aCorner.x * aBandwidth / 2.0;\n\n        float xModifier = (uStrokeWidth * lineWidthXDirection / 2.0) + bandwidthModifier;\n        float yModifier = uStrokeWidth * lineWidthYDirection / 2.0;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);"
      };
      var bar = {
        header: "\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aMainValue;\n        attribute float aBaseValue;\n        attribute vec2 aCorner;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        float isBaseline = (1.0 - aCorner.y) / 2.0;\n        float yValue = (isBaseline * aBaseValue) + ((1.0 - isBaseline) * aMainValue);\n\n        float xModifier = aCorner.x * (aBandwidth) / 2.0;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);"
      };
      var errorBar = {
        header: "\n        attribute vec3 aCorner;\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aHighValue;\n        attribute float aLowValue;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        float isLow = (aCorner.y + 1.0) / 2.0;\n        float yValue = isLow * aLowValue + (1.0 - isLow) * aHighValue;\n\n        float isEdgeCorner = abs(aCorner.x);\n        float lineWidthXDirection = (1.0 - isEdgeCorner) * aCorner.z;\n        float lineWidthYDirection = isEdgeCorner * aCorner.z;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);\n\n        float xModifier = (uStrokeWidth * lineWidthXDirection) + (aBandwidth * aCorner.x / 2.0);\n        float yModifier = (uStrokeWidth * lineWidthYDirection);"
      };
      var area = {
        header: "\n        attribute vec3 aCorner;\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aCrossNextValue;\n        attribute float aMainNextValue;\n        attribute float aBaseValue;\n        attribute float aBaseNextValue;\n        attribute float aDefined;\n        attribute float aDefinedNext;\n\n        varying float vDefined;\n\n        float when_lt(float a, float b) {\n            return max(sign(b - a), 0.0);\n        }\n\n        float and(float a, float b) {\n            return a * b;\n        }",
        body: "\n        vDefined = aDefined * aDefinedNext;\n        gl_Position = vec4(0, 0, 0, 1);\n\n        float hasIntercepted = when_lt((aMainNextValue - aBaseNextValue) * (aMainValue - aBaseValue), 0.0);\n        float useIntercept = and(aCorner.z, hasIntercepted);\n\n        float yGradient = (aMainNextValue - aMainValue) / (aCrossNextValue - aCrossValue);\n        float yConstant = aMainNextValue - (yGradient * aCrossNextValue);\n\n        float y0Gradient = (aBaseNextValue - aBaseValue) / (aCrossNextValue - aCrossValue);\n        float y0Constant = aBaseNextValue - (y0Gradient * aCrossNextValue);\n\n        float denominator = (yGradient - y0Gradient) + step(abs(yGradient - y0Gradient), 0.0);\n        float interceptXValue = (y0Constant - yConstant) / denominator;\n        float interceptYValue = (yGradient * interceptXValue) + yConstant;\n\n        gl_Position = vec4(interceptXValue * useIntercept, interceptYValue * useIntercept, 0, 1);\n\n        gl_Position.x += (1.0 - useIntercept) * ((aCorner.x * aCrossNextValue) + ((1.0 - aCorner.x) * aCrossValue));\n        gl_Position.y += (1.0 - useIntercept) * (1.0 - aCorner.y) * ((aCorner.x * aMainNextValue) + ((1.0 - aCorner.x) * aMainValue));\n        gl_Position.y += (1.0 - useIntercept) * aCorner.y * ((aCorner.x * aBaseNextValue) + ((1.0 - aCorner.x) * aBaseValue));"
      };
      var boxPlot = {
        header: "\n        attribute vec4 aCorner;\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aCapWidth;\n        attribute float aHighValue;\n        attribute float aUpperQuartileValue;\n        attribute float aMedianValue;\n        attribute float aLowerQuartileValue;\n        attribute float aLowValue;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vDefined;\n    ",
        body: "\n        vDefined = aDefined;\n        float isExtremeY = sign(abs(aCorner.y) - 2.0) + 1.0;\n        float isNotExtremeY = 1.0 - isExtremeY;\n\n        float isNonZeroY = abs(sign(aCorner.y));\n        float isZeroY = 1.0 - isNonZeroY;\n\n        float isQuartileY = isNotExtremeY * isNonZeroY;\n\n        float isPositiveY = (sign(aCorner.y + 0.5) + 1.0) / 2.0;\n        float isNegativeY = 1.0 - isPositiveY;\n\n        float yValue =\n          (isExtremeY * isNegativeY) * aHighValue +\n          (isQuartileY * isNegativeY) * aUpperQuartileValue +\n          isZeroY * aMedianValue +\n          (isQuartileY * isPositiveY) * aLowerQuartileValue +\n          (isExtremeY * isPositiveY) * aLowValue;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);\n\n        float isHorizontal = aCorner.w;\n        float isVertical = 1.0 - isHorizontal;\n\n        float xDisplacement = aCorner.x * (isExtremeY * aCapWidth + isNotExtremeY * aBandwidth) / 2.0;\n\n        float xModifier = (isVertical * uStrokeWidth * aCorner.z / 2.0) + xDisplacement;\n        float yModifier = isHorizontal * uStrokeWidth * aCorner.z / 2.0;"
      };
      var circle$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float distance = length(2.0 * gl_PointCoord - 1.0);\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n            return;\n        }"
      };
      var star$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;\n\n        // anterior, exterior angles\n        float an = 0.628319;\n        vec2 acs = vec2(0.809017, 0.587786); // (cos, sin)\n        float en = 0.952000;\n        vec2 ecs = vec2(0.580055, 0.814577);\n    ",
        body: "\n        float canFill = 1.0;\n\n        vec2 p = 2.0 * gl_PointCoord - 1.0;\n        p.y *= -1.0;\n\n        // sector\n        float bn = mod(atan(p.x, p.y), 2.0 * an) - an;\n        p = length(p) * vec2(cos(bn), abs(sin(bn)));\n\n        p -= acs;\n        p += ecs * clamp(-dot(p, ecs), 0.0, acs.y / ecs.y);\n        float d = length(p) * sign(p.x);\n\n        float distance = 1.0 + d;\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n            return;\n        }"
      };
      var wye$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;\n    ",
        body: "\n        float canFill = 1.0;\n\n        vec2 p = 2.0 * gl_PointCoord - 1.0;\n        p.y *= -1.0;\n\n        // sector\n        float an = 3.141593 / 3.0;\n        float bn = mod(atan(p.x, p.y), 2.0 * an) - an;\n        p = length(p) * vec2(cos(bn), abs(sin(bn)));\n\n        // box\n        vec2 d = abs(p) - vec2(0.9, 0.35);\n        float sdf = length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n\n        float distance = 1.0 + sdf;\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n            return;\n        }"
      };
      var square$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n        float distance = max(abs(pointCoordTransform.x), abs(pointCoordTransform.y));\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);"
      };
      var diamond$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;\n        float a = 0.6;\n        float b = 1.0;\n    ",
        body: "\n        if (vDefined < 0.5) {\n            discard;\n        }\n\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n\n        float x = abs(pointCoordTransform.x);\n        float y = abs(pointCoordTransform.y);\n\n        float X = (a * b * x) / (a * y + b * x);\n        float Y = (a * b * y) / (a * y + b * x);\n\n        float distance = length(vec2(x, y)) / length(vec2(X, Y));\n\n        if (distance > 1.0) {\n            discard;\n        }\n    "
      };
      var triangle$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n        float topEdgesDistance = abs(pointCoordTransform.x) - ((pointCoordTransform.y - 0.6) / sqrt(3.0));\n        float bottomEdgeDistance = pointCoordTransform.y + 0.5;\n        float distance = max(topEdgesDistance, bottomEdgeDistance);\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n        }"
      };
      var cross$1 = {
        header: "\n        varying float vSize;\n        varying float vStrokeWidthRatio;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n        float innerCornerDistance = min(abs(pointCoordTransform.x), abs(pointCoordTransform.y)) + 0.66 - vStrokeWidthRatio;\n        float outerEdgeDistance = max(abs(pointCoordTransform.x), abs(pointCoordTransform.y));\n        float distance = max(innerCornerDistance, outerEdgeDistance);\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n        }"
      };
      var candlestick$1 = {
        header: "\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float canStroke = 0.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        gl_FragColor = vec4(0.4, 0.8, 0, 1);\n        if (vColorIndicator < 0.0) {\n            gl_FragColor = vec4(0.8, 0.4, 0, 1);\n        }"
      };
      var ohlc$1 = {
        header: "\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        float canFill = 0.0;\n        float canStroke = 1.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        gl_FragColor = vec4(0.4, 0.8, 0, 1);\n        if (vColorIndicator < 0.0) {\n            gl_FragColor = vec4(0.8, 0.4, 0, 1);\n        }"
      };
      var area$1 = {
        header: "\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float canStroke = 0.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        gl_FragColor = vec4(0.86, 0.86, 0.86, 1);"
      };
      var boxPlot$1 = {
        header: "\n        varying float vDefined;\n    ",
        body: "\n        float canFill = 0.0;\n        float canStroke = 1.0;\n\n        if (vDefined < 0.5) {\n            discard;\n        }"
      };
      var errorBar$1 = {
        header: "varying float vDefined;",
        body: "\n        float canFill = 0.0;\n        float canStroke = 1.0;\n        if (vDefined < 0.5) {\n            discard;\n        }"
      };
      var bar$1 = {
        header: "varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float canStroke = 0.0;\n\n        gl_FragColor = vec4(0.60, 0.60, 0.60, 1.0);\n\n        if (vDefined < 0.5) {\n            discard;\n        }"
      };
      var fillColor$1 = {
        header: "varying vec4 vFillColor;",
        body: "gl_FragColor = (canFill * vFillColor) + ((1.0 - canFill) * gl_FragColor);"
      };
      var strokeColor$1 = {
        header: "varying vec4 vStrokeColor;",
        body: "gl_FragColor = (canStroke * vStrokeColor) + ((1.0 - canStroke) * gl_FragColor);"
      };
      var areaShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(area.header).appendBody(area.body);
        fragmentShader.appendHeader(area$1.header).appendBody(area$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var types = {
        BYTE: 5120,
        UNSIGNED_BYTE: 5121,
        SHORT: 5122,
        UNSIGNED_SHORT: 5123,
        FLOAT: 5126
      };
      function length3(type2) {
        switch (type2) {
          case types.BYTE:
          case types.UNSIGNED_BYTE:
            return 1;
          case types.SHORT:
          case types.UNSIGNED_SHORT:
            return 2;
          case types.FLOAT:
            return 4;
          default:
            throw new Error("Unknown type ".concat(type2));
        }
      }
      function getArrayViewConstructor(type2) {
        switch (type2) {
          case types.BYTE:
            return Int8Array;
          case types.UNSIGNED_BYTE:
            return Uint8Array;
          case types.SHORT:
            return Int16Array;
          case types.UNSIGNED_SHORT:
            return Uint16Array;
          case types.FLOAT:
            return Float32Array;
          default:
            throw new Error("Unknown type ".concat(type2));
        }
      }
      var baseAttributeBuilder = function() {
        var location = -1;
        var buffer = null;
        var size = 1;
        var type2 = types.FLOAT;
        var normalized = false;
        var stride = 0;
        var offset = 0;
        var divisor = null;
        var baseAttribute = function baseAttribute2(programBuilder2) {
          var gl = programBuilder2.context();
          if (buffer == null) {
            buffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
          gl.vertexAttribPointer(location, size, type2, normalized, stride, offset);
          gl.enableVertexAttribArray(location);
          var extInstancedArrays = programBuilder2.extInstancedArrays();
          extInstancedArrays.vertexAttribDivisorANGLE(location, divisor != null ? divisor : programBuilder2.subInstanceCount() > 0 ? 1 : 0);
        };
        baseAttribute.location = function() {
          if (!arguments.length) {
            return location;
          }
          location = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.buffer = function() {
          if (!arguments.length) {
            return buffer;
          }
          buffer = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.normalized = function() {
          if (!arguments.length) {
            return normalized;
          }
          normalized = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.stride = function() {
          if (!arguments.length) {
            return stride;
          }
          stride = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.offset = function() {
          if (!arguments.length) {
            return offset;
          }
          offset = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.divisor = function() {
          if (!arguments.length) {
            return divisor;
          }
          divisor = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        return baseAttribute;
      };
      var defaultArrayViewFactory = function() {
        var type2 = types.FLOAT;
        var cachedArray = new Float32Array(0);
        var factory = function factory2(requiredLength) {
          var ArrayType = getArrayViewConstructor(type2);
          if (cachedArray.length > requiredLength) {
            cachedArray = new ArrayType(cachedArray.buffer, 0, requiredLength);
          } else if (cachedArray.length !== requiredLength) {
            cachedArray = new ArrayType(requiredLength);
          }
          return cachedArray;
        };
        factory.type = function() {
          if (!arguments.length) {
            return type2;
          }
          if (type2 !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            type2 = arguments.length <= 0 ? void 0 : arguments[0];
            var ArrayType = getArrayViewConstructor(type2);
            cachedArray = new ArrayType(0);
          }
          return factory;
        };
        return factory;
      };
      var attributeProjector = function() {
        var dirty = true;
        var size = 1;
        var type2 = types.FLOAT;
        var arrayViewFactory = defaultArrayViewFactory();
        var value = function value2(d2, i3) {
          return d2;
        };
        var data = null;
        var projector = function projector2() {
          var length4 = data.length;
          var projectedData = arrayViewFactory.type(type2)(length4 * size);
          if (size > 1) {
            for (var i3 = 0; i3 < length4; i3++) {
              var componentValues = value(data[i3], i3);
              if (componentValues.length !== size) {
                throw new Error("Expected components array of size ".concat(size, ", recieved array with length ").concat(componentValues.length, "."));
              }
              for (var component = 0; component < size; component++) {
                projectedData[i3 * size + component] = componentValues[component];
              }
            }
          } else {
            for (var _i = 0; _i < length4; _i++) {
              var componentValue = value(data[_i], _i);
              if (Array.isArray(componentValue)) {
                throw new Error("Expected a single component value, recieved array with length ".concat(componentValue.length, "."));
              }
              projectedData[_i] = componentValue;
            }
          }
          dirty = false;
          return projectedData;
        };
        projector.dirty = function() {
          return dirty;
        };
        projector.clear = function() {
          dirty = true;
        };
        projector.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.arrayViewFactory = function() {
          if (!arguments.length) {
            return arrayViewFactory;
          }
          arrayViewFactory = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.data = function() {
          if (!arguments.length) {
            return data;
          }
          data = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        return projector;
      };
      var webglAttribute = function() {
        var base2 = baseAttributeBuilder();
        var projector = attributeProjector();
        var attribute = function attribute2(programBuilder2) {
          base2.size(attribute2.size()).type(attribute2.type());
          base2(programBuilder2);
          if (!projector.dirty()) {
            return;
          }
          var projectedData = projector();
          var gl = programBuilder2.context();
          gl.bindBuffer(gl.ARRAY_BUFFER, base2.buffer());
          gl.bufferData(gl.ARRAY_BUFFER, projectedData, gl.DYNAMIC_DRAW);
        };
        attribute.clear = function() {
          base2.buffer(null);
          projector.clear();
        };
        rebind(attribute, base2, "normalized", "location", "divisor");
        rebind(attribute, projector, "data", "value", "size", "type");
        return attribute;
      };
      var rebindCurry = function(target, targetName, source, sourceName) {
        for (var _len = arguments.length, curriedArgs = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
          curriedArgs[_key - 4] = arguments[_key];
        }
        target[targetName] = function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var result = source[sourceName].apply(source, curriedArgs.concat(args));
          if (result === source) {
            return target;
          }
          return result;
        };
      };
      var webglSeriesArea = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(6);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.UNSIGNED_BYTE).data([[0, 0, 0], [0, 1, 0], [1, 1, 1], [0, 0, 1], [1, 0, 0], [1, 1, 0]]);
        program.buffers().attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = areaShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          decorate(program);
          program(numElements - 1);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "crossNextValueAttribute", program.buffers(), "attribute", "aCrossNextValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "mainNextValueAttribute", program.buffers(), "attribute", "aMainNextValue");
        rebindCurry(draw2, "baseValueAttribute", program.buffers(), "attribute", "aBaseValue");
        rebindCurry(draw2, "baseNextValueAttribute", program.buffers(), "attribute", "aBaseNextValue");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        rebindCurry(draw2, "definedNextAttribute", program.buffers(), "attribute", "aDefinedNext");
        return draw2;
      };
      var circlePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(circle.header).appendBody(circle.body);
        fragmentShader.appendHeader(circle$1.header).appendBody(circle$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesPoint = function() {
        var program = programBuilder().mode(drawModes.POINTS);
        var xScale = baseScale();
        var yScale = baseScale();
        var type2 = circlePointShader();
        var decorate = function decorate2() {
        };
        var draw2 = function draw3(numElements) {
          program.vertexShader(type2.vertex()).fragmentShader(type2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          decorate(program);
          program(numElements);
        };
        draw2.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "sizeAttribute", program.buffers(), "attribute", "aSize");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var lineWidthShader = function() {
        var width = 1;
        var lineWidth = function lineWidth2(program) {
          program.buffers().uniform("uStrokeWidth", uniform(width));
        };
        lineWidth.lineWidth = function() {
          if (!arguments.length) {
            return width;
          }
          width = arguments.length <= 0 ? void 0 : arguments[0];
          return lineWidth;
        };
        return lineWidth;
      };
      var elementIndices = function(initialData) {
        var buffer = null;
        var data = initialData;
        var dirty = true;
        var base2 = function base3(programBuilder2) {
          var gl = programBuilder2.context();
          if (buffer == null) {
            buffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
          if (!dirty) {
            return;
          }
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);
          dirty = false;
        };
        base2.clear = function() {
          buffer = null;
          dirty = true;
        };
        base2.data = function() {
          if (!arguments.length) {
            return data;
          }
          dirty = true;
          data = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var webglSeriesLine = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(6);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var lineWidth = lineWidthShader();
        var cornerAttribute = webglAttribute().divisor(0).size(4).type(types.BYTE).data([[-1, 1, 1, 0], [1, 1, 0, 1], [1, -1, 0, 1], [-1, -1, 1, 0]]);
        program.buffers().elementIndices(elementIndices([0, 1, 2, 2, 3, 0])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var vertexShader = shaderBuilder(vertexShaderBase);
          var fragmentShader = shaderBuilder(fragmentShaderBase);
          program.vertexShader(vertexShader).fragmentShader(fragmentShader);
          vertexShader.appendHeader("\n            attribute vec4 aCorner;\n            attribute float aCrossValue;\n            attribute float aCrossNextValue;\n            attribute float aMainValue;\n            attribute float aMainNextValue;\n            attribute float aDefined;\n            attribute float aDefinedNext;\n\n            uniform float uStrokeWidth;\n            uniform vec2 uScreen;\n\n            varying float vLength;\n            varying vec2 vPosition;\n        ");
          vertexShader.appendBody("\n            vec4 value = vec4(aCrossValue, aMainValue, 0.0, 1.0);\n            vec4 nextValue = vec4(aCrossNextValue, aMainNextValue, 0.0, 1.0);\n        ");
          xScale(program, "value", 0);
          xScale(program, "nextValue", 0);
          yScale(program, "value", 1);
          yScale(program, "nextValue", 1);
          vertexShader.appendBody("\n            vec2 position = aCorner[2] * value.xy + aCorner[3] * nextValue.xy;\n\n            vec2 direction = normalize((nextValue.xy - value.xy) * uScreen);\n            vec2 normal = vec2(direction.y, -direction.x);\n            vec2 padding = ((uStrokeWidth / 2.0) / (uScreen / 2.0));\n            \n            padding *= aDefined * aDefinedNext;\n            position += (aCorner[0] * direction + aCorner[1] * normal) * padding;\n\n            gl_Position = vec4(position.x, position.y, 0.0, 1.0);\n\n            vLength = length((nextValue.xy - value.xy) * (uScreen / 2.0));\n            vPosition = aCorner.xy * (uStrokeWidth / 2.0);\n            vPosition.x += aCorner[3] * vLength;\n        ");
          fragmentShader.appendHeader("\n            uniform float uStrokeWidth;\n            varying float vLength;\n            varying vec2 vPosition;\n\n            float canFill = 0.0;\n            float canStroke = 1.0;\n        ");
          fragmentShader.appendBody("\n            vec2 position = vPosition;\n            position.x -= clamp(position.x, 0.0, vLength);\n            float sdf = length(position) - uStrokeWidth / 2.0;\n            if (sdf > 0.5) {\n                discard;\n            }\n        ");
          lineWidth(program);
          decorate(program);
          program(numElements - 1);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "crossNextValueAttribute", program.buffers(), "attribute", "aCrossNextValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "mainNextValueAttribute", program.buffers(), "attribute", "aMainNextValue");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        rebindCurry(draw2, "definedNextAttribute", program.buffers(), "attribute", "aDefinedNext");
        return draw2;
      };
      var ohlcShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(ohlc.header).appendBody(ohlc.body);
        fragmentShader.appendHeader(ohlc$1.header).appendBody(ohlc$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesOhlc = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(18);
        var xScale = baseScale();
        var yScale = baseScale();
        var lineWidth = lineWidthShader();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.BYTE).data([
          [0, -2, -1],
          [0, -2, 1],
          [0, 2, 1],
          [0, 2, -1],
          [-1, -1, -1],
          [-1, -1, 1],
          [0, -1, 1],
          [0, -1, -1],
          [1, 1, 1],
          [0, 1, 1],
          [0, 1, -1],
          [1, 1, -1]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          3,
          2,
          4,
          5,
          6,
          4,
          7,
          6,
          8,
          9,
          10,
          10,
          11,
          8
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = ohlcShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n          gl_Position.x += xModifier / uScreen.x * 2.0;\n          gl_Position.y += yModifier / uScreen.y * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "openValueAttribute", program.buffers(), "attribute", "aOpenValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "closeValueAttribute", program.buffers(), "attribute", "aCloseValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var barShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(bar.header).appendBody(bar.body);
        fragmentShader.appendHeader(bar$1.header).appendBody(bar$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesBar = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(6);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(2).type(types.BYTE).data([[-1, -1], [1, 1], [-1, 1], [1, -1]]);
        program.buffers().elementIndices(elementIndices([0, 1, 2, 0, 1, 3])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = barShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          program.vertexShader().appendBody("\n            gl_Position.x += xModifier / uScreen.x * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "baseValueAttribute", program.buffers(), "attribute", "aBaseValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var errorBarShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(errorBar.header).appendBody(errorBar.body);
        fragmentShader.appendHeader(errorBar$1.header).appendBody(errorBar$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesErrorBar = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(18);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var lineWidth = lineWidthShader();
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.BYTE).data([
          [0, 1, 1],
          [0, 1, -1],
          [0, -1, -1],
          [0, -1, 1],
          [1, -1, 1],
          [1, -1, -1],
          [-1, -1, -1],
          [-1, -1, 1],
          [-1, 1, -1],
          [-1, 1, 1],
          [1, 1, 1],
          [1, 1, -1]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          3,
          2,
          4,
          5,
          6,
          4,
          7,
          6,
          8,
          9,
          10,
          8,
          11,
          10
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = errorBarShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n                gl_Position.x += xModifier / uScreen.x * 2.0;\n                gl_Position.y += yModifier / uScreen.y * 2.0;\n            ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var candlestickShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(candlestick.header).appendBody(candlestick.body);
        fragmentShader.appendHeader(candlestick$1.header).appendBody(candlestick$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesCandlestick = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(12);
        var xScale = baseScale();
        var yScale = baseScale();
        var lineWidth = lineWidthShader();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.BYTE).data([
          [0, 2, 1],
          [0, 2, -1],
          [0, -2, -1],
          [0, -2, 1],
          [1, -1, 0],
          [-1, -1, 0],
          [-1, 1, 0],
          [1, 1, 0]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          3,
          2,
          4,
          5,
          6,
          4,
          7,
          6
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = candlestickShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n          gl_Position.x += xModifier / uScreen.x * 2.0;\n          gl_Position.y += yModifier / uScreen.y * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "openValueAttribute", program.buffers(), "attribute", "aOpenValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "closeValueAttribute", program.buffers(), "attribute", "aCloseValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var boxPlotShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(boxPlot.header).appendBody(boxPlot.body);
        fragmentShader.appendHeader(boxPlot$1.header).appendBody(boxPlot$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesBoxPlot = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(54);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var lineWidth = lineWidthShader();
        var cornerAttribute = webglAttribute().divisor(0).size(4).type(types.BYTE).data([
          [-1, -2, -1, 1],
          [1, -2, -1, 1],
          [1, -2, 1, 1],
          [-1, -2, 1, 1],
          [0, -2, -1, 0],
          [0, -2, 1, 0],
          [0, -1, 1, 0],
          [0, -1, -1, 0],
          [-1, -1, -1, 1],
          [1, -1, -1, 1],
          [1, -1, 1, 1],
          [-1, -1, 1, 1],
          [-1, 0, -1, 1],
          [1, 0, -1, 1],
          [1, 0, 1, 1],
          [-1, 0, 1, 1],
          [-1, 1, -1, 1],
          [1, 1, -1, 1],
          [1, 1, 1, 1],
          [-1, 1, 1, 1],
          [-1, -1, -1, 0],
          [-1, -1, 1, 0],
          [-1, 1, 1, 0],
          [-1, 1, -1, 0],
          [1, -1, -1, 0],
          [1, -1, 1, 0],
          [1, 1, 1, 0],
          [1, 1, -1, 0],
          [0, 2, -1, 0],
          [0, 2, 1, 0],
          [0, 1, 1, 0],
          [0, 1, -1, 0],
          [-1, 2, -1, 1],
          [1, 2, -1, 1],
          [1, 2, 1, 1],
          [-1, 2, 1, 1]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          2,
          3,
          4,
          5,
          6,
          4,
          6,
          7,
          8,
          9,
          10,
          8,
          10,
          11,
          12,
          13,
          14,
          12,
          14,
          15,
          16,
          17,
          18,
          16,
          18,
          19,
          20,
          21,
          22,
          20,
          22,
          23,
          24,
          25,
          26,
          24,
          26,
          27,
          28,
          29,
          30,
          28,
          30,
          31,
          32,
          33,
          34,
          32,
          34,
          35
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = boxPlotShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n            gl_Position.x += xModifier / uScreen.x * 2.0;\n            gl_Position.y += yModifier / uScreen.y * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "upperQuartileValueAttribute", program.buffers(), "attribute", "aUpperQuartileValue");
        rebindCurry(draw2, "medianValueAttribute", program.buffers(), "attribute", "aMedianValue");
        rebindCurry(draw2, "lowerQuartileValueAttribute", program.buffers(), "attribute", "aLowerQuartileValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "capAttribute", program.buffers(), "attribute", "aCapWidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var webglAdjacentAttribute = function() {
        var minOffset = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        var maxOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        if (minOffset > 0 || maxOffset < 0) {
          throw new Error("Offset values (".concat(minOffset, " & ").concat(maxOffset, ") must straddle 0 "));
        }
        var base2 = baseAttributeBuilder();
        var projector = attributeProjector();
        var adjacentAttribute = function adjacentAttribute2(programBuilder2) {
          var elementSize = adjacentAttribute2.size() * length3(adjacentAttribute2.type());
          var bufferOffset = Math.abs(minOffset) * elementSize;
          base2.offset(bufferOffset).size(adjacentAttribute2.size()).type(adjacentAttribute2.type());
          base2(programBuilder2);
          if (!projector.dirty()) {
            return;
          }
          var projectedData = projector();
          var bufferPadding = maxOffset * elementSize;
          var bufferLength = bufferOffset + projectedData.length * length3(adjacentAttribute2.type()) + bufferPadding;
          var gl = programBuilder2.context();
          gl.bindBuffer(gl.ARRAY_BUFFER, base2.buffer());
          gl.bufferData(gl.ARRAY_BUFFER, bufferLength, gl.DYNAMIC_DRAW);
          gl.bufferSubData(gl.ARRAY_BUFFER, bufferOffset, projectedData);
        };
        adjacentAttribute.offset = function(offset) {
          if (minOffset > offset || offset > maxOffset) {
            throw new Error("Requested offset ".concat(offset, " exceeds bounds (").concat(minOffset, " & ").concat(maxOffset, ") "));
          }
          var offsetAttribute = function offsetAttribute2(programBuilder2) {
            base2.offset((offset - minOffset) * adjacentAttribute.size() * length3(adjacentAttribute.type()));
            base2(programBuilder2);
          };
          rebind(offsetAttribute, adjacentAttribute, "clear", "location");
          return offsetAttribute;
        };
        adjacentAttribute.clear = function() {
          base2.buffer(null);
          projector.clear();
        };
        rebind(adjacentAttribute, base2, "normalized", "location", "divisor");
        rebind(adjacentAttribute, projector, "data", "value", "size", "type");
        return adjacentAttribute;
      };
      var linear5 = function() {
        var base2 = baseScale();
        var prefix3 = function prefix4(component) {
          return "linear".concat(component);
        };
        var scale = function scale2(programBuilder2, identifier, component) {
          programBuilder2.vertexShader().appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Offset;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Scale;")).appendBody("".concat(identifier, " = ").concat(identifier, " + ").concat(prefix3(component), "Offset;")).appendBody("".concat(identifier, " = ").concat(identifier, " * ").concat(prefix3(component), "Scale;"));
          var domainSize = base2.domain()[1] - base2.domain()[0];
          var rangeSize = base2.range()[1] - base2.range()[0];
          var translate = base2.range()[0] * (domainSize / rangeSize) - base2.domain()[0];
          var scaleFactor = rangeSize / domainSize;
          var offset = [0, 0, 0, 0];
          var scale3 = [1, 1, 1, 1];
          offset[component] = translate;
          scale3[component] = scaleFactor;
          programBuilder2.buffers().uniform("".concat(prefix3(component), "Offset"), uniform(offset)).uniform("".concat(prefix3(component), "Scale"), uniform(scale3));
        };
        rebindAll6(scale, base2);
        return scale;
      };
      var log3 = function() {
        var glBase = baseScale();
        var base2 = 10;
        function log4(v2, base3) {
          return Math.log10(v2) / Math.log10(base3);
        }
        var prefix3 = function prefix4(component) {
          return "log".concat(component);
        };
        var scale = function scale2(programBuilder2, identifier, component) {
          var logPart = "".concat(prefix3(component), "Offset + (").concat(prefix3(component), "Scale * clamp(log(").concat(identifier, ") / log(").concat(prefix3(component), "Base), -inf, inf))");
          programBuilder2.vertexShader().appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Offset;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Scale;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Include;")).appendHeaderIfNotExists("uniform float ".concat(prefix3(component), "Base;")).appendBody("".concat(identifier, " = (").concat(prefix3(component), "Include * (").concat(logPart, ")) + ((1.0 - ").concat(prefix3(component), "Include) * ").concat(identifier, ");"));
          var domainSize = log4(glBase.domain()[1], base2) - log4(glBase.domain()[0], base2);
          var rangeSize = glBase.range()[1] - glBase.range()[0];
          var scaleFactor = rangeSize / domainSize;
          var translate = glBase.range()[0] - scaleFactor * log4(glBase.domain()[0], base2);
          var offset = [0, 0, 0, 0];
          var scale3 = [0, 0, 0, 0];
          var include2 = [0, 0, 0, 0];
          offset[component] = translate;
          scale3[component] = scaleFactor;
          include2[component] = 1;
          programBuilder2.buffers().uniform("".concat(prefix3(component), "Offset"), uniform(offset)).uniform("".concat(prefix3(component), "Scale"), uniform(scale3)).uniform("".concat(prefix3(component), "Include"), uniform(include2)).uniform("".concat(prefix3(component), "Base"), uniform(base2));
        };
        scale.base = function() {
          if (!arguments.length) {
            return base2;
          }
          base2 = arguments.length <= 0 ? void 0 : arguments[0];
          return scale;
        };
        rebindAll6(scale, glBase);
        return scale;
      };
      var pow3 = function() {
        var base2 = baseScale();
        var exponent = 1;
        function pow4(b4, e) {
          return Math.sign(b4) * Math.pow(Math.abs(b4), e);
        }
        var prefix3 = function prefix4(component) {
          return "pow".concat(component);
        };
        var scale = function scale2(programBuilder2, identifier, component) {
          var powPart = "".concat(prefix3(component), "Offset + (").concat(prefix3(component), "Scale * sign(").concat(identifier, ") * pow(abs(").concat(identifier, "), vec4(").concat(prefix3(component), "Exp)))");
          programBuilder2.vertexShader().appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Offset;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Scale;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Include;")).appendHeaderIfNotExists("uniform float ".concat(prefix3(component), "Exp;")).appendBody("".concat(identifier, " = (").concat(prefix3(component), "Include * (").concat(powPart, ")) + ((1.0 - ").concat(prefix3(component), "Include) * ").concat(identifier, ");"));
          var domainSize = pow4(base2.domain()[1], exponent) - pow4(base2.domain()[0], exponent);
          var rangeSize = base2.range()[1] - base2.range()[0];
          var scaleFactor = rangeSize / domainSize;
          var translate = base2.range()[0] - scaleFactor * pow4(base2.domain()[0], exponent);
          var offset = [0, 0, 0, 0];
          var scale3 = [0, 0, 0, 0];
          var include2 = [0, 0, 0, 0];
          offset[component] = translate;
          scale3[component] = scaleFactor;
          include2[component] = 1;
          programBuilder2.buffers().uniform("".concat(prefix3(component), "Offset"), uniform(offset)).uniform("".concat(prefix3(component), "Scale"), uniform(scale3)).uniform("".concat(prefix3(component), "Include"), uniform(include2)).uniform("".concat(prefix3(component), "Exp"), uniform(exponent));
        };
        scale.exponent = function() {
          if (!arguments.length) {
            return exponent;
          }
          exponent = arguments.length <= 0 ? void 0 : arguments[0];
          return scale;
        };
        rebindAll6(scale, base2);
        return scale;
      };
      var scaleLinearCopy = d3Scale.scaleLinear().copy.toString();
      var scaleLogCopy = d3Scale.scaleLog().copy.toString();
      var scalePowCopy = d3Scale.scalePow().copy.toString();
      var scaleTimeCopy = d3Scale.scaleTime().copy.toString();
      var identity$2 = d3Scale.scaleIdentity();
      var epoch = Date.now();
      var reepoch = function reepoch2(d2) {
        return d2 - epoch;
      };
      var webglScaleMapper = function(scale) {
        switch (scale.copy.toString()) {
          case scaleLinearCopy: {
            return {
              scale: identity$2,
              webglScale: linear5().domain(scale.domain())
            };
          }
          case scaleTimeCopy: {
            return {
              scale: reepoch,
              webglScale: linear5().domain(scale.domain().map(reepoch))
            };
          }
          case scaleLogCopy: {
            return {
              scale: identity$2,
              webglScale: log3().domain(scale.domain()).base(scale.base())
            };
          }
          case scalePowCopy: {
            return {
              scale: identity$2,
              webglScale: pow3().domain(scale.domain()).exponent(scale.exponent())
            };
          }
          default: {
            return {
              scale: scale.copy(),
              webglScale: linear5().domain(scale.range())
            };
          }
        }
      };
      var squarePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(square2.header).appendBody(square2.body);
        fragmentShader.appendHeader(square$1.header).appendBody(square$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var trianglePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(triangle.header).appendBody(triangle.body);
        fragmentShader.appendHeader(triangle$1.header).appendBody(triangle$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var crossPointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(cross2.header).appendBody(cross2.body);
        fragmentShader.appendHeader(cross$1.header).appendBody(cross$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var diamondPointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(diamond.header).appendBody(diamond.body);
        fragmentShader.appendHeader(diamond$1.header).appendBody(diamond$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var starPointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(star.header).appendBody(star.body);
        fragmentShader.appendHeader(star$1.header).appendBody(star$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var wyePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(wye.header).appendBody(wye.body);
        fragmentShader.appendHeader(wye$1.header).appendBody(wye$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSymbolMapper = function(symbol3) {
        switch (symbol3) {
          case d3Shape.symbolCircle:
            return circlePointShader();
          case d3Shape.symbolSquare:
            return squarePointShader();
          case d3Shape.symbolTriangle:
            return trianglePointShader();
          case d3Shape.symbolCross:
            return crossPointShader();
          case d3Shape.symbolDiamond:
            return diamondPointShader();
          case d3Shape.symbolStar:
            return starPointShader();
          case d3Shape.symbolWye:
            return wyePointShader();
          default:
            throw new Error("Unrecognised symbol: ".concat(symbol3));
        }
      };
      var constantAttribute = function(initialValue) {
        var base2 = baseAttributeBuilder().divisor(1);
        var value = initialValue;
        var dirty = true;
        var constantAttribute2 = function constantAttribute3(programBuilder2) {
          base2(programBuilder2);
          if (!dirty) {
            return;
          }
          if (!Array.isArray(value)) {
            throw new Error("Expected an array, received: ".concat(value));
          }
          if (value.length !== base2.size()) {
            throw new Error("Expected array of length: ".concat(base2.size(), ", recieved array of length: ").concat(value.length));
          }
          var gl = programBuilder2.context();
          gl["vertexAttrib".concat(value.length, "fv")](base2.location(), value);
          gl.disableVertexAttribArray(base2.location());
          dirty = false;
        };
        constantAttribute2.clear = function() {
          dirty = true;
        };
        constantAttribute2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return constantAttribute2;
        };
        rebind(constantAttribute2, base2, "normalized", "size", "location");
        return constantAttribute2;
      };
      var fillColor$2 = function() {
        var initialValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [0, 0, 0, 1];
        var projectedAttribute = webglAttribute().size(4);
        var value = initialValue;
        var dirty = true;
        var fillColor$22 = function fillColor$23(programBuilder2) {
          programBuilder2.vertexShader().appendHeaderIfNotExists(fillColor.header).appendBodyIfNotExists(fillColor.body);
          programBuilder2.fragmentShader().appendHeaderIfNotExists(fillColor$1.header).appendBodyIfNotExists(fillColor$1.body);
          if (Array.isArray(value)) {
            programBuilder2.buffers().attribute("aFillColor", constantAttribute(value).size(4));
          } else if (typeof value === "function") {
            if (!dirty) {
              return;
            }
            projectedAttribute.value(value);
            programBuilder2.buffers().attribute("aFillColor", projectedAttribute);
          } else {
            throw new Error("Expected value to be an array or function, received ".concat(value));
          }
          dirty = false;
        };
        fillColor$22.value = function() {
          if (!arguments.length) {
            return value;
          }
          if (value !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            value = arguments.length <= 0 ? void 0 : arguments[0];
            dirty = true;
          }
          return fillColor$22;
        };
        rebind(fillColor$22, projectedAttribute, "data");
        return fillColor$22;
      };
      var strokeColor$2 = function() {
        var initialValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [0, 0, 0, 1];
        var projectedAttribute = webglAttribute().size(4);
        var value = initialValue;
        var dirty = true;
        var strokeColor$22 = function strokeColor$23(programBuilder2) {
          programBuilder2.vertexShader().appendHeaderIfNotExists(strokeColor.header).appendBodyIfNotExists(strokeColor.body);
          programBuilder2.fragmentShader().appendHeaderIfNotExists(strokeColor$1.header).appendBodyIfNotExists(strokeColor$1.body);
          if (Array.isArray(value)) {
            programBuilder2.buffers().attribute("aStrokeColor", constantAttribute(value).size(4));
          } else if (typeof value === "function") {
            if (!dirty) {
              return;
            }
            projectedAttribute.value(value);
            programBuilder2.buffers().attribute("aStrokeColor", projectedAttribute);
          } else {
            throw new Error("Expected value to be an array or function, received ".concat(value));
          }
          dirty = false;
        };
        strokeColor$22.value = function() {
          if (!arguments.length) {
            return value;
          }
          if (value !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            value = arguments.length <= 0 ? void 0 : arguments[0];
            dirty = true;
          }
          return strokeColor$22;
        };
        rebind(strokeColor$22, projectedAttribute, "data");
        return strokeColor$22;
      };
      var line = function() {
        var base2 = xyBase();
        var crossValueAttribute = webglAdjacentAttribute(0, 1);
        var crossNextValueAttribute = crossValueAttribute.offset(1);
        var mainValueAttribute = webglAdjacentAttribute(0, 1);
        var mainNextValueAttribute = mainValueAttribute.offset(1);
        var definedAttribute = webglAdjacentAttribute(0, 1).type(types.UNSIGNED_BYTE);
        var definedNextAttribute = definedAttribute.offset(1);
        var draw2 = webglSeriesLine().crossValueAttribute(crossValueAttribute).crossNextValueAttribute(crossNextValueAttribute).mainValueAttribute(mainValueAttribute).mainNextValueAttribute(mainNextValueAttribute).definedAttribute(definedAttribute).definedNextAttribute(definedNextAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var line2 = function line3(data) {
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            if (base2.orient() === "vertical") {
              crossValueAttribute.value(function(d2, i3) {
                return xScale.scale(base2.crossValue()(d2, i3));
              }).data(data);
            } else {
              crossValueAttribute.value(function(d2, i3) {
                return xScale.scale(base2.mainValue()(d2, i3));
              }).data(data);
            }
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            if (base2.orient() === "vertical") {
              mainValueAttribute.value(function(d2, i3) {
                return yScale.scale(base2.mainValue()(d2, i3));
              }).data(data);
            } else {
              mainValueAttribute.value(function(d2, i3) {
                return yScale.scale(base2.crossValue()(d2, i3));
              }).data(data);
            }
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        line2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return line2;
        };
        line2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return line2;
        };
        rebindAll6(line2, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(line2, draw2, "context", "lineWidth", "pixelRatio");
        return line2;
      };
      var seriesSvgPoint3 = function() {
        var symbol3 = d3Shape.symbol();
        var base2 = xyBase();
        var join = dataJoin3("g", "point");
        var containerTransform = function containerTransform2(origin) {
          return "translate(" + origin[0] + ", " + origin[1] + ")";
        };
        var point8 = function point9(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var g2 = join(d3Selection.select(group3[index2]), filteredData);
            g2.enter().attr("transform", function(d2, i3) {
              return containerTransform(base2.values(d2, i3).origin);
            }).attr("fill", colors.gray).attr("stroke", colors.black).append("path");
            g2.attr("transform", function(d2, i3) {
              return containerTransform(base2.values(d2, i3).origin);
            }).select("path").attr("d", symbol3);
            base2.decorate()(g2, data, index2);
          });
        };
        rebindAll6(point8, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(point8, join, "key");
        rebind(point8, symbol3, "type", "size");
        return point8;
      };
      var seriesCanvasPoint = function() {
        var symbol3 = d3Shape.symbol();
        var base2 = xyBase();
        var point8 = function point9(data) {
          var filteredData = data.filter(base2.defined());
          var context = symbol3.context();
          filteredData.forEach(function(d2, i3) {
            context.save();
            var values = base2.values(d2, i3);
            context.translate(values.origin[0], values.origin[1]);
            context.beginPath();
            context.strokeStyle = colors.black;
            context.fillStyle = colors.gray;
            base2.decorate()(context, d2, i3);
            symbol3(d2, i3);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(point8, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(point8, symbol3, "size", "type", "context");
        return point8;
      };
      var point7 = function() {
        var base2 = xyBase();
        var size = functor$4(64);
        var type2 = d3Shape.symbolCircle;
        var crossValueAttribute = webglAttribute();
        var mainValueAttribute = webglAttribute();
        var sizeAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesPoint().crossValueAttribute(crossValueAttribute).mainValueAttribute(mainValueAttribute).sizeAttribute(sizeAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var point8 = function point9(data) {
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            sizeAttribute.value(function(d2, i3) {
              return size(d2, i3);
            }).data(data);
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            if (base2.orient() === "vertical") {
              crossValueAttribute.value(function(d2, i3) {
                return xScale.scale(base2.crossValue()(d2, i3));
              }).data(data);
            } else {
              crossValueAttribute.value(function(d2, i3) {
                return xScale.scale(base2.mainValue()(d2, i3));
              }).data(data);
            }
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            if (base2.orient() === "vertical") {
              mainValueAttribute.value(function(d2, i3) {
                return yScale.scale(base2.mainValue()(d2, i3));
              }).data(data);
            } else {
              mainValueAttribute.value(function(d2, i3) {
                return yScale.scale(base2.crossValue()(d2, i3));
              }).data(data);
            }
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).type(webglSymbolMapper(type2)).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        point8.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return point8;
        };
        point8.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          return point8;
        };
        point8.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return point8;
        };
        point8.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return point8;
        };
        rebindAll6(point8, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(point8, draw2, "context", "pixelRatio");
        return point8;
      };
      var bar$2 = function() {
        var pathGenerator = shapeBar().x(0).y(0);
        var base2 = xyBase();
        var join = dataJoin3("g", "bar");
        var valueAxisDimension = function valueAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.height : generator.width;
        };
        var crossAxisDimension = function crossAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.width : generator.height;
        };
        var translation = function translation2(origin) {
          return "translate(" + origin[0] + ", " + origin[1] + ")";
        };
        var bar2 = function bar3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var orient = base2.orient();
            if (orient !== "vertical" && orient !== "horizontal") {
              throw new Error("The bar series does not support an orientation of " + orient);
            }
            var filteredData = data.filter(base2.defined());
            var projectedData = filteredData.map(base2.values);
            pathGenerator.width(0).height(0);
            if (base2.orient() === "vertical") {
              pathGenerator.verticalAlign("top");
              pathGenerator.horizontalAlign("center");
            } else {
              pathGenerator.horizontalAlign("right");
              pathGenerator.verticalAlign("center");
            }
            var g2 = join(d3Selection.select(group3[index2]), filteredData);
            g2.enter().attr("transform", function(_3, i3) {
              return translation(projectedData[i3].baseOrigin);
            }).attr("class", "bar " + base2.orient()).attr("fill", colors.darkGray).append("path").attr("d", function(d2, i3) {
              crossAxisDimension(pathGenerator)(projectedData[i3].width);
              return pathGenerator([d2]);
            });
            g2.attr("transform", function(_3, i3) {
              return translation(projectedData[i3].origin);
            }).select("path").attr("d", function(d2, i3) {
              crossAxisDimension(pathGenerator)(projectedData[i3].width);
              valueAxisDimension(pathGenerator)(-projectedData[i3].height);
              return pathGenerator([d2]);
            });
            base2.decorate()(g2, filteredData, index2);
          });
        };
        rebindAll6(bar2, base2);
        rebind(bar2, join, "key");
        return bar2;
      };
      var bar$3 = function() {
        var base2 = xyBase();
        var pathGenerator = shapeBar().x(0).y(0);
        var valueAxisDimension = function valueAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.height : generator.width;
        };
        var crossAxisDimension = function crossAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.width : generator.height;
        };
        var bar2 = function bar3(data) {
          var context = pathGenerator.context();
          var filteredData = data.filter(base2.defined());
          var projectedData = filteredData.map(base2.values);
          if (base2.orient() === "vertical") {
            pathGenerator.verticalAlign("top");
            pathGenerator.horizontalAlign("center");
          } else {
            pathGenerator.horizontalAlign("right");
            pathGenerator.verticalAlign("center");
          }
          projectedData.forEach(function(datum2, i3) {
            context.save();
            context.beginPath();
            context.translate(datum2.origin[0], datum2.origin[1]);
            context.fillStyle = colors.darkGray;
            context.strokeStyle = "transparent";
            base2.decorate()(context, datum2.d, i3);
            valueAxisDimension(pathGenerator)(-datum2.height);
            crossAxisDimension(pathGenerator)(datum2.width);
            pathGenerator([datum2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(bar2, base2);
        rebind(bar2, pathGenerator, "context");
        return bar2;
      };
      var bar$4 = function() {
        var base2 = xyBase();
        var crossValueAttribute = webglAttribute();
        var mainValueAttribute = webglAttribute();
        var baseValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesBar().crossValueAttribute(crossValueAttribute).mainValueAttribute(mainValueAttribute).baseValueAttribute(baseValueAttribute).bandwidthAttribute(bandwidthAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var bar2 = function bar3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i3) {
              return base2.bandwidth()(d2, i3);
            }).data(data);
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i3) {
              return xScale.scale(base2.crossValue()(d2, i3));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            baseValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.baseValue()(d2, i3));
            }).data(data);
            mainValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.mainValue()(d2, i3));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        bar2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        bar2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        rebindAll6(bar2, base2, exclude2("align"));
        rebind(bar2, draw2, "context", "pixelRatio");
        return bar2;
      };
      var errorBarBase = function() {
        var highValue = function highValue2(d2) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2) {
          return d2.low;
        };
        var crossValue = function crossValue2(d2) {
          return d2.cross;
        };
        var orient = "vertical";
        var align = "center";
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i3) {
            return defined(lowValue, highValue, crossValue)(d2, i3);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i3) {
          var width = bandwidth(d2, i3);
          var offset = alignOffset(align, width);
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          if (orient === "vertical") {
            var y4 = yScale(highValue(d2, i3));
            return {
              origin: [xScale(crossValue(d2, i3)) + offset, y4],
              high: 0,
              low: yScale(lowValue(d2, i3)) - y4,
              width
            };
          } else {
            var x5 = xScale(lowValue(d2, i3));
            return {
              origin: [x5, yScale(crossValue(d2, i3)) + offset],
              high: xScale(highValue(d2, i3)) - x5,
              low: 0,
              width
            };
          }
        };
        base2.xValues = function() {
          return orient === "vertical" ? [crossValue] : [highValue, lowValue];
        };
        base2.yValues = function() {
          return orient !== "vertical" ? [crossValue] : [highValue, lowValue];
        };
        base2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var errorBar$2 = function() {
        var base2 = errorBarBase();
        var join = dataJoin3("g", "error-bar");
        var pathGenerator = shapeErrorBar().value(0);
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var containerTranslation = function containerTranslation2(values) {
          return "translate(" + values.origin[0] + ", " + values.origin[1] + ")";
        };
        var errorBar2 = function errorBar3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var projectedData = filteredData.map(base2.values);
            var g2 = join(d3Selection.select(group3[index2]), filteredData);
            g2.enter().attr("stroke", colors.black).attr("fill", colors.gray).attr("transform", function(d2, i3) {
              return containerTranslation(base2.values(d2, i3)) + " scale(1e-6, 1)";
            }).append("path");
            pathGenerator.orient(base2.orient());
            g2.each(function(d2, i3, g3) {
              var values = projectedData[i3];
              pathGenerator.high(values.high).low(values.low).width(values.width);
              transitionPropagator(d3Selection.select(g3[i3])).attr("transform", containerTranslation(values) + " scale(1)").select("path").attr("d", pathGenerator([d2]));
            });
            base2.decorate()(g2, data, index2);
          });
        };
        rebindAll6(errorBar2, base2);
        rebind(errorBar2, join, "key");
        return errorBar2;
      };
      var errorBar$3 = function() {
        var base2 = errorBarBase();
        var pathGenerator = shapeErrorBar().value(0);
        var errorBar2 = function errorBar3(data) {
          var filteredData = data.filter(base2.defined());
          var context = pathGenerator.context();
          pathGenerator.orient(base2.orient());
          filteredData.forEach(function(d2, i3) {
            context.save();
            var values = base2.values(d2, i3);
            context.translate(values.origin[0], values.origin[1]);
            context.beginPath();
            context.strokeStyle = colors.black;
            context.fillStyle = colors.gray;
            base2.decorate()(context, d2, i3);
            pathGenerator.high(values.high).width(values.width).low(values.low)([d2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(errorBar2, base2);
        rebind(errorBar2, pathGenerator, "context");
        return errorBar2;
      };
      var errorBar$4 = function() {
        var base2 = errorBarBase();
        var crossValueAttribute = webglAttribute();
        var highValueAttribute = webglAttribute();
        var lowValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesErrorBar().crossValueAttribute(crossValueAttribute).highValueAttribute(highValueAttribute).lowValueAttribute(lowValueAttribute).bandwidthAttribute(bandwidthAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var errorBar2 = function errorBar3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i3) {
              return base2.bandwidth()(d2, i3);
            }).data(data);
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i3) {
              return xScale.scale(base2.crossValue()(d2, i3));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            highValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.highValue()(d2, i3));
            }).data(data);
            lowValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.lowValue()(d2, i3));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        errorBar2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        errorBar2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        rebindAll6(errorBar2, base2, exclude2("align"));
        rebind(errorBar2, draw2, "context", "lineWidth", "pixelRatio");
        return errorBar2;
      };
      var area$2 = function() {
        var base2 = xyBase();
        var areaData = d3Shape.area();
        var join = dataJoin3("path", "area");
        var area2 = function area3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          areaData.defined(base2.defined());
          selection3.each(function(data, index2, group3) {
            var projectedData = data.map(base2.values);
            areaData.x(function(_3, i3) {
              return projectedData[i3].transposedX;
            }).y(function(_3, i3) {
              return projectedData[i3].transposedY;
            });
            var valueComponent = base2.orient() === "vertical" ? "y" : "x";
            areaData[valueComponent + "0"](function(_3, i3) {
              return projectedData[i3].y0;
            });
            areaData[valueComponent + "1"](function(_3, i3) {
              return projectedData[i3].y;
            });
            var path2 = join(d3Selection.select(group3[index2]), [data]);
            path2.enter().attr("fill", colors.gray);
            path2.attr("d", areaData);
            base2.decorate()(path2, data, index2);
          });
        };
        rebindAll6(area2, base2, exclude2("bandwidth", "align"));
        rebind(area2, join, "key");
        rebind(area2, areaData, "curve");
        return area2;
      };
      var area$3 = function() {
        var base2 = xyBase();
        var areaData = d3Shape.area();
        var area2 = function area3(data) {
          var context = areaData.context();
          areaData.defined(base2.defined());
          var projectedData = data.map(base2.values);
          areaData.x(function(_3, i3) {
            return projectedData[i3].transposedX;
          }).y(function(_3, i3) {
            return projectedData[i3].transposedY;
          });
          var valueComponent = base2.orient() === "vertical" ? "y" : "x";
          areaData[valueComponent + "0"](function(_3, i3) {
            return projectedData[i3].y0;
          });
          areaData[valueComponent + "1"](function(_3, i3) {
            return projectedData[i3].y;
          });
          context.beginPath();
          context.fillStyle = colors.gray;
          context.strokeStyle = "transparent";
          base2.decorate()(context, data);
          areaData(data);
          context.fill();
          context.stroke();
          context.closePath();
        };
        rebindAll6(area2, base2, exclude2("bandwidth", "align"));
        rebind(area2, areaData, "curve", "context");
        return area2;
      };
      var area$4 = function() {
        var base2 = xyBase();
        var crossValueAttribute = webglAdjacentAttribute(0, 1);
        var crossNextValueAttribute = crossValueAttribute.offset(1);
        var mainValueAttribute = webglAdjacentAttribute(0, 1);
        var mainNextValueAttribute = mainValueAttribute.offset(1);
        var baseValueAttribute = webglAdjacentAttribute(0, 1);
        var baseNextValueAttribute = baseValueAttribute.offset(1);
        var definedAttribute = webglAdjacentAttribute(0, 1).type(types.UNSIGNED_BYTE);
        var definedNextAttribute = definedAttribute.offset(1);
        var draw2 = webglSeriesArea().crossValueAttribute(crossValueAttribute).crossNextValueAttribute(crossNextValueAttribute).mainValueAttribute(mainValueAttribute).mainNextValueAttribute(mainNextValueAttribute).baseValueAttribute(baseValueAttribute).baseNextValueAttribute(baseNextValueAttribute).definedAttribute(definedAttribute).definedNextAttribute(definedNextAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var area2 = function area3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i3) {
              return xScale.scale(base2.crossValue()(d2, i3));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            baseValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.baseValue()(d2, i3));
            }).data(data);
            mainValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.mainValue()(d2, i3));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        area2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return area2;
        };
        area2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return area2;
        };
        rebindAll6(area2, base2, exclude2("bandwidth", "align"));
        rebind(area2, draw2, "context", "pixelRatio");
        return area2;
      };
      var ohlcBase = function() {
        var base2;
        var crossValue = function crossValue2(d2) {
          return d2.date;
        };
        var openValue = function openValue2(d2) {
          return d2.open;
        };
        var highValue = function highValue2(d2) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2) {
          return d2.low;
        };
        var closeValue = function closeValue2(d2) {
          return d2.close;
        };
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var align = "center";
        var crossValueScaled = function crossValueScaled2(d2, i3) {
          return base2.xScale()(crossValue(d2, i3));
        };
        base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i3) {
            return defined(crossValue, openValue, lowValue, highValue, closeValue)(d2, i3);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i3) {
          var closeRaw = closeValue(d2, i3);
          var openRaw = openValue(d2, i3);
          var width = bandwidth(d2, i3);
          var offset = alignOffset(align, width);
          var direction = "";
          if (closeRaw > openRaw) {
            direction = "up";
          } else if (closeRaw < openRaw) {
            direction = "down";
          }
          return {
            cross: crossValueScaled(d2, i3) + offset,
            open: base2.yScale()(openRaw),
            high: base2.yScale()(highValue(d2, i3)),
            low: base2.yScale()(lowValue(d2, i3)),
            close: base2.yScale()(closeRaw),
            width,
            direction
          };
        };
        base2.xValues = function() {
          return [crossValue];
        };
        base2.yValues = function() {
          return [openValue, highValue, lowValue, closeValue];
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.openValue = function() {
          if (!arguments.length) {
            return openValue;
          }
          openValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.yValue = base2.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var ohlcBase$1 = function(pathGenerator, seriesName) {
        var base2 = ohlcBase();
        var join = dataJoin3("g", seriesName);
        var containerTranslation = function containerTranslation2(values) {
          return "translate(" + values.cross + ", " + values.high + ")";
        };
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var candlestick2 = function candlestick3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var g2 = join(d3Selection.select(group3[index2]), filteredData);
            g2.enter().attr("transform", function(d2, i3) {
              return containerTranslation(base2.values(d2, i3)) + " scale(1e-6, 1)";
            }).append("path");
            g2.each(function(d2, i3, g3) {
              var values = base2.values(d2, i3);
              var color4 = values.direction === "up" ? colors.green : colors.red;
              var singleCandlestick = transitionPropagator(d3Selection.select(g3[i3])).attr("class", seriesName + " " + values.direction).attr("stroke", color4).attr("fill", color4).attr("transform", function() {
                return containerTranslation(values) + " scale(1)";
              });
              pathGenerator.x(0).width(values.width).open(function() {
                return values.open - values.high;
              }).high(0).low(function() {
                return values.low - values.high;
              }).close(function() {
                return values.close - values.high;
              });
              singleCandlestick.select("path").attr("d", pathGenerator([d2]));
            });
            base2.decorate()(g2, data, index2);
          });
        };
        rebind(candlestick2, join, "key");
        rebindAll6(candlestick2, base2);
        return candlestick2;
      };
      var candlestick$2 = function() {
        return ohlcBase$1(shapeCandlestick(), "candlestick");
      };
      var ohlcBase$2 = function(pathGenerator) {
        var base2 = ohlcBase();
        var candlestick2 = function candlestick3(data) {
          var filteredData = data.filter(base2.defined());
          var context = pathGenerator.context();
          filteredData.forEach(function(d2, i3) {
            context.save();
            var values = base2.values(d2, i3);
            context.translate(values.cross, values.high);
            context.beginPath();
            pathGenerator.x(0).open(function() {
              return values.open - values.high;
            }).width(values.width).high(0).low(function() {
              return values.low - values.high;
            }).close(function() {
              return values.close - values.high;
            })([d2]);
            var color4 = values.direction === "up" ? colors.green : colors.red;
            context.strokeStyle = color4;
            context.fillStyle = color4;
            base2.decorate()(context, d2, i3);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebind(candlestick2, pathGenerator, "context");
        rebindAll6(candlestick2, base2);
        return candlestick2;
      };
      var candlestick$3 = function() {
        return ohlcBase$2(shapeCandlestick());
      };
      var ohlcBase$3 = function(pathGenerator) {
        var base2 = ohlcBase();
        var crossValueAttribute = webglAttribute();
        var openValueAttribute = webglAttribute();
        var highValueAttribute = webglAttribute();
        var lowValueAttribute = webglAttribute();
        var closeValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        pathGenerator.crossValueAttribute(crossValueAttribute).openValueAttribute(openValueAttribute).highValueAttribute(highValueAttribute).lowValueAttribute(lowValueAttribute).closeValueAttribute(closeValueAttribute).bandwidthAttribute(bandwidthAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var candlestick2 = function candlestick3(data) {
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i3) {
              return base2.bandwidth()(d2, i3);
            }).data(data);
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i3) {
              return xScale.scale(base2.crossValue()(d2, i3));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            openValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.openValue()(d2, i3));
            }).data(data);
            highValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.highValue()(d2, i3));
            }).data(data);
            lowValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.lowValue()(d2, i3));
            }).data(data);
            closeValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.closeValue()(d2, i3));
            }).data(data);
          }
          pathGenerator.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          pathGenerator(data.length);
        };
        candlestick2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return candlestick2;
        };
        candlestick2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return candlestick2;
        };
        rebindAll6(candlestick2, base2, exclude2("align"));
        rebind(candlestick2, pathGenerator, "context", "lineWidth", "pixelRatio");
        return candlestick2;
      };
      var candlestick$4 = function() {
        return ohlcBase$3(webglSeriesCandlestick());
      };
      var boxPlotBase = function() {
        var upperQuartileValue = function upperQuartileValue2(d2) {
          return d2.upperQuartile;
        };
        var lowerQuartileValue = function lowerQuartileValue2(d2) {
          return d2.lowerQuartile;
        };
        var highValue = function highValue2(d2) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2) {
          return d2.low;
        };
        var crossValue = function crossValue2(d2) {
          return d2.value;
        };
        var medianValue = function medianValue2(d2) {
          return d2.median;
        };
        var orient = "vertical";
        var align = "center";
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i3) {
            return defined(lowValue, highValue, lowerQuartileValue, upperQuartileValue, crossValue, medianValue)(d2, i3);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i3) {
          var width = bandwidth(d2, i3);
          var offset = alignOffset(align, width);
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          if (orient === "vertical") {
            var y4 = yScale(highValue(d2, i3));
            return {
              origin: [xScale(crossValue(d2, i3)) + offset, y4],
              high: 0,
              upperQuartile: yScale(upperQuartileValue(d2, i3)) - y4,
              median: yScale(medianValue(d2, i3)) - y4,
              lowerQuartile: yScale(lowerQuartileValue(d2, i3)) - y4,
              low: yScale(lowValue(d2, i3)) - y4,
              width
            };
          } else {
            var x5 = xScale(lowValue(d2, i3));
            return {
              origin: [x5, yScale(crossValue(d2, i3)) + offset],
              high: xScale(highValue(d2, i3)) - x5,
              upperQuartile: xScale(upperQuartileValue(d2, i3)) - x5,
              median: xScale(medianValue(d2, i3)) - x5,
              lowerQuartile: xScale(lowerQuartileValue(d2, i3)) - x5,
              low: 0,
              width
            };
          }
        };
        base2.xValues = function() {
          return orient === "vertical" ? [crossValue] : [upperQuartileValue, lowerQuartileValue, highValue, lowValue, medianValue];
        };
        base2.yValues = function() {
          return orient !== "vertical" ? [crossValue] : [upperQuartileValue, lowerQuartileValue, highValue, lowValue, medianValue];
        };
        base2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.lowerQuartileValue = function() {
          if (!arguments.length) {
            return lowerQuartileValue;
          }
          lowerQuartileValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.upperQuartileValue = function() {
          if (!arguments.length) {
            return upperQuartileValue;
          }
          upperQuartileValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.medianValue = function() {
          if (!arguments.length) {
            return medianValue;
          }
          medianValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var boxPlot$2 = function() {
        var base2 = boxPlotBase();
        var join = dataJoin3("g", "box-plot");
        var pathGenerator = shapeBoxPlot().value(0);
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var containerTranslation = function containerTranslation2(values) {
          return "translate(" + values.origin[0] + ", " + values.origin[1] + ")";
        };
        var boxPlot2 = function boxPlot3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var g2 = join(d3Selection.select(group3[index2]), filteredData);
            g2.enter().attr("stroke", colors.black).attr("fill", colors.gray).attr("transform", function(d2, i3) {
              return containerTranslation(base2.values(d2, i3)) + " scale(1e-6, 1)";
            }).append("path");
            pathGenerator.orient(base2.orient());
            g2.each(function(d2, i3, g3) {
              var values = base2.values(d2, i3);
              pathGenerator.median(values.median).upperQuartile(values.upperQuartile).lowerQuartile(values.lowerQuartile).width(values.width).high(values.high).low(values.low);
              transitionPropagator(d3Selection.select(g3[i3])).attr("transform", containerTranslation(values)).select("path").attr("d", pathGenerator([d2]));
            });
            base2.decorate()(g2, data, index2);
          });
        };
        rebindAll6(boxPlot2, base2);
        rebind(boxPlot2, join, "key");
        rebind(boxPlot2, pathGenerator, "cap");
        return boxPlot2;
      };
      var boxPlot$3 = function() {
        var base2 = boxPlotBase();
        var pathGenerator = shapeBoxPlot().value(0);
        var boxPlot2 = function boxPlot3(data) {
          var filteredData = data.filter(base2.defined());
          var context = pathGenerator.context();
          pathGenerator.orient(base2.orient());
          filteredData.forEach(function(d2, i3) {
            context.save();
            var values = base2.values(d2, i3);
            context.translate(values.origin[0], values.origin[1]);
            context.beginPath();
            context.fillStyle = colors.gray;
            context.strokeStyle = colors.black;
            base2.decorate()(context, d2, i3);
            pathGenerator.median(values.median).upperQuartile(values.upperQuartile).lowerQuartile(values.lowerQuartile).high(values.high).width(values.width).low(values.low)([d2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(boxPlot2, base2);
        rebind(boxPlot2, pathGenerator, "cap", "context");
        return boxPlot2;
      };
      var boxPlot$4 = function() {
        var base2 = boxPlotBase();
        var crossValueAttribute = webglAttribute();
        var highValueAttribute = webglAttribute();
        var upperQuartileValueAttribute = webglAttribute();
        var medianValueAttribute = webglAttribute();
        var lowerQuartileValueAttribute = webglAttribute();
        var lowValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var capAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesBoxPlot().crossValueAttribute(crossValueAttribute).highValueAttribute(highValueAttribute).upperQuartileValueAttribute(upperQuartileValueAttribute).medianValueAttribute(medianValueAttribute).lowerQuartileValueAttribute(lowerQuartileValueAttribute).lowValueAttribute(lowValueAttribute).bandwidthAttribute(bandwidthAttribute).capAttribute(capAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var cap = functor$4(20);
        var boxPlot2 = function boxPlot3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i3) {
              return base2.bandwidth()(d2, i3);
            }).data(data);
            capAttribute.value(function(d2, i3) {
              return cap(d2, i3);
            }).data(data);
            definedAttribute.value(function(d2, i3) {
              return base2.defined()(d2, i3);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i3) {
              return xScale.scale(base2.crossValue()(d2, i3));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            highValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.highValue()(d2, i3));
            }).data(data);
            upperQuartileValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.upperQuartileValue()(d2, i3));
            }).data(data);
            medianValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.medianValue()(d2, i3));
            }).data(data);
            lowerQuartileValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.lowerQuartileValue()(d2, i3));
            }).data(data);
            lowValueAttribute.value(function(d2, i3) {
              return yScale.scale(base2.lowValue()(d2, i3));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        boxPlot2.cap = function() {
          if (!arguments.length) {
            return cap;
          }
          cap = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        boxPlot2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        rebindAll6(boxPlot2, base2, exclude2("align"));
        rebind(boxPlot2, draw2, "context", "lineWidth", "pixelRatio");
        return boxPlot2;
      };
      var ohlc$2 = function() {
        return ohlcBase$1(shapeOhlc(), "ohlc");
      };
      var ohlc$3 = function() {
        return ohlcBase$2(shapeOhlc());
      };
      var ohlc$4 = function() {
        return ohlcBase$3(webglSeriesOhlc());
      };
      var multiBase = function() {
        var series = [];
        var mapping = function mapping2(d2) {
          return d2;
        };
        var key2 = function key3(_3, i3) {
          return i3;
        };
        var multi = createBase({
          decorate: function decorate() {
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        multi.xValues = function() {
          return series.map(function(s2) {
            return s2.xValues();
          }).reduce(function(a4, b4) {
            return a4.concat(b4);
          });
        };
        multi.yValues = function() {
          return series.map(function(s2) {
            return s2.yValues();
          }).reduce(function(a4, b4) {
            return a4.concat(b4);
          });
        };
        multi.mapping = function() {
          if (!arguments.length) {
            return mapping;
          }
          mapping = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        multi.key = function() {
          if (!arguments.length) {
            return key2;
          }
          key2 = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        multi.series = function() {
          if (!arguments.length) {
            return series;
          }
          series = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        return multi;
      };
      var seriesSvgMulti6 = function() {
        var base2 = multiBase();
        var innerJoin = dataJoin3("g");
        var join = dataJoin3("g", "multi");
        var multi = function multi2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
            innerJoin.transition(selection3);
          }
          var mapping = base2.mapping();
          var series = base2.series();
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          selection3.each(function(data, index2, group3) {
            var container = join(d3Selection.select(group3[index2]), series);
            container.each(function(dataSeries, seriesIndex, seriesGroup) {
              dataSeries.xScale(xScale).yScale(yScale);
              var seriesData = mapping(data, seriesIndex, series);
              var innerContainer = innerJoin(d3Selection.select(seriesGroup[seriesIndex]), [seriesData]);
              innerContainer.call(dataSeries);
            });
            container.selection().order();
            base2.decorate()(container, data, index2);
          });
        };
        rebindAll6(multi, base2);
        rebind(multi, join, "key");
        return multi;
      };
      var seriesCanvasMulti5 = function() {
        var context = null;
        var base2 = multiBase();
        var multi = function multi2(data) {
          var mapping = base2.mapping();
          var series = base2.series();
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          series.forEach(function(dataSeries, index2) {
            var seriesData = mapping(data, index2, series);
            dataSeries.context(context).xScale(xScale).yScale(yScale);
            var adaptedDecorate;
            if (dataSeries.decorate) {
              adaptedDecorate = dataSeries.decorate();
              dataSeries.decorate(function(c6, d2, i3) {
                base2.decorate()(c6, data, index2);
                adaptedDecorate(c6, d2, i3);
              });
            } else {
              base2.decorate()(context, data, index2);
            }
            dataSeries(seriesData);
            if (adaptedDecorate) {
              dataSeries.decorate(adaptedDecorate);
            }
          });
        };
        multi.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        rebindAll6(multi, base2);
        return multi;
      };
      var multiSeries = function() {
        var context = null;
        var pixelRatio = 1;
        var base2 = multiBase();
        var multi = function multi2(data) {
          var mapping = base2.mapping();
          var series = base2.series();
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          series.forEach(function(dataSeries, index2) {
            var seriesData = mapping(data, index2, series);
            dataSeries.context(context).pixelRatio(pixelRatio).xScale(xScale).yScale(yScale);
            var adaptedDecorate;
            if (dataSeries.decorate) {
              adaptedDecorate = dataSeries.decorate();
              dataSeries.decorate(function(c6, d2, i3) {
                base2.decorate()(c6, data, index2);
                adaptedDecorate(c6, d2, i3);
              });
            } else {
              base2.decorate()(context, data, index2);
            }
            dataSeries(seriesData);
            if (adaptedDecorate) {
              dataSeries.decorate(adaptedDecorate);
            }
          });
        };
        multi.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        multi.pixelRatio = function() {
          if (!arguments.length) {
            return pixelRatio;
          }
          pixelRatio = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        rebindAll6(multi, base2);
        return multi;
      };
      var groupedBase = function(series) {
        var bandwidth = function bandwidth2() {
          return 50;
        };
        var align = "center";
        var offsetScale = d3Scale.scaleBand();
        var grouped2 = createBase({
          decorate: function decorate() {
          },
          xScale: d3Scale.scaleLinear(),
          yScale: d3Scale.scaleLinear()
        });
        grouped2.offsetScaleForDatum = function(data, d2, i3) {
          var width = bandwidth(d2, i3);
          var offset = alignOffset(align, width);
          var halfWidth = width / 2;
          return offsetScale.domain(d3Array.range(0, data.length)).range([-halfWidth + offset, halfWidth + offset]);
        };
        grouped2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return grouped2;
        };
        grouped2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return grouped2;
        };
        rebindAll6(grouped2, offsetScale, includeMap({
          "paddingInner": "paddingOuter"
        }));
        return grouped2;
      };
      var grouped = function(series) {
        var base2 = groupedBase();
        var join = dataJoin3("g", "grouped");
        var grouped2 = function grouped3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var g2 = join(d3Selection.select(group3[index2]), data);
            g2.enter().append("g");
            g2.select("g").each(function(_3, index3, group4) {
              var container = d3Selection.select(group4[index3]);
              var isVertical = series.orient() !== "horizontal";
              var compositeScale = function compositeScale2(d2, i3) {
                var offset = base2.offsetScaleForDatum(data, d2, i3);
                var baseScale2 = isVertical ? base2.xScale() : base2.yScale();
                return baseScale2(d2) + offset(index3) + offset.bandwidth() / 2;
              };
              if (isVertical) {
                series.xScale(compositeScale);
                series.yScale(base2.yScale());
              } else {
                series.yScale(compositeScale);
                series.xScale(base2.xScale());
              }
              if (series.bandwidth) {
                series.bandwidth(function(d2, i3) {
                  return base2.offsetScaleForDatum(data, d2, i3).bandwidth();
                });
              }
              series.decorate(function(s2, d2) {
                return base2.decorate()(s2, d2, index3);
              });
              container.call(series);
            });
          });
        };
        rebindAll6(grouped2, series, exclude2("decorate", "xScale", "yScale"));
        rebindAll6(grouped2, base2, exclude2("offsetScaleForDatum"));
        return grouped2;
      };
      function grouped$1(series) {
        var base2 = groupedBase();
        var grouped2 = function grouped3(data) {
          data.forEach(function(seriesData, index2) {
            var isVertical = series.orient() !== "horizontal";
            var compositeScale = function compositeScale2(d2, i3) {
              var offset = base2.offsetScaleForDatum(data, d2, i3);
              var baseScale2 = isVertical ? base2.xScale() : base2.yScale();
              return baseScale2(d2) + offset(index2) + offset.bandwidth() / 2;
            };
            if (isVertical) {
              series.xScale(compositeScale);
              series.yScale(base2.yScale());
            } else {
              series.yScale(compositeScale);
              series.xScale(base2.xScale());
            }
            if (series.bandwidth) {
              series.bandwidth(function(d2, i3) {
                return base2.offsetScaleForDatum(data, d2, i3).bandwidth();
              });
            }
            series.decorate(function(c6, d2) {
              return base2.decorate()(c6, d2, index2);
            });
            series(seriesData);
          });
        };
        rebindAll6(grouped2, series, exclude2("decorate", "xScale", "yScale"));
        rebindAll6(grouped2, base2, exclude2("offsetScaleForDatum"));
        return grouped2;
      }
      var repeat = function() {
        var orient = "vertical";
        var series = seriesSvgLine2();
        var multi = seriesSvgMulti6();
        var repeat2 = function repeat3(selection3) {
          return selection3.each(function(data, index2, group3) {
            if (orient === "vertical") {
              multi.series(data[0].map(function(_3) {
                return series;
              })).mapping(function(data2, index3) {
                return data2.map(function(d2) {
                  return d2[index3];
                });
              });
            } else {
              multi.series(data.map(function(_3) {
                return series;
              })).mapping(function(data2, index3) {
                return data2[index3];
              });
            }
            d3Selection.select(group3[index2]).call(multi);
          });
        };
        repeat2.series = function() {
          if (!arguments.length) {
            return series;
          }
          series = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        repeat2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        rebindAll6(repeat2, multi, exclude2("series", "mapping"));
        return repeat2;
      };
      var repeat$1 = function() {
        var orient = "vertical";
        var series = seriesCanvasLine2();
        var multi = seriesCanvasMulti5();
        var repeat2 = function repeat3(data) {
          if (orient === "vertical") {
            multi.series(data[0].map(function(_3) {
              return series;
            })).mapping(function(data2, index2) {
              return data2.map(function(d2) {
                return d2[index2];
              });
            });
          } else {
            multi.series(data.map(function(_3) {
              return series;
            })).mapping(function(data2, index2) {
              return data2[index2];
            });
          }
          multi(data);
        };
        repeat2.series = function() {
          if (!arguments.length) {
            return series;
          }
          series = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        repeat2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        rebindAll6(repeat2, multi, exclude2("series", "mapping"));
        return repeat2;
      };
      var repeat$2 = function() {
        var orient = "vertical";
        var series = function series2() {
          return line();
        };
        var multi = multiSeries();
        var seriesCache = [];
        var repeat2 = function repeat3(data) {
          if (orient === "vertical") {
            var previousSeriesCache = seriesCache;
            seriesCache = data[0].map(function(d2, i3) {
              return i3 < previousSeriesCache.length ? previousSeriesCache[i3] : series();
            });
            multi.series(seriesCache).mapping(function(data2, index2) {
              return data2.map(function(d2) {
                return d2[index2];
              });
            });
          } else {
            var _previousSeriesCache = seriesCache;
            seriesCache = data.map(function(d2, i3) {
              return i3 < _previousSeriesCache.length ? _previousSeriesCache[i3] : series();
            });
            multi.series(seriesCache).mapping(function(data2, index2) {
              return data2[index2];
            });
          }
          multi(data);
        };
        repeat2.series = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (!args.length) {
            return series;
          }
          if (typeof args[0].xScale === "function" && typeof args[0].yScale === "function") {
            series = function series2() {
              return args[0];
            };
          } else {
            series = args[0];
          }
          seriesCache = [];
          return repeat2;
        };
        repeat2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          seriesCache = [];
          return repeat2;
        };
        rebindAll6(repeat2, multi, exclude2("series", "mapping"));
        return repeat2;
      };
      var sortUnique = function sortUnique2(arr) {
        return arr.sort(d3Array.ascending).filter(function(value, index2, self2) {
          return self2.indexOf(value, index2 + 1) === -1;
        });
      };
      var autoBandwidth4 = function(adaptee) {
        var widthFraction = 0.75;
        var computeBandwidth = function computeBandwidth2(screenValues) {
          if (screenValues.length <= 1) {
            return 10;
          }
          screenValues = sortUnique(screenValues);
          var neighbourDistances = d3Array.pairs(screenValues).map(function(tuple) {
            return Math.abs(tuple[0] - tuple[1]);
          });
          var minDistance = d3Array.min(neighbourDistances);
          return widthFraction * minDistance;
        };
        var determineBandwith = function determineBandwith2(crossScale, data, accessor) {
          if (crossScale.bandwidth) {
            return crossScale.bandwidth();
          } else {
            var _ref;
            var flattenedData = Array.isArray(data) ? (_ref = []).concat.apply(_ref, _toConsumableArray(data)) : data;
            var crossValuePoints = flattenedData.filter(adaptee.defined()).map(accessor()).map(crossScale);
            var width = computeBandwidth(crossValuePoints);
            return width;
          }
        };
        var autoBandwidth5 = function autoBandwidth6(arg) {
          var computeWidth = function computeWidth2(data) {
            if (adaptee.xBandwidth && adaptee.yBandwidth) {
              adaptee.xBandwidth(determineBandwith(adaptee.xScale(), data, adaptee.xValue));
              adaptee.yBandwidth(determineBandwith(adaptee.yScale(), data, adaptee.yValue));
            } else {
              var crossScale = adaptee.orient && adaptee.orient() === "horizontal" ? adaptee.yScale() : adaptee.xScale();
              adaptee.bandwidth(determineBandwith(crossScale, data, adaptee.crossValue));
            }
          };
          if (arg instanceof d3Selection.selection) {
            arg.each(function(data, index2, group3) {
              computeWidth(data);
              adaptee(d3Selection.select(group3[index2]));
            });
          } else {
            computeWidth(arg);
            adaptee(arg);
          }
        };
        rebindAll6(autoBandwidth5, adaptee);
        autoBandwidth5.widthFraction = function() {
          if (!arguments.length) {
            return widthFraction;
          }
          widthFraction = arguments.length <= 0 ? void 0 : arguments[0];
          return autoBandwidth5;
        };
        return autoBandwidth5;
      };
      var heatmapBase = function() {
        var xValue = function xValue2(d2) {
          return d2.x;
        };
        var yValue = function yValue2(d2) {
          return d2.y;
        };
        var colorValue = function colorValue2(d2) {
          return d2.color;
        };
        var yBandwidth = function yBandwidth2() {
          return 5;
        };
        var xBandwidth = function xBandwidth2() {
          return 5;
        };
        var colorInterpolate = d3ScaleChromatic.interpolateViridis;
        var heatmap2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i3) {
            return defined(xValue, yValue, colorValue)(d2, i3);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        heatmap2.pathGenerator = shapeBar().x(0).y(0);
        heatmap2.colorScale = function(data) {
          var colorValues = data.map(colorValue);
          return d3Scale.scaleLinear().domain([d3Array.min(colorValues), d3Array.max(colorValues)]);
        };
        heatmap2.values = function(d2, i3) {
          return {
            x: heatmap2.xScale()(xValue(d2, i3)),
            y: heatmap2.yScale()(yValue(d2, i3)),
            colorValue: colorValue(d2, i3),
            width: xBandwidth(d2, i3),
            height: yBandwidth(d2, i3)
          };
        };
        heatmap2.xValues = function() {
          return [xValue];
        };
        heatmap2.yValues = function() {
          return [yValue];
        };
        heatmap2.xValue = function() {
          if (!arguments.length) {
            return xValue;
          }
          xValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.yValue = function() {
          if (!arguments.length) {
            return yValue;
          }
          yValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.colorValue = function() {
          if (!arguments.length) {
            return colorValue;
          }
          colorValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.colorInterpolate = function() {
          if (!arguments.length) {
            return colorInterpolate;
          }
          colorInterpolate = arguments.length <= 0 ? void 0 : arguments[0];
          return heatmap2;
        };
        heatmap2.xBandwidth = function() {
          if (!arguments.length) {
            return xBandwidth;
          }
          xBandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.yBandwidth = function() {
          if (!arguments.length) {
            return yBandwidth;
          }
          yBandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        rebindAll6(heatmap2, heatmap2.pathGenerator, includeMap({
          "horizontalAlign": "xAlign",
          "verticalAlign": "yAlign"
        }));
        return heatmap2;
      };
      var heatmap = function() {
        var base2 = heatmapBase();
        var join = dataJoin3("g", "box");
        var containerTransform = function containerTransform2(values) {
          return "translate(" + values.x + ", " + values.y + ")";
        };
        var heatmap2 = function heatmap3(selection3) {
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var colorValue = base2.colorValue();
            var colorInterpolate = base2.colorInterpolate();
            var colorScale = base2.colorScale(filteredData);
            var g2 = join(d3Selection.select(group3[index2]), filteredData);
            g2.enter().append("path").attr("stroke", "transparent");
            g2.attr("transform", function(d2, i3) {
              return containerTransform(base2.values(d2, i3));
            }).select("path").attr("d", function(d2, i3) {
              return base2.pathGenerator.width(base2.values(d2, i3).width).height(base2.values(d2, i3).height)([d2]);
            }).attr("fill", function(d2, i3) {
              return colorInterpolate(colorScale(colorValue(d2, i3)));
            });
            base2.decorate()(g2, data, index2);
          });
        };
        rebindAll6(heatmap2, base2);
        return heatmap2;
      };
      var heatmap$1 = function() {
        var base2 = heatmapBase();
        var heatmap2 = function heatmap3(data) {
          var filteredData = data.filter(base2.defined());
          var colorInterpolate = base2.colorInterpolate();
          var colorScale = base2.colorScale(filteredData);
          var context = base2.pathGenerator.context();
          filteredData.forEach(function(d2, i3) {
            context.save();
            context.beginPath();
            var values = base2.values(d2, i3);
            context.translate(values.x, values.y);
            context.fillStyle = colorInterpolate(colorScale(values.colorValue));
            context.strokeStyle = "transparent";
            base2.decorate()(context, d2, i3);
            base2.pathGenerator.height(values.height).width(values.width)([d2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebind(heatmap2, base2.pathGenerator, "context");
        rebindAll6(heatmap2, base2);
        return heatmap2;
      };
      var constant2 = function(value) {
        return typeof value === "function" ? value : function() {
          return value;
        };
      };
      var band3 = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var orient = "horizontal";
        var fromValue = function fromValue2(d2) {
          return d2.from;
        };
        var toValue = function toValue2(d2) {
          return d2.to;
        };
        var decorate = function decorate2() {
        };
        var join = dataJoin3("g", "annotation-band");
        var pathGenerator = shapeBar().horizontalAlign("center").verticalAlign("center").x(0).y(0);
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var horizontal = orient === "horizontal";
          var translation = horizontal ? function(a4, b4) {
            return "translate(".concat(a4, ", ").concat(b4, ")");
          } : function(a4, b4) {
            return "translate(".concat(b4, ", ").concat(a4, ")");
          };
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var crossScaleRange = crossScale.range();
          var crossScaleSize = crossScaleRange[1] - crossScaleRange[0];
          var valueAxisDimension = horizontal ? "height" : "width";
          var crossAxisDimension = horizontal ? "width" : "height";
          var containerTransform = function containerTransform2() {
            return translation((crossScaleRange[1] + crossScaleRange[0]) / 2, (valueScale(toValue.apply(void 0, arguments)) + valueScale(fromValue.apply(void 0, arguments))) / 2);
          };
          pathGenerator[crossAxisDimension](crossScaleSize);
          pathGenerator[valueAxisDimension](function() {
            return valueScale(toValue.apply(void 0, arguments)) - valueScale(fromValue.apply(void 0, arguments));
          });
          selection3.each(function(data, index2, nodes) {
            var g2 = join(d3Selection.select(nodes[index2]), data);
            g2.enter().attr("transform", containerTransform).append("path").classed("band", true);
            g2.attr("class", "annotation-band ".concat(orient)).attr("transform", containerTransform).select("path").attr("d", function(d2, i3) {
              return pathGenerator([d2], i3);
            });
            decorate(g2, data, index2);
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.fromValue = function() {
          if (!arguments.length) {
            return fromValue;
          }
          fromValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.toValue = function() {
          if (!arguments.length) {
            return toValue;
          }
          toValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        return instance;
      };
      var band$1 = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var orient = "horizontal";
        var fromValue = function fromValue2(d2) {
          return d2.from;
        };
        var toValue = function toValue2(d2) {
          return d2.to;
        };
        var decorate = function decorate2() {
        };
        var pathGenerator = shapeBar().horizontalAlign("right").verticalAlign("top");
        var instance = function instance2(data) {
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var context = pathGenerator.context();
          var horizontal = orient === "horizontal";
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var crossScaleRange = crossScale.range();
          var crossScaleSize = crossScaleRange[1] - crossScaleRange[0];
          var valueAxisStart = horizontal ? "x" : "y";
          var crossAxisStart = horizontal ? "y" : "x";
          var valueAxisDimension = horizontal ? "height" : "width";
          var crossAxisDimension = horizontal ? "width" : "height";
          data.forEach(function(d2, i3) {
            context.save();
            context.beginPath();
            context.strokeStyle = "transparent";
            pathGenerator[crossAxisStart](valueScale(fromValue(d2)));
            pathGenerator[valueAxisStart](crossScaleRange[0]);
            pathGenerator[crossAxisDimension](crossScaleSize);
            pathGenerator[valueAxisDimension](valueScale(toValue(d2)) - valueScale(fromValue(d2)));
            decorate(context, d2, i3);
            pathGenerator.context(context)([d2], i3);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.fromValue = function() {
          if (!arguments.length) {
            return fromValue;
          }
          fromValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.toValue = function() {
          if (!arguments.length) {
            return toValue;
          }
          toValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        rebind(instance, pathGenerator, "context");
        return instance;
      };
      var annotationLine = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var value = function value2(d2) {
          return d2;
        };
        var label2 = value;
        var decorate = function decorate2() {
        };
        var orient = "horizontal";
        var join = dataJoin3("g", "annotation-line");
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var horizontal = orient === "horizontal";
          var translation = horizontal ? function(a4, b4) {
            return "translate(".concat(a4, ", ").concat(b4, ")");
          } : function(a4, b4) {
            return "translate(".concat(b4, ", ").concat(a4, ")");
          };
          var lineProperty = horizontal ? "x2" : "y2";
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var handleOne = horizontal ? "left-handle" : "bottom-handle";
          var handleTwo = horizontal ? "right-handle" : "top-handle";
          var textOffsetX = horizontal ? "9" : "0";
          var textOffsetY = horizontal ? "0" : "9";
          var textOffsetDeltaY = horizontal ? "0.32em" : "0.71em";
          var textAnchor = horizontal ? "start" : "middle";
          var scaleRange = crossScale.range();
          var containerTransform = function containerTransform2() {
            return translation(scaleRange[0], valueScale(value.apply(void 0, arguments)));
          };
          var scaleWidth = scaleRange[1] - scaleRange[0];
          selection3.each(function(data, selectionIndex, nodes) {
            var g2 = join(d3Selection.select(nodes[selectionIndex]), data);
            var enter = g2.enter().attr("transform", containerTransform).style("stroke", "#bbb");
            enter.append("line").attr(lineProperty, scaleWidth);
            enter.append("g").classed(handleOne, true).style("stroke", "none");
            enter.append("g").classed(handleTwo, true).style("stroke", "none").attr("transform", translation(scaleWidth, 0)).append("text").attr("text-anchor", textAnchor).attr("x", textOffsetX).attr("y", textOffsetY).attr("dy", textOffsetDeltaY);
            g2.attr("class", "annotation-line ".concat(orient));
            g2.attr("transform", containerTransform);
            g2.select("line").attr(lineProperty, scaleWidth);
            g2.select("g." + handleTwo).attr("transform", translation(scaleWidth, 0));
            g2.select("text").text(label2);
            decorate(g2, data, selectionIndex);
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.label = function() {
          if (!arguments.length) {
            return label2;
          }
          label2 = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        return instance;
      };
      function crosshair() {
        var x5 = function x6(d2) {
          return d2.x;
        };
        var y4 = function y5(d2) {
          return d2.y;
        };
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var decorate = function decorate2() {
        };
        var join = dataJoin3("g", "annotation-crosshair");
        var point8 = seriesSvgPoint3();
        var horizontalLine = annotationLine();
        var verticalLine = annotationLine().orient("vertical");
        var xIdentity = d3Scale.scaleIdentity();
        var yIdentity = d3Scale.scaleIdentity();
        var multi = seriesSvgMulti6().series([horizontalLine, verticalLine, point8]).xScale(xIdentity).yScale(yIdentity).mapping(function(data) {
          return [data];
        });
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, nodes) {
            var g2 = join(d3Selection.select(nodes[index2]), data);
            g2.enter().style("pointer-events", "none");
            xIdentity.range(xScale.range());
            yIdentity.range(yScale.range());
            point8.crossValue(x5).mainValue(y4);
            horizontalLine.value(y4);
            verticalLine.value(x5);
            g2.call(multi);
            decorate(g2, data, index2);
          });
        };
        instance.x = function() {
          if (!arguments.length) {
            return x5;
          }
          x5 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.y = function() {
          if (!arguments.length) {
            return y4;
          }
          y4 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        var lineIncludes = include("label");
        rebindAll6(instance, horizontalLine, lineIncludes, prefix2("y"));
        rebindAll6(instance, verticalLine, lineIncludes, prefix2("x"));
        return instance;
      }
      var annotationLine$1 = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var value = function value2(d2) {
          return d2;
        };
        var label2 = value;
        var decorate = function decorate2() {
        };
        var orient = "horizontal";
        var lineData = d3Shape.line();
        var instance = function instance2(data) {
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var horizontal = orient === "horizontal";
          var context = lineData.context();
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var crossDomain = crossScale.domain();
          var textOffsetX = horizontal ? 9 : 0;
          var textOffsetY = horizontal ? 0 : 9;
          var textAlign = horizontal ? "left" : "center";
          var textBaseline = horizontal ? "middle" : "hanging";
          data.forEach(function(d2, i3) {
            context.save();
            context.beginPath();
            context.strokeStyle = "#bbb";
            context.fillStyle = "#000";
            context.textAlign = textAlign;
            context.textBaseline = textBaseline;
            decorate(context, d2, i3);
            lineData.context(context)(crossDomain.map(function(extent2) {
              var point8 = [crossScale(extent2), valueScale(value(d2))];
              return horizontal ? point8 : point8.reverse();
            }));
            var x5 = horizontal ? crossScale(crossDomain[1]) : valueScale(value(d2));
            var y4 = horizontal ? valueScale(value(d2)) : crossScale(crossDomain[1]);
            context.fillText(label2(d2), x5 + textOffsetX, y4 + textOffsetY);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.label = function() {
          if (!arguments.length) {
            return label2;
          }
          label2 = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        rebind(instance, lineData, "context");
        return instance;
      };
      var crosshair$1 = function() {
        var x5 = function x6(d2) {
          return d2.x;
        };
        var y4 = function y5(d2) {
          return d2.y;
        };
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var point8 = seriesCanvasPoint();
        var horizontalLine = annotationLine$1();
        var verticalLine = annotationLine$1().orient("vertical");
        var xIdentity = d3Scale.scaleIdentity();
        var yIdentity = d3Scale.scaleIdentity();
        var multi = seriesCanvasMulti5().series([horizontalLine, verticalLine, point8]).xScale(xIdentity).yScale(yIdentity).mapping(function(data) {
          return [data];
        });
        var instance = function instance2(data) {
          data.forEach(function(d2) {
            xIdentity.range(xScale.range());
            yIdentity.range(yScale.range());
            point8.crossValue(x5).mainValue(y4);
            horizontalLine.value(y4);
            verticalLine.value(x5);
            multi(d2);
          });
        };
        instance.x = function() {
          if (!arguments.length) {
            return x5;
          }
          x5 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.y = function() {
          if (!arguments.length) {
            return y4;
          }
          y4 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        var lineIncludes = include("label", "decorate");
        rebindAll6(instance, horizontalLine, lineIncludes, prefix2("y"));
        rebindAll6(instance, verticalLine, lineIncludes, prefix2("x"));
        rebind(instance, point8, "decorate");
        rebind(instance, multi, "context");
        return instance;
      };
      var ticks2 = function() {
        var scale = d3Scale.scaleIdentity();
        var tickArguments = [10];
        var tickValues = null;
        var ticks3 = function ticks4() {
          var _scale;
          return tickValues != null ? tickValues : scale.ticks ? (_scale = scale).ticks.apply(_scale, _toConsumableArray(tickArguments)) : scale.domain();
        };
        ticks3.scale = function() {
          if (!arguments.length) {
            return scale;
          }
          scale = arguments.length <= 0 ? void 0 : arguments[0];
          return ticks3;
        };
        ticks3.ticks = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          tickArguments = args;
          return ticks3;
        };
        ticks3.tickArguments = function() {
          if (!arguments.length) {
            return tickArguments;
          }
          tickArguments = arguments.length <= 0 ? void 0 : arguments[0];
          return ticks3;
        };
        ticks3.tickValues = function() {
          if (!arguments.length) {
            return tickValues;
          }
          tickValues = arguments.length <= 0 ? void 0 : arguments[0];
          return ticks3;
        };
        return ticks3;
      };
      var identity$3 = function identity9(d2) {
        return d2;
      };
      var gridline = function() {
        var xDecorate = function xDecorate2() {
        };
        var yDecorate = function yDecorate2() {
        };
        var xTicks = ticks2();
        var yTicks = ticks2();
        var xJoin = dataJoin3("line", "gridline-y").key(identity$3);
        var yJoin = dataJoin3("line", "gridline-x").key(identity$3);
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            xJoin.transition(selection3);
            yJoin.transition(selection3);
          }
          selection3.each(function(data, index2, nodes) {
            var element2 = nodes[index2];
            var container = d3Selection.select(nodes[index2]);
            var xScale = xTicks.scale();
            var yScale = yTicks.scale();
            var xScaleOld = element2.__x_scale__ || xScale;
            element2.__x_scale__ = xScale.copy();
            var xData = xTicks();
            var xLines = xJoin(container, xData);
            xLines.enter().attr("x1", xScaleOld).attr("x2", xScaleOld).attr("y1", yScale.range()[0]).attr("y2", yScale.range()[1]).attr("stroke", "#bbb");
            xLines.attr("x1", xScale).attr("x2", xScale).attr("y1", yScale.range()[0]).attr("y2", yScale.range()[1]);
            xLines.exit().attr("x1", xScale).attr("x2", xScale);
            xDecorate(xLines, xData, index2);
            var yScaleOld = element2.__y_scale__ || yScale;
            element2.__y_scale__ = yScale.copy();
            var yData = yTicks();
            var yLines = yJoin(container, yData);
            yLines.enter().attr("y1", yScaleOld).attr("y2", yScaleOld).attr("x1", xScale.range()[0]).attr("x2", xScale.range()[1]).attr("stroke", "#bbb");
            yLines.attr("y1", yScale).attr("y2", yScale).attr("x1", xScale.range()[0]).attr("x2", xScale.range()[1]);
            yLines.exit().attr("y1", yScale).attr("y2", yScale);
            yDecorate(yLines, yData, index2);
          });
        };
        instance.yDecorate = function() {
          if (!arguments.length) {
            return yDecorate;
          }
          yDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xDecorate = function() {
          if (!arguments.length) {
            return xDecorate;
          }
          xDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        rebindAll6(instance, xJoin, includeMap({
          "key": "xKey"
        }));
        rebindAll6(instance, yJoin, includeMap({
          "key": "yKey"
        }));
        rebindAll6(instance, xTicks, prefix2("x"));
        rebindAll6(instance, yTicks, prefix2("y"));
        return instance;
      };
      var gridline$1 = function() {
        var xDecorate = function xDecorate2() {
        };
        var yDecorate = function yDecorate2() {
        };
        var xTicks = ticks2();
        var yTicks = ticks2();
        var lineData = d3Shape.line();
        var instance = function instance2() {
          var context = lineData.context();
          var xScale = xTicks.scale();
          var yScale = yTicks.scale();
          xTicks().forEach(function(xTick, i3) {
            context.save();
            context.beginPath();
            context.strokeStyle = "#bbb";
            context.fillStyle = "transparent";
            xDecorate(context, xTick, i3);
            lineData.context(context)(yScale.domain().map(function(d2) {
              return [xScale(xTick), yScale(d2)];
            }));
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
          yTicks().forEach(function(yTick, i3) {
            context.save();
            context.beginPath();
            context.strokeStyle = "#bbb";
            context.fillStyle = "transparent";
            yDecorate(context, yTick, i3);
            lineData.context(context)(xScale.domain().map(function(d2) {
              return [xScale(d2), yScale(yTick)];
            }));
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        instance.yDecorate = function() {
          if (!arguments.length) {
            return yDecorate;
          }
          yDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xDecorate = function() {
          if (!arguments.length) {
            return xDecorate;
          }
          xDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        rebindAll6(instance, xTicks, prefix2("x"));
        rebindAll6(instance, yTicks, prefix2("y"));
        rebind(instance, lineData, "context");
        return instance;
      };
      var identity$4 = function identity9(d2) {
        return d2;
      };
      var tryApply = function tryApply2(scale, fn2, args, defaultVal) {
        return scale[fn2] ? scale[fn2].apply(scale, args) : defaultVal;
      };
      var ticksArrayForAxis = function ticksArrayForAxis2(axis2) {
        var _axis$tickValues;
        return (_axis$tickValues = axis2.tickValues()) !== null && _axis$tickValues !== void 0 ? _axis$tickValues : tryApply(axis2.scale(), "ticks", axis2.tickArguments(), axis2.scale().domain());
      };
      var tickFormatterForAxis = function tickFormatterForAxis2(axis2) {
        var _axis$tickFormat;
        return (_axis$tickFormat = axis2.tickFormat()) !== null && _axis$tickFormat !== void 0 ? _axis$tickFormat : tryApply(axis2.scale(), "tickFormat", axis2.tickArguments(), identity$4);
      };
      var identity$5 = function identity9(d2) {
        return d2;
      };
      var axisBase = function axisBase2(orient, scale) {
        var custom9 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var tickArguments = [10];
        var tickValues = null;
        var decorate = function decorate2() {
        };
        var tickFormat2 = null;
        var tickSizeOuter = 6;
        var tickSizeInner = 6;
        var tickPadding = 3;
        var svgDomainLine = d3Shape.line();
        var dataJoin$1 = dataJoin3("g", "tick").key(identity$5);
        var domainPathDataJoin = dataJoin3("path", "domain");
        var defaultLabelOffset = function defaultLabelOffset2() {
          return {
            offset: [0, tickSizeInner + tickPadding]
          };
        };
        var defaultTickPath = function defaultTickPath2() {
          return {
            path: [[0, 0], [0, tickSizeInner]]
          };
        };
        var labelOffset = custom9.labelOffset || defaultLabelOffset;
        var tickPath = custom9.tickPath || defaultTickPath;
        var containerTranslate = function containerTranslate2(scale2, trans) {
          var offset = 0;
          if (scale2.bandwidth) {
            offset = scale2.bandwidth() / 2;
            if (scale2.round()) {
              offset = Math.round(offset);
            }
          }
          return function(d2) {
            return trans(scale2(d2) + offset, 0);
          };
        };
        var translate = function translate2(x5, y4) {
          return isVertical() ? "translate(".concat(y4, ", ").concat(x5, ")") : "translate(".concat(x5, ", ").concat(y4, ")");
        };
        var pathTranspose = function pathTranspose2(arr) {
          return isVertical() ? arr.map(function(d2) {
            return [d2[1], d2[0]];
          }) : arr;
        };
        var isVertical = function isVertical2() {
          return orient === "left" || orient === "right";
        };
        var axis2 = function axis3(selection3) {
          if (isTransition(selection3)) {
            dataJoin$1.transition(selection3);
            domainPathDataJoin.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var element2 = group3[index2];
            var container = d3Selection.select(element2);
            if (!element2.__scale__) {
              container.attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === "right" ? "start" : orient === "left" ? "end" : "middle");
            }
            var scaleOld = element2.__scale__ || scale;
            element2.__scale__ = scale.copy();
            var ticksArray = ticksArrayForAxis(axis3);
            var tickFormatter = tickFormatterForAxis(axis3);
            var sign2 = orient === "bottom" || orient === "right" ? 1 : -1;
            var withSign = function withSign2(_ref) {
              var _ref2 = _slicedToArray(_ref, 2), x5 = _ref2[0], y4 = _ref2[1];
              return [x5, sign2 * y4];
            };
            var range2 = scale.range();
            var domainPathData = pathTranspose([[range2[0], sign2 * tickSizeOuter], [range2[0], 0], [range2[1], 0], [range2[1], sign2 * tickSizeOuter]]);
            var domainLine = domainPathDataJoin(container, [data]);
            domainLine.enter().attr("stroke", "#000");
            domainLine.attr("d", svgDomainLine(domainPathData));
            var g2 = dataJoin$1(container, ticksArray);
            var labelOffsets = ticksArray.map(function(d2, i3) {
              return labelOffset(d2, i3, ticksArray);
            });
            var tickPaths = ticksArray.map(function(d2, i3) {
              return tickPath(d2, i3, ticksArray);
            });
            g2.enter().attr("transform", containerTranslate(scaleOld, translate)).append("path").attr("stroke", "#000");
            g2.enter().append("text").attr("transform", function(d2, i3) {
              return translate.apply(void 0, _toConsumableArray(withSign(labelOffsets[i3].offset)));
            }).attr("fill", "#000");
            g2.exit().attr("transform", containerTranslate(scale, translate));
            g2.select("path").attr("visibility", function(d2, i3) {
              return tickPaths[i3].hidden && "hidden";
            }).attr("d", function(d2, i3) {
              return svgDomainLine(pathTranspose(tickPaths[i3].path.map(withSign)));
            });
            g2.select("text").attr("visibility", function(d2, i3) {
              return labelOffsets[i3].hidden && "hidden";
            }).attr("transform", function(d2, i3) {
              return translate.apply(void 0, _toConsumableArray(withSign(labelOffsets[i3].offset)));
            }).attr("dy", function() {
              var offset = "0em";
              if (isVertical()) {
                offset = "0.32em";
              } else if (orient === "bottom") {
                offset = "0.71em";
              }
              return offset;
            }).text(tickFormatter);
            g2.attr("transform", containerTranslate(scale, translate));
            decorate(g2, data, index2);
          });
        };
        axis2.tickFormat = function() {
          if (!arguments.length) {
            return tickFormat2;
          }
          tickFormat2 = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.tickSize = function() {
          if (!arguments.length) {
            return tickSizeInner;
          }
          tickSizeInner = tickSizeOuter = Number(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickSizeInner = function() {
          if (!arguments.length) {
            return tickSizeInner;
          }
          tickSizeInner = Number(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickSizeOuter = function() {
          if (!arguments.length) {
            return tickSizeOuter;
          }
          tickSizeOuter = Number(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickPadding = function() {
          if (!arguments.length) {
            return tickPadding;
          }
          tickPadding = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.scale = function() {
          if (!arguments.length) {
            return scale;
          }
          scale = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.ticks = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          tickArguments = [].concat(args);
          return axis2;
        };
        axis2.tickArguments = function() {
          if (!arguments.length) {
            return tickArguments !== null ? tickArguments.slice() : null;
          }
          tickArguments = (arguments.length <= 0 ? void 0 : arguments[0]) == null ? [] : _toConsumableArray(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickValues = function() {
          if (!arguments.length) {
            return tickValues !== null ? tickValues.slice() : null;
          }
          tickValues = (arguments.length <= 0 ? void 0 : arguments[0]) == null ? [] : _toConsumableArray(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.orient = function() {
          return orient;
        };
        return axis2;
      };
      var axis = function axis2(orient, scale) {
        var tickCenterLabel = false;
        var labelOffset = function labelOffset2(tick, index2, ticksArray) {
          var x5 = 0;
          var y4 = base2.tickSizeInner() + base2.tickPadding();
          var hidden = false;
          if (tickCenterLabel) {
            var thisPosition = scale(tick);
            var nextPosition = index2 < ticksArray.length - 1 ? scale(ticksArray[index2 + 1]) : scale.range()[1];
            x5 = (nextPosition - thisPosition) / 2;
            y4 = base2.tickPadding();
            hidden = index2 === ticksArray.length - 1 && thisPosition === nextPosition;
          }
          return {
            offset: [x5, y4],
            hidden
          };
        };
        var base2 = axisBase(orient, scale, {
          labelOffset
        });
        var axis3 = function axis4(selection3) {
          return base2(selection3);
        };
        axis3.tickCenterLabel = function() {
          if (!arguments.length) {
            return tickCenterLabel;
          }
          tickCenterLabel = arguments.length <= 0 ? void 0 : arguments[0];
          return axis3;
        };
        rebindAll6(axis3, base2);
        return axis3;
      };
      var axisTop3 = function axisTop4(scale) {
        return axis("top", scale);
      };
      var axisBottom3 = function axisBottom4(scale) {
        return axis("bottom", scale);
      };
      var axisLeft3 = function axisLeft4(scale) {
        return axis("left", scale);
      };
      var axisRight4 = function axisRight5(scale) {
        return axis("right", scale);
      };
      var axisOrdinal = function axisOrdinal2(orient, scale) {
        var tickOffset = null;
        var step = function step2(tick, index2, ticksArray) {
          if (scale.step) {
            return scale.step();
          }
          var thisPosition = scale(tick);
          if (index2 < ticksArray.length - 1) {
            return scale(ticksArray[index2 + 1]) / thisPosition;
          } else {
            return (scale.range()[1] - thisPosition) * 2;
          }
        };
        var tickPath = function tickPath2(tick, index2, ticksArray) {
          var x5 = 0;
          if (tickOffset) {
            x5 = tickOffset(tick, index2);
          } else {
            x5 = step(tick, index2, ticksArray) / 2;
          }
          return {
            path: [[x5, 0], [x5, base2.tickSizeInner()]],
            hidden: index2 === ticksArray.length - 1
          };
        };
        var labelOffset = function labelOffset2() {
          return {
            offset: [0, base2.tickPadding()]
          };
        };
        var base2 = axisBase(orient, scale, {
          labelOffset,
          tickPath
        });
        var axis2 = function axis3(selection3) {
          base2(selection3);
        };
        axis2.tickOffset = function() {
          if (!arguments.length) {
            return tickOffset;
          }
          tickOffset = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        rebindAll6(axis2, base2);
        return axis2;
      };
      var axisOrdinalTop2 = function axisOrdinalTop3(scale) {
        return axisOrdinal("top", scale);
      };
      var axisOrdinalBottom2 = function axisOrdinalBottom3(scale) {
        return axisOrdinal("bottom", scale);
      };
      var axisOrdinalLeft2 = function axisOrdinalLeft3(scale) {
        return axisOrdinal("left", scale);
      };
      var axisOrdinalRight2 = function axisOrdinalRight3(scale) {
        return axisOrdinal("right", scale);
      };
      var measureLabels = function(axis2) {
        var measure2 = function measure3(selection3) {
          var ticks3 = ticksArrayForAxis(axis2);
          var tickFormatter = tickFormatterForAxis(axis2);
          var labels = ticks3.map(tickFormatter);
          var tester = selection3.append("text");
          var boundingBoxes = labels.map(function(l) {
            return tester.text(l).node().getBBox();
          });
          var maxHeight = Math.max.apply(Math, _toConsumableArray(boundingBoxes.map(function(b4) {
            return b4.height;
          })));
          var maxWidth = Math.max.apply(Math, _toConsumableArray(boundingBoxes.map(function(b4) {
            return b4.width;
          })));
          tester.remove();
          return {
            maxHeight,
            maxWidth,
            labelCount: labels.length
          };
        };
        return measure2;
      };
      var axisLabelRotate = function(adaptee) {
        var labelRotate = "auto";
        var decorate = function decorate2() {
        };
        var isVertical = function isVertical2() {
          return adaptee.orient() === "left" || adaptee.orient() === "right";
        };
        var sign2 = function sign3() {
          return adaptee.orient() === "top" || adaptee.orient() === "left" ? -1 : 1;
        };
        var labelAnchor = function labelAnchor2() {
          switch (adaptee.orient()) {
            case "top":
            case "right":
              return "start";
            default:
              return "end";
          }
        };
        var calculateRotation = function calculateRotation2(s2) {
          var _measureLabels = measureLabels(adaptee)(s2), maxHeight = _measureLabels.maxHeight, maxWidth = _measureLabels.maxWidth, labelCount = _measureLabels.labelCount;
          var measuredSize = labelCount * maxWidth;
          var rotate;
          if (labelRotate === "auto") {
            var range2 = adaptee.scale().range()[1];
            rotate = range2 < measuredSize ? 90 * Math.min(1, (measuredSize / range2 - 0.8) / 2) : 0;
          } else {
            rotate = labelRotate;
          }
          return {
            rotate: isVertical() ? Math.floor(sign2() * (90 - rotate)) : Math.floor(-rotate),
            maxHeight,
            maxWidth,
            anchor: rotate ? labelAnchor() : "middle"
          };
        };
        var decorateRotation = function decorateRotation2(sel) {
          var _calculateRotation = calculateRotation(sel), rotate = _calculateRotation.rotate, maxHeight = _calculateRotation.maxHeight, anchor = _calculateRotation.anchor;
          var text = sel.select("text");
          var existingTransform = text.attr("transform");
          var offset = sign2() * Math.floor(maxHeight / 2);
          var offsetTransform = isVertical() ? "translate(".concat(offset, ", 0)") : "translate(0, ".concat(offset, ")");
          text.style("text-anchor", anchor).attr("transform", "".concat(existingTransform, " ").concat(offsetTransform, " rotate(").concat(rotate, " 0 0)"));
        };
        var axisLabelRotate2 = function axisLabelRotate3(arg) {
          adaptee(arg);
        };
        adaptee.decorate(function(s2) {
          decorateRotation(s2);
          decorate(s2);
        });
        axisLabelRotate2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelRotate2;
        };
        axisLabelRotate2.labelRotate = function() {
          if (!arguments.length) {
            return labelRotate;
          }
          labelRotate = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelRotate2;
        };
        rebindAll6(axisLabelRotate2, adaptee, exclude2("decorate"));
        return axisLabelRotate2;
      };
      var axisLabelOffset = function(adaptee) {
        var labelOffsetDepth = "auto";
        var decorate = function decorate2() {
        };
        var isVertical = function isVertical2() {
          return adaptee.orient() === "left" || adaptee.orient() === "right";
        };
        var sign2 = function sign3() {
          return adaptee.orient() === "top" || adaptee.orient() === "left" ? -1 : 1;
        };
        var decorateOffset = function decorateOffset2(sel) {
          var _measureLabels = measureLabels(adaptee)(sel), maxHeight = _measureLabels.maxHeight, maxWidth = _measureLabels.maxWidth, labelCount = _measureLabels.labelCount;
          var range2 = adaptee.scale().range()[1];
          var offsetLevels = labelOffsetDepth === "auto" ? Math.floor((isVertical() ? maxHeight : maxWidth) * labelCount / range2) + 1 : labelOffsetDepth;
          var text = sel.select("text");
          var existingTransform = text.attr("transform");
          var transform2 = function transform3(i3) {
            return isVertical() ? "translate(".concat(i3 % offsetLevels * maxWidth * sign2(), ", 0)") : "translate(0, ".concat(i3 % offsetLevels * maxHeight * sign2(), ")");
          };
          text.attr("transform", function(_3, i3) {
            return "".concat(existingTransform, " ").concat(transform2(i3));
          });
        };
        var axisLabelOffset2 = function axisLabelOffset3(arg) {
          return adaptee(arg);
        };
        adaptee.decorate(function(s2) {
          decorateOffset(s2);
          decorate(s2);
        });
        axisLabelOffset2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelOffset2;
        };
        axisLabelOffset2.labelOffsetDepth = function() {
          if (!arguments.length) {
            return labelOffsetDepth;
          }
          labelOffsetDepth = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelOffset2;
        };
        rebindAll6(axisLabelOffset2, adaptee, exclude2("decorate"));
        return axisLabelOffset2;
      };
      var key = "__d3fc-elements__";
      var get4 = function get5(element2) {
        return element2[key] || {};
      };
      var set6 = function set7(element2, data) {
        return void (element2[key] = data);
      };
      var clear = function clear2(element2) {
        return delete element2[key];
      };
      var find2 = function find3(element2) {
        return element2.tagName === "D3FC-GROUP" ? [element2].concat(_toConsumableArray(element2.querySelectorAll("d3fc-canvas, d3fc-group, d3fc-svg"))) : [element2];
      };
      var measure = function measure2(element2) {
        var _data$get = get4(element2), previousWidth = _data$get.width, previousHeight = _data$get.height;
        var pixelRatio = element2.useDevicePixelRatio && window.devicePixelRatio != null ? window.devicePixelRatio : 1;
        var width = element2.clientWidth * pixelRatio;
        var height = element2.clientHeight * pixelRatio;
        var resized = width !== previousWidth || height !== previousHeight;
        var child = element2.children[0];
        set6(element2, {
          pixelRatio,
          width,
          height,
          resized,
          child
        });
      };
      if (typeof CustomEvent !== "function") {
        throw new Error("d3fc-element depends on CustomEvent. Make sure that you load a polyfill in older browsers. See README.");
      }
      var resize = function resize2(element2) {
        var detail = get4(element2);
        var event2 = new CustomEvent("measure", {
          detail
        });
        element2.dispatchEvent(event2);
      };
      var draw = function draw2(element2) {
        var detail = get4(element2);
        var event2 = new CustomEvent("draw", {
          detail
        });
        element2.dispatchEvent(event2);
      };
      var redraw = function(elements) {
        var allElements = elements.map(find2).reduce(function(a4, b4) {
          return a4.concat(b4);
        });
        allElements.forEach(measure);
        allElements.forEach(resize);
        allElements.forEach(draw);
      };
      var getQueue = function getQueue2(element2) {
        return get4(element2.ownerDocument).queue || [];
      };
      var setQueue = function setQueue2(element2, queue) {
        var _data$get = get4(element2.ownerDocument), requestId = _data$get.requestId;
        if (requestId == null) {
          requestId = requestAnimationFrame(function() {
            var queue2 = getQueue(element2);
            redraw(queue2);
            clearQueue(element2);
          });
        }
        set6(element2.ownerDocument, {
          queue,
          requestId
        });
      };
      var clearQueue = function clearQueue2(element2) {
        return clear(element2.ownerDocument);
      };
      var isDescendentOf = function isDescendentOf2(element2, ancestor) {
        var node = element2;
        do {
          if (node.parentNode === ancestor) {
            return true;
          }
        } while (node = node.parentNode);
        return false;
      };
      var _requestRedraw = function(element2) {
        var queue = getQueue(element2);
        var queueContainsElement = queue.indexOf(element2) > -1;
        if (queueContainsElement) {
          return;
        }
        var queueContainsAncestor = queue.some(function(queuedElement) {
          return isDescendentOf(element2, queuedElement);
        });
        if (queueContainsAncestor) {
          return;
        }
        var queueExcludingDescendents = queue.filter(function(queuedElement) {
          return !isDescendentOf(queuedElement, element2);
        });
        queueExcludingDescendents.push(element2);
        setQueue(element2, queueExcludingDescendents);
      };
      if (typeof HTMLElement !== "function") {
        throw new Error("d3fc-element depends on Custom Elements (v1). Make sure that you load a polyfill in older browsers. See README.");
      }
      var addMeasureListener = function addMeasureListener2(element2) {
        if (element2.__measureListener__ != null) {
          return;
        }
        element2.__measureListener__ = function(event2) {
          return element2.setMeasurements(event2.detail);
        };
        element2.addEventListener("measure", element2.__measureListener__);
      };
      var removeMeasureListener = function removeMeasureListener2(element2) {
        if (element2.__measureListener__ == null) {
          return;
        }
        element2.removeEventListener("measure", element2.__measureListener__);
        element2.__measureListener__ = null;
      };
      var element = function(createNode, applyMeasurements) {
        return /* @__PURE__ */ function(_HTMLElement) {
          _inherits(_class, _HTMLElement);
          var _super = _createSuper(_class);
          function _class() {
            _classCallCheck(this, _class);
            return _super.apply(this, arguments);
          }
          _createClass(_class, [{
            key: "attributeChangedCallback",
            value: function attributeChangedCallback(name) {
              switch (name) {
                case "use-device-pixel-ratio":
                  this.requestRedraw();
                  break;
              }
            }
          }, {
            key: "connectedCallback",
            value: function connectedCallback() {
              if (this.childNodes.length === 0) {
                this.appendChild(createNode());
              }
              addMeasureListener(this);
            }
          }, {
            key: "disconnectedCallback",
            value: function disconnectedCallback() {
              removeMeasureListener(this);
            }
          }, {
            key: "setMeasurements",
            value: function setMeasurements(_ref) {
              var width = _ref.width, height = _ref.height;
              var _this$childNodes = _toArray(this.childNodes), node = _this$childNodes[0], other = _this$childNodes.slice(1);
              if (other.length > 0) {
                throw new Error("A d3fc-svg/canvas element must only contain a single svg/canvas element.");
              }
              applyMeasurements(this, node, {
                width,
                height
              });
            }
          }, {
            key: "requestRedraw",
            value: function requestRedraw() {
              _requestRedraw(this);
            }
          }, {
            key: "useDevicePixelRatio",
            get: function get5() {
              return this.hasAttribute("use-device-pixel-ratio") && this.getAttribute("use-device-pixel-ratio") !== "false";
            },
            set: function set7(useDevicePixelRatio) {
              if (useDevicePixelRatio && !this.useDevicePixelRatio) {
                this.setAttribute("use-device-pixel-ratio", "");
              } else if (!useDevicePixelRatio && this.useDevicePixelRatio) {
                this.removeAttribute("use-device-pixel-ratio");
              }
              this.requestRedraw();
            }
          }], [{
            key: "observedAttributes",
            get: function get5() {
              return ["use-device-pixel-ratio"];
            }
          }]);
          return _class;
        }(/* @__PURE__ */ _wrapNativeSuper(HTMLElement));
      };
      var _default = /* @__PURE__ */ function(_element) {
        _inherits(_default2, _element);
        var _super = _createSuper(_default2);
        function _default2() {
          _classCallCheck(this, _default2);
          return _super.apply(this, arguments);
        }
        _createClass(_default2, [{
          key: "setWebglViewport",
          get: function get5() {
            return this.hasAttribute("set-webgl-viewport") && this.getAttribute("set-webgl-viewport") !== "false";
          },
          set: function set7(setWebglViewport) {
            if (setWebglViewport && !this.setWebglViewport) {
              this.setAttribute("set-webgl-viewport", "");
            } else if (!setWebglViewport && this.setWebglViewport) {
              this.removeAttribute("set-webgl-viewport");
            }
            this.requestRedraw();
          }
        }]);
        return _default2;
      }(element(function() {
        return document.createElement("canvas");
      }, function(element2, node, _ref) {
        var width = _ref.width, height = _ref.height;
        node.setAttribute("width", width);
        node.setAttribute("height", height);
        if (element2.setWebglViewport) {
          var context = node.getContext("webgl");
          context.viewport(0, 0, width, height);
        }
      }));
      var updateAutoResize = function updateAutoResize2(element2) {
        if (element2.autoResize) {
          addAutoResizeListener(element2);
        } else {
          removeAutoResizeListener(element2);
        }
      };
      var addAutoResizeListener = function addAutoResizeListener2(element2) {
        if (element2.__autoResizeListener__ != null) {
          return;
        }
        element2.__autoResizeListener__ = function() {
          return _requestRedraw(element2);
        };
        addEventListener("resize", element2.__autoResizeListener__);
      };
      var removeAutoResizeListener = function removeAutoResizeListener2(element2) {
        if (element2.__autoResizeListener__ == null) {
          return;
        }
        removeEventListener("resize", element2.__autoResizeListener__);
        element2.__autoResizeListener__ = null;
      };
      var _default$1 = /* @__PURE__ */ function(_HTMLElement) {
        _inherits(_default2, _HTMLElement);
        var _super = _createSuper(_default2);
        function _default2() {
          _classCallCheck(this, _default2);
          return _super.apply(this, arguments);
        }
        _createClass(_default2, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            updateAutoResize(this);
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            removeAutoResizeListener(this);
          }
        }, {
          key: "requestRedraw",
          value: function requestRedraw() {
            _requestRedraw(this);
          }
        }, {
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(name) {
            switch (name) {
              case "auto-resize":
                updateAutoResize(this);
                break;
            }
          }
        }, {
          key: "autoResize",
          get: function get5() {
            return this.hasAttribute("auto-resize") && this.getAttribute("auto-resize") !== "false";
          },
          set: function set7(autoResize) {
            if (autoResize && !this.autoResize) {
              this.setAttribute("auto-resize", "");
            } else if (!autoResize && this.autoResize) {
              this.removeAttribute("auto-resize");
            }
            updateAutoResize(this);
          }
        }], [{
          key: "observedAttributes",
          get: function get5() {
            return ["auto-resize"];
          }
        }]);
        return _default2;
      }(/* @__PURE__ */ _wrapNativeSuper(HTMLElement));
      var Svg = element(function() {
        return document.createElementNS("http://www.w3.org/2000/svg", "svg");
      }, function(element2, node, _ref) {
        var width = _ref.width, height = _ref.height;
        node.setAttribute("viewBox", "0 0 ".concat(width, " ").concat(height));
      });
      var css = "d3fc-canvas,d3fc-svg{position:relative;display:block}d3fc-canvas>canvas,d3fc-svg>svg{position:absolute;height:100%;width:100%}d3fc-svg>svg{overflow:visible}";
      var styleElement = document.createElement("style");
      styleElement.setAttribute("type", "text/css");
      document.querySelector("head").appendChild(styleElement);
      if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css;
      } else {
        styleElement.textContent += css;
      }
      if ((typeof customElements === "undefined" ? "undefined" : _typeof2(customElements)) !== "object" || typeof customElements.define !== "function") {
        throw new Error("d3fc-element depends on Custom Elements (v1). Make sure that you load a polyfill in older browsers. See README.");
      }
      var alreadyRegistered = [];
      var registerElement = function registerElement2(name, element2) {
        if (customElements.get(name)) {
          alreadyRegistered.push(name);
        } else {
          customElements.define(name, element2);
        }
      };
      registerElement("d3fc-canvas", _default);
      registerElement("d3fc-group", _default$1);
      registerElement("d3fc-svg", Svg);
      if (alreadyRegistered.length > 0) {
        console.warn('The d3fc components "'.concat(alreadyRegistered.join(", "), '" is/are already registered on window. Be aware that this can create compatibility issues if different versions are used.'));
      }
      var pointer2 = function() {
        var pointEvent = d3Dispatch.dispatch("point");
        function mousemove(event2) {
          var point8 = d3Selection.pointer(event2);
          pointEvent.call("point", this, [{
            x: point8[0],
            y: point8[1]
          }]);
        }
        function mouseleave() {
          void pointEvent.call("point", this, []);
        }
        var instance = function instance2(selection3) {
          selection3.on("mouseenter.pointer", mousemove).on("mousemove.pointer", mousemove).on("mouseleave.pointer", mouseleave);
        };
        rebind(instance, pointEvent, "on");
        return instance;
      };
      var group2 = function() {
        var key2 = "";
        var orient = "vertical";
        var value = function value2(row, column) {
          return Number(row[column]);
        };
        var verticalgroup = function verticalgroup2(data) {
          return Object.keys(data[0]).filter(function(k4) {
            return k4 !== key2;
          }).map(function(k4) {
            var values = data.filter(function(row) {
              return row[k4];
            }).map(function(row) {
              var cell = [row[key2], value(row, k4)];
              cell.data = row;
              return cell;
            });
            values.key = k4;
            return values;
          });
        };
        var horizontalgroup = function horizontalgroup2(data) {
          return data.map(function(row) {
            var values = Object.keys(row).filter(function(d2) {
              return d2 !== key2;
            }).map(function(k4) {
              var cell = [k4, value(row, k4)];
              cell.data = row;
              return cell;
            });
            values.key = row[key2];
            return values;
          });
        };
        var group3 = function group4(data) {
          return orient === "vertical" ? verticalgroup(data) : horizontalgroup(data);
        };
        group3.key = function() {
          if (!arguments.length) {
            return key2;
          }
          key2 = arguments.length <= 0 ? void 0 : arguments[0];
          return group3;
        };
        group3.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return group3;
        };
        group3.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return group3;
        };
        return group3;
      };
      var store = function() {
        var data = {};
        var store2 = function store3(target) {
          for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
            var key2 = _Object$keys[_i];
            target[key2].apply(null, data[key2]);
          }
          return target;
        };
        for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
          names[_key] = arguments[_key];
        }
        var _loop = function _loop2() {
          var name = _names[_i2];
          store2[name] = function() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            if (!args.length) {
              return data[name];
            }
            data[name] = args;
            return store2;
          };
        };
        for (var _i2 = 0, _names = names; _i2 < _names.length; _i2++) {
          _loop();
        }
        return store2;
      };
      var css$1 = "d3fc-group.cartesian-chart{width:100%;height:100%;overflow:hidden;display:grid;display:-ms-grid;grid-template-columns:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);-ms-grid-columns:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);grid-template-rows:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);-ms-grid-rows:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);}\nd3fc-group.cartesian-chart>.top-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:3;-ms-grid-column:3;grid-row:1;-ms-grid-row:1;}\nd3fc-group.cartesian-chart>.top-axis{height:2em;grid-column:3;-ms-grid-column:3;grid-row:2;-ms-grid-row:2;}\nd3fc-group.cartesian-chart>.left-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:1;-ms-grid-column:1;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.left-axis{width:3em;grid-column:2;-ms-grid-column:2;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.plot-area{overflow:hidden;grid-column:3;-ms-grid-column:3;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.right-axis{width:3em;grid-column:4;-ms-grid-column:4;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.right-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:5;-ms-grid-column:5;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.bottom-axis{height:2em;grid-column:3;-ms-grid-column:3;grid-row:4;-ms-grid-row:4;}\nd3fc-group.cartesian-chart>.bottom-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:3;-ms-grid-column:3;grid-row:5;-ms-grid-row:5;}\nd3fc-group.cartesian-chart>.y-label{display:flex;transform:rotate(-90deg);width:1em;white-space:nowrap;justify-content:center;}";
      var styleElement$1 = document.createElement("style");
      styleElement$1.setAttribute("type", "text/css");
      document.querySelector("head").appendChild(styleElement$1);
      if (styleElement$1.styleSheet) {
        styleElement$1.styleSheet.cssText += css$1;
      } else {
        styleElement$1.textContent += css$1;
      }
      var functor$5 = function functor2(v2) {
        return typeof v2 === "function" ? v2 : function() {
          return v2;
        };
      };
      var cartesianChart = function() {
        var _getArguments = getArguments.apply(void 0, arguments), xScale = _getArguments.xScale, yScale = _getArguments.yScale, xAxis = _getArguments.xAxis, yAxis = _getArguments.yAxis;
        var chartLabel = functor$5("");
        var xLabel = functor$5("");
        var yLabel = functor$5("");
        var xAxisHeight = functor$5(null);
        var yAxisWidth = functor$5(null);
        var yOrient = functor$5("right");
        var xOrient = functor$5("bottom");
        var webglPlotArea = null;
        var canvasPlotArea = null;
        var svgPlotArea = null;
        var isContextLost = false;
        var useDevicePixelRatio = true;
        var xAxisStore = store("tickFormat", "ticks", "tickArguments", "tickSize", "tickSizeInner", "tickSizeOuter", "tickValues", "tickPadding", "tickCenterLabel");
        var xDecorate = function xDecorate2() {
        };
        var yAxisStore = store("tickFormat", "ticks", "tickArguments", "tickSize", "tickSizeInner", "tickSizeOuter", "tickValues", "tickPadding", "tickCenterLabel");
        var yDecorate = function yDecorate2() {
        };
        var decorate = function decorate2() {
        };
        var containerDataJoin = dataJoin3("d3fc-group", "cartesian-chart");
        var webglDataJoin = dataJoin3("d3fc-canvas", "webgl-plot-area");
        var canvasDataJoin = dataJoin3("d3fc-canvas", "canvas-plot-area");
        var svgDataJoin = dataJoin3("d3fc-svg", "svg-plot-area");
        var xAxisDataJoin = dataJoin3("d3fc-svg", "x-axis").key(function(d2) {
          return d2;
        });
        var yAxisDataJoin = dataJoin3("d3fc-svg", "y-axis").key(function(d2) {
          return d2;
        });
        var chartLabelDataJoin = dataJoin3("div", "chart-label");
        var xLabelDataJoin = dataJoin3("div", "x-label").key(function(d2) {
          return d2;
        });
        var yLabelDataJoin = dataJoin3("div", "y-label").key(function(d2) {
          return d2;
        });
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var cartesian2 = function cartesian3(selection3) {
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var container = containerDataJoin(d3Selection.select(group3[index2]), [data]);
            container.enter().attr("auto-resize", "");
            chartLabelDataJoin(container, [xOrient(data)]).attr("class", function(d2) {
              return d2 === "top" ? "chart-label bottom-label" : "chart-label top-label";
            }).style("margin-bottom", function(d2) {
              return d2 === "top" ? 0 : "1em";
            }).style("margin-top", function(d2) {
              return d2 === "top" ? "1em" : 0;
            }).text(chartLabel(data));
            xLabelDataJoin(container, [xOrient(data)]).attr("class", function(d2) {
              return "x-label ".concat(d2, "-label");
            }).text(xLabel(data));
            yLabelDataJoin(container, [yOrient(data)]).attr("class", function(d2) {
              return "y-label ".concat(d2, "-label");
            }).text(yLabel(data));
            webglDataJoin(container, webglPlotArea ? [data] : []).attr("set-webgl-viewport", "").classed("plot-area", true).attr("use-device-pixel-ratio", useDevicePixelRatio).on("draw", function(event2, d2) {
              var _event$detail = event2.detail, child = _event$detail.child, pixelRatio = _event$detail.pixelRatio;
              webglPlotArea.context(isContextLost ? null : child.getContext("webgl")).pixelRatio(pixelRatio).xScale(xScale).yScale(yScale);
              webglPlotArea(d2);
            });
            container.select(".webgl-plot-area>canvas").on("webglcontextlost", function(event2) {
              console.warn("WebGLRenderingContext lost");
              event2.preventDefault();
              isContextLost = true;
              container.node().requestRedraw();
            }).on("webglcontextrestored", function() {
              console.info("WebGLRenderingContext restored");
              isContextLost = false;
              container.node().requestRedraw();
            });
            canvasDataJoin(container, canvasPlotArea ? [data] : []).classed("plot-area", true).attr("use-device-pixel-ratio", useDevicePixelRatio).on("draw", function(event2, d2) {
              var _event$detail2 = event2.detail, child = _event$detail2.child, pixelRatio = _event$detail2.pixelRatio;
              var context = child.getContext("2d");
              context.save();
              if (useDevicePixelRatio) {
                context.scale(pixelRatio, pixelRatio);
              }
              canvasPlotArea.context(context).xScale(xScale).yScale(yScale);
              canvasPlotArea(d2);
              context.restore();
            });
            svgDataJoin(container, svgPlotArea ? [data] : []).classed("plot-area", true).on("draw", function(event2, d2) {
              var child = event2.detail.child;
              svgPlotArea.xScale(xScale).yScale(yScale);
              transitionPropagator(d3Selection.select(child).datum(d2)).call(svgPlotArea);
            });
            xAxisDataJoin(container, [xOrient(data)]).attr("class", function(d2) {
              return "x-axis ".concat(d2, "-axis");
            }).style("height", xAxisHeight(data)).on("measure", function(event2, d2) {
              var _event$detail3 = event2.detail, width = _event$detail3.width, height = _event$detail3.height, child = _event$detail3.child;
              if (d2 === "top") {
                d3Selection.select(child).attr("viewBox", "0 ".concat(-height, " ").concat(width, " ").concat(height));
              }
              xScale.range([0, width]);
            }).on("draw", function(event2, d2) {
              var child = event2.detail.child;
              var xAxisComponent = d2 === "top" ? xAxis.top(xScale) : xAxis.bottom(xScale);
              xAxisComponent.decorate(xDecorate);
              transitionPropagator(d3Selection.select(child).datum(d2)).call(xAxisStore(xAxisComponent));
            });
            yAxisDataJoin(container, [yOrient(data)]).attr("class", function(d2) {
              return "y-axis ".concat(d2, "-axis");
            }).style("width", yAxisWidth(data)).on("measure", function(event2, d2) {
              var _event$detail4 = event2.detail, width = _event$detail4.width, height = _event$detail4.height, child = _event$detail4.child;
              if (d2 === "left") {
                d3Selection.select(child).attr("viewBox", "".concat(-width, " 0 ").concat(width, " ").concat(height));
              }
              yScale.range([height, 0]);
            }).on("draw", function(event2, d2) {
              var child = event2.detail.child;
              var yAxisComponent = d2 === "left" ? yAxis.left(yScale) : yAxis.right(yScale);
              yAxisComponent.decorate(yDecorate);
              transitionPropagator(d3Selection.select(child).datum(d2)).call(yAxisStore(yAxisComponent));
            });
            container.each(function(d2, i3, nodes) {
              return nodes[i3].requestRedraw();
            });
            decorate(container, data, index2);
          });
        };
        var scaleExclusions = exclude2(
          /range\w*/,
          /tickFormat/
        );
        rebindAll6(cartesian2, xScale, scaleExclusions, prefix2("x"));
        rebindAll6(cartesian2, yScale, scaleExclusions, prefix2("y"));
        rebindAll6(cartesian2, xAxisStore, prefix2("x"));
        rebindAll6(cartesian2, yAxisStore, prefix2("y"));
        cartesian2.xOrient = function() {
          if (!arguments.length) {
            return xOrient;
          }
          xOrient = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.yOrient = function() {
          if (!arguments.length) {
            return yOrient;
          }
          yOrient = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.xDecorate = function() {
          if (!arguments.length) {
            return xDecorate;
          }
          xDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.yDecorate = function() {
          if (!arguments.length) {
            return yDecorate;
          }
          yDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.chartLabel = function() {
          if (!arguments.length) {
            return chartLabel;
          }
          chartLabel = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.xLabel = function() {
          if (!arguments.length) {
            return xLabel;
          }
          xLabel = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.yLabel = function() {
          if (!arguments.length) {
            return yLabel;
          }
          yLabel = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.xAxisHeight = function() {
          if (!arguments.length) {
            return xAxisHeight;
          }
          xAxisHeight = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.yAxisWidth = function() {
          if (!arguments.length) {
            return yAxisWidth;
          }
          yAxisWidth = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.webglPlotArea = function() {
          if (!arguments.length) {
            return webglPlotArea;
          }
          webglPlotArea = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.canvasPlotArea = function() {
          if (!arguments.length) {
            return canvasPlotArea;
          }
          canvasPlotArea = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.svgPlotArea = function() {
          if (!arguments.length) {
            return svgPlotArea;
          }
          svgPlotArea = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.useDevicePixelRatio = function() {
          if (!arguments.length) {
            return useDevicePixelRatio;
          }
          useDevicePixelRatio = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        return cartesian2;
      };
      var getArguments = function getArguments2() {
        var defaultSettings = {
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity(),
          xAxis: {
            bottom: axisBottom3,
            top: axisTop3
          },
          yAxis: {
            right: axisRight4,
            left: axisLeft3
          }
        };
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (args.length === 1 && !args[0].domain && !args[0].range) {
          return Object.assign(defaultSettings, args[0]);
        }
        return Object.assign(defaultSettings, {
          xScale: args[0] || defaultSettings.xScale,
          yScale: args[1] || defaultSettings.yScale
        });
      };
      var functor$6 = function functor2(v2) {
        return typeof v2 === "function" ? v2 : function() {
          return v2;
        };
      };
      var cartesianBase = function(setPlotArea, defaultPlotArea) {
        return function() {
          var yLabel = functor$6("");
          var plotArea = defaultPlotArea;
          var decorate = function decorate2() {
          };
          var cartesian2 = cartesianChart.apply(void 0, arguments);
          var cartesianBase2 = function cartesianBase3(selection3) {
            setPlotArea(cartesian2, plotArea);
            cartesian2.decorate(function(container, data, index2) {
              container.enter().select(".x-label").style("height", "1em").style("line-height", "1em");
              var yOrientValue = cartesian2.yOrient()(data);
              container.enter().append("div").attr("class", "y-label-container").style("grid-column", yOrientValue === "left" ? 1 : 5).style("-ms-grid-column", yOrientValue === "left" ? 1 : 5).style("grid-row", 3).style("-ms-grid-row", 3).style("width", "1em").style("display", "flex").style("align-items", "center").style("justify-content", "center").style("white-space", "nowrap").append("div").attr("class", "y-label").style("transform", "rotate(-90deg)");
              container.select(".y-label-container>.y-label").text(yLabel);
              decorate(container, data, index2);
            });
            selection3.call(cartesian2);
          };
          rebindAll6(cartesianBase2, cartesian2, include(/^x/, /^y/, "chartLabel"));
          cartesianBase2.yLabel = function() {
            if (!arguments.length) {
              return yLabel;
            }
            yLabel = functor$6(arguments.length <= 0 ? void 0 : arguments[0]);
            return cartesianBase2;
          };
          cartesianBase2.plotArea = function() {
            if (!arguments.length) {
              return plotArea;
            }
            plotArea = arguments.length <= 0 ? void 0 : arguments[0];
            return cartesianBase2;
          };
          cartesianBase2.decorate = function() {
            if (!arguments.length) {
              return decorate;
            }
            decorate = arguments.length <= 0 ? void 0 : arguments[0];
            return cartesianBase2;
          };
          return cartesianBase2;
        };
      };
      var cartesian = cartesianBase(function(cartesian2, plotArea) {
        return cartesian2.svgPlotArea(plotArea);
      }, seriesSvgLine2);
      var cartesian$1 = cartesianBase(function(cartesian2, plotArea) {
        return cartesian2.canvasPlotArea(plotArea);
      }, seriesCanvasLine2);
      var brushForOrient = function brushForOrient2(orient) {
        switch (orient) {
          case "x":
            return d3Brush.brushX();
          case "y":
            return d3Brush.brushY();
          case "xy":
            return d3Brush.brush();
        }
      };
      var invertRange = function invertRange2(range2) {
        return [range2[1], range2[0]];
      };
      var brushBase = function brushBase2(orient) {
        var brush3 = brushForOrient(orient);
        var eventDispatch = d3Dispatch.dispatch("brush", "start", "end");
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var innerJoin = dataJoin3("g", "brush");
        var mapSelection = function mapSelection2(selection3, xMapping, yMapping) {
          switch (orient) {
            case "x":
              return selection3.map(xMapping);
            case "y":
              return selection3.map(yMapping);
            case "xy":
              return [[xMapping(selection3[0][0]), yMapping(selection3[0][1])], [xMapping(selection3[1][0]), yMapping(selection3[1][1])]];
          }
        };
        var percentToSelection = function percentToSelection2(percent) {
          return mapSelection(percent, d3Scale.scaleLinear().domain(xScale.range()).invert, d3Scale.scaleLinear().domain(invertRange(yScale.range())).invert);
        };
        var selectionToPercent = function selectionToPercent2(selection3) {
          return mapSelection(selection3, d3Scale.scaleLinear().domain(xScale.range()), d3Scale.scaleLinear().domain(invertRange(yScale.range())));
        };
        var updateXDomain = function updateXDomain2(selection3) {
          var f3 = d3Scale.scaleLinear().domain(xScale.domain());
          if (orient === "x") {
            return selection3.map(f3.invert);
          } else if (orient === "xy") {
            return [f3.invert(selection3[0][0]), f3.invert(selection3[1][0])];
          }
        };
        var updateYDomain = function updateYDomain2(selection3) {
          var g2 = d3Scale.scaleLinear().domain(invertRange(yScale.domain()));
          if (orient === "y") {
            return [selection3[1], selection3[0]].map(g2.invert);
          } else if (orient === "xy") {
            return [g2.invert(selection3[1][1]), g2.invert(selection3[0][1])];
          }
        };
        var transformEvent = function transformEvent2(event2) {
          if (event2.sourceEvent && event2.sourceEvent.type === "draw")
            return;
          if (event2.selection) {
            var mappedSelection = selectionToPercent(event2.selection);
            eventDispatch.call(event2.type, {}, {
              selection: mappedSelection,
              xDomain: updateXDomain(mappedSelection),
              yDomain: updateYDomain(mappedSelection)
            });
          } else {
            eventDispatch.call(event2.type, {}, {});
          }
        };
        var base2 = function base3(selection3) {
          selection3.each(function(data, index2, group3) {
            brush3.extent([[xScale.range()[0], yScale.range()[1]], [xScale.range()[1], yScale.range()[0]]]);
            brush3.on("end", function(event2) {
              return transformEvent(event2);
            }).on("brush", function(event2) {
              return transformEvent(event2);
            }).on("start", function(event2) {
              return transformEvent(event2);
            });
            var container = innerJoin(d3Selection.select(group3[index2]), [data]);
            container.call(brush3).call(brush3.move, data ? percentToSelection(data) : null);
          });
        };
        base2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        rebind(base2, eventDispatch, "on");
        rebind(base2, brush3, "filter", "handleSize");
        return base2;
      };
      var brushX2 = function brushX3() {
        return brushBase("x");
      };
      var brushY2 = function brushY3() {
        return brushBase("y");
      };
      var brush2 = function brush3() {
        return brushBase("xy");
      };
      var domainsEqual = function domainsEqual2(a4, b4) {
        if (a4 == null && b4 == null) {
          return true;
        }
        var aDomain = a4.domain();
        var bDomain = b4.domain();
        return aDomain.length === bDomain.length && aDomain.every(function(d2, i3) {
          var _bDomain$i;
          return (d2 === null || d2 === void 0 ? void 0 : d2.valueOf()) === ((_bDomain$i = bDomain[i3]) === null || _bDomain$i === void 0 ? void 0 : _bDomain$i.valueOf());
        });
      };
      var subtract = function subtract2(a4, b4) {
        return d3Zoom.zoomIdentity.scale(a4.k / b4.k).translate(a4.x - b4.x, a4.y - b4.y);
      };
      var symbol2 = Symbol("d3fc-domain-zoom");
      var zoom = function() {
        var dispatcher = d3Dispatch.dispatch("zoom");
        var zoomer = d3Zoom.zoom().on("zoom", function(_ref) {
          var transform2 = _ref.transform;
          var node = this;
          var updatedTransform = transform2;
          var _node$symbol = node[symbol2], originalXScale = _node$symbol.originalXScale, previousXScale = _node$symbol.previousXScale, xScale = _node$symbol.xScale, originalYScale = _node$symbol.originalYScale, previousYScale = _node$symbol.previousYScale, yScale = _node$symbol.yScale, previousTransform = _node$symbol.previousTransform;
          if (!domainsEqual(previousXScale, xScale) || !domainsEqual(previousYScale, yScale)) {
            originalXScale = xScale === null || xScale === void 0 ? void 0 : xScale.copy();
            originalYScale = yScale === null || yScale === void 0 ? void 0 : yScale.copy();
            updatedTransform = subtract(transform2, previousTransform);
          }
          if (xScale != null) {
            previousXScale = updatedTransform.rescaleX(originalXScale.range(xScale.range()));
            xScale.domain(previousXScale.domain());
          }
          if (yScale != null) {
            previousYScale = updatedTransform.rescaleY(originalYScale.range(yScale.range()));
            yScale.domain(previousYScale.domain());
          }
          previousTransform = updatedTransform;
          node[symbol2] = {
            originalXScale,
            previousXScale,
            xScale,
            originalYScale,
            previousYScale,
            yScale,
            previousTransform
          };
          if (updatedTransform !== transform2) {
            zoomer.transform(d3Selection.select(node), updatedTransform);
          }
          dispatcher.call("zoom");
        });
        var instance = function instance2(selection3) {
          var xScale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          var yScale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (xScale == null && yScale == null) {
            console.warn("Without an xScale and/or yScale specified, this component won't do anything. Perhaps you forgot to specify them e.g. selection.call(zoom, x, y)?");
          }
          selection3.each(function(d2, i3, nodes) {
            var existingContext = nodes[i3][symbol2];
            if (existingContext != null && existingContext.xScale === xScale && existingContext.yScale === yScale) {
              console.warn("This component should only be called on a selection once. Perhaps you're missing an .enter()?");
            }
            var xScaleCopy = xScale === null || xScale === void 0 ? void 0 : xScale.copy();
            var yScaleCopy = yScale === null || yScale === void 0 ? void 0 : yScale.copy();
            nodes[i3][symbol2] = {
              originalXScale: xScaleCopy,
              previousXScale: xScaleCopy,
              xScale,
              originalYScale: yScaleCopy,
              previousYScale: yScaleCopy,
              yScale,
              previousTransform: d3Zoom.zoomIdentity
            };
          }).call(zoomer);
        };
        rebind(instance, dispatcher, "on");
        rebind(instance, zoomer, "extent", "filter", "wheelDelta", "touchable", "clickDistance", "tapDistance", "duration", "interpolate");
        return instance;
      };
      exports2.annotationCanvasBand = band$1;
      exports2.annotationCanvasCrosshair = crosshair$1;
      exports2.annotationCanvasGridline = gridline$1;
      exports2.annotationCanvasLine = annotationLine$1;
      exports2.annotationSvgBand = band3;
      exports2.annotationSvgCrosshair = crosshair;
      exports2.annotationSvgGridline = gridline;
      exports2.annotationSvgLine = annotationLine;
      exports2.autoBandwidth = autoBandwidth4;
      exports2.axisBottom = axisBottom3;
      exports2.axisLabelOffset = axisLabelOffset;
      exports2.axisLabelRotate = axisLabelRotate;
      exports2.axisLeft = axisLeft3;
      exports2.axisOrdinalBottom = axisOrdinalBottom2;
      exports2.axisOrdinalLeft = axisOrdinalLeft2;
      exports2.axisOrdinalRight = axisOrdinalRight2;
      exports2.axisOrdinalTop = axisOrdinalTop2;
      exports2.axisRight = axisRight4;
      exports2.axisTop = axisTop3;
      exports2.brush = brush2;
      exports2.brushX = brushX2;
      exports2.brushY = brushY2;
      exports2.bucket = bucket;
      exports2.chartCanvasCartesian = cartesian$1;
      exports2.chartCartesian = cartesianChart;
      exports2.chartSvgCartesian = cartesian;
      exports2.dataJoin = dataJoin3;
      exports2.discontinuityIdentity = identity$1;
      exports2.discontinuityRange = provider;
      exports2.discontinuitySkipUtcWeekends = skipUtcWeekends;
      exports2.discontinuitySkipUtcWeeklyPattern = skipUtcWeeklyPattern;
      exports2.discontinuitySkipWeekends = skipWeekends;
      exports2.discontinuitySkipWeeklyPattern = skipWeeklyPattern;
      exports2.effectivelyZero = effectivelyZero;
      exports2.exclude = exclude2;
      exports2.extentDate = time2;
      exports2.extentLinear = linearExtent;
      exports2.extentTime = time2;
      exports2.feedGdax = gdax;
      exports2.group = group2;
      exports2.include = include;
      exports2.includeMap = includeMap;
      exports2.indicatorBollingerBands = bollingerBands;
      exports2.indicatorElderRay = elderRay;
      exports2.indicatorEnvelope = envelope;
      exports2.indicatorExponentialMovingAverage = exponentialMovingAverage;
      exports2.indicatorForceIndex = forceIndex;
      exports2.indicatorMacd = macd;
      exports2.indicatorMovingAverage = movingAverage;
      exports2.indicatorRelativeStrengthIndex = relativeStrengthIndex;
      exports2.indicatorStochasticOscillator = stochasticOscillator;
      exports2.isTransition = isTransition;
      exports2.largestTriangleOneBucket = largestTriangleOneBucket;
      exports2.largestTriangleThreeBucket = largestTriangleThreeBucket;
      exports2.layoutAnnealing = annealing;
      exports2.layoutBoundingBox = boundingBox;
      exports2.layoutGreedy = greedy;
      exports2.layoutLabel = label;
      exports2.layoutRemoveOverlaps = removeOverlaps;
      exports2.layoutTextLabel = textLabel;
      exports2.modeMedian = modeMedian;
      exports2.pointer = pointer2;
      exports2.prefix = prefix2;
      exports2.randomFinancial = financial;
      exports2.randomGeometricBrownianMotion = geometricBrownianMotion;
      exports2.randomSkipWeekends = skipWeekends$1;
      exports2.rebind = rebind;
      exports2.rebindAll = rebindAll6;
      exports2.scaleDiscontinuous = discontinuous;
      exports2.seriesCanvasArea = area$3;
      exports2.seriesCanvasBar = bar$3;
      exports2.seriesCanvasBoxPlot = boxPlot$3;
      exports2.seriesCanvasCandlestick = candlestick$3;
      exports2.seriesCanvasErrorBar = errorBar$3;
      exports2.seriesCanvasGrouped = grouped$1;
      exports2.seriesCanvasHeatmap = heatmap$1;
      exports2.seriesCanvasLine = seriesCanvasLine2;
      exports2.seriesCanvasMulti = seriesCanvasMulti5;
      exports2.seriesCanvasOhlc = ohlc$3;
      exports2.seriesCanvasPoint = seriesCanvasPoint;
      exports2.seriesCanvasRepeat = repeat$1;
      exports2.seriesSvgArea = area$2;
      exports2.seriesSvgBar = bar$2;
      exports2.seriesSvgBoxPlot = boxPlot$2;
      exports2.seriesSvgCandlestick = candlestick$2;
      exports2.seriesSvgErrorBar = errorBar$2;
      exports2.seriesSvgGrouped = grouped;
      exports2.seriesSvgHeatmap = heatmap;
      exports2.seriesSvgLine = seriesSvgLine2;
      exports2.seriesSvgMulti = seriesSvgMulti6;
      exports2.seriesSvgOhlc = ohlc$2;
      exports2.seriesSvgPoint = seriesSvgPoint3;
      exports2.seriesSvgRepeat = repeat;
      exports2.seriesWebglArea = area$4;
      exports2.seriesWebglBar = bar$4;
      exports2.seriesWebglBoxPlot = boxPlot$4;
      exports2.seriesWebglCandlestick = candlestick$4;
      exports2.seriesWebglErrorBar = errorBar$4;
      exports2.seriesWebglLine = line;
      exports2.seriesWebglMulti = multiSeries;
      exports2.seriesWebglOhlc = ohlc$4;
      exports2.seriesWebglPoint = point7;
      exports2.seriesWebglRepeat = repeat$2;
      exports2.shapeBar = shapeBar;
      exports2.shapeBoxPlot = shapeBoxPlot;
      exports2.shapeCandlestick = shapeCandlestick;
      exports2.shapeErrorBar = shapeErrorBar;
      exports2.shapeOhlc = shapeOhlc;
      exports2.webglAdjacentAttribute = webglAdjacentAttribute;
      exports2.webglAttribute = webglAttribute;
      exports2.webglBaseAttribute = baseAttributeBuilder;
      exports2.webglBufferBuilder = bufferBuilder;
      exports2.webglElementIndices = elementIndices;
      exports2.webglFillColor = fillColor$2;
      exports2.webglProgramBuilder = programBuilder;
      exports2.webglScaleLinear = linear5;
      exports2.webglScaleLog = log3;
      exports2.webglScaleMapper = webglScaleMapper;
      exports2.webglScalePow = pow3;
      exports2.webglSeriesArea = webglSeriesArea;
      exports2.webglSeriesBar = webglSeriesBar;
      exports2.webglSeriesBoxPlot = webglSeriesBoxPlot;
      exports2.webglSeriesCandlestick = webglSeriesCandlestick;
      exports2.webglSeriesErrorBar = webglSeriesErrorBar;
      exports2.webglSeriesLine = webglSeriesLine;
      exports2.webglSeriesOhlc = webglSeriesOhlc;
      exports2.webglSeriesPoint = webglSeriesPoint;
      exports2.webglShaderBuilder = shaderBuilder;
      exports2.webglStrokeColor = strokeColor$2;
      exports2.webglSymbolMapper = webglSymbolMapper;
      exports2.webglTypes = types;
      exports2.webglUniform = uniform;
      exports2.zoom = zoom;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/gradient-parser/build/node.js
var require_node = __commonJS({
  "node_modules/gradient-parser/build/node.js"(exports) {
    var GradientParser = GradientParser || {};
    GradientParser.stringify = function() {
      var visitor = {
        "visit_linear-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_repeating-linear-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_radial-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_repeating-radial-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_gradient": function(node) {
          var orientation = visitor.visit(node.orientation);
          if (orientation) {
            orientation += ", ";
          }
          return node.type + "(" + orientation + visitor.visit(node.colorStops) + ")";
        },
        "visit_shape": function(node) {
          var result = node.value, at3 = visitor.visit(node.at), style = visitor.visit(node.style);
          if (style) {
            result += " " + style;
          }
          if (at3) {
            result += " at " + at3;
          }
          return result;
        },
        "visit_default-radial": function(node) {
          var result = "", at3 = visitor.visit(node.at);
          if (at3) {
            result += at3;
          }
          return result;
        },
        "visit_extent-keyword": function(node) {
          var result = node.value, at3 = visitor.visit(node.at);
          if (at3) {
            result += " at " + at3;
          }
          return result;
        },
        "visit_position-keyword": function(node) {
          return node.value;
        },
        "visit_position": function(node) {
          return visitor.visit(node.value.x) + " " + visitor.visit(node.value.y);
        },
        "visit_%": function(node) {
          return node.value + "%";
        },
        "visit_em": function(node) {
          return node.value + "em";
        },
        "visit_px": function(node) {
          return node.value + "px";
        },
        "visit_literal": function(node) {
          return visitor.visit_color(node.value, node);
        },
        "visit_hex": function(node) {
          return visitor.visit_color("#" + node.value, node);
        },
        "visit_rgb": function(node) {
          return visitor.visit_color("rgb(" + node.value.join(", ") + ")", node);
        },
        "visit_rgba": function(node) {
          return visitor.visit_color("rgba(" + node.value.join(", ") + ")", node);
        },
        "visit_color": function(resultColor, node) {
          var result = resultColor, length3 = visitor.visit(node.length);
          if (length3) {
            result += " " + length3;
          }
          return result;
        },
        "visit_angular": function(node) {
          return node.value + "deg";
        },
        "visit_directional": function(node) {
          return "to " + node.value;
        },
        "visit_array": function(elements) {
          var result = "", size = elements.length;
          elements.forEach(function(element, i3) {
            result += visitor.visit(element);
            if (i3 < size - 1) {
              result += ", ";
            }
          });
          return result;
        },
        "visit": function(element) {
          if (!element) {
            return "";
          }
          var result = "";
          if (element instanceof Array) {
            return visitor.visit_array(element, result);
          } else if (element.type) {
            var nodeVisitor = visitor["visit_" + element.type];
            if (nodeVisitor) {
              return nodeVisitor(element);
            } else {
              throw Error("Missing visitor visit_" + element.type);
            }
          } else {
            throw Error("Invalid node.");
          }
        }
      };
      return function(root3) {
        return visitor.visit(root3);
      };
    }();
    var GradientParser = GradientParser || {};
    GradientParser.parse = function() {
      var tokens = {
        linearGradient: /^(\-(webkit|o|ms|moz)\-)?(linear\-gradient)/i,
        repeatingLinearGradient: /^(\-(webkit|o|ms|moz)\-)?(repeating\-linear\-gradient)/i,
        radialGradient: /^(\-(webkit|o|ms|moz)\-)?(radial\-gradient)/i,
        repeatingRadialGradient: /^(\-(webkit|o|ms|moz)\-)?(repeating\-radial\-gradient)/i,
        sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|left|right|top|bottom)/i,
        extentKeywords: /^(closest\-side|closest\-corner|farthest\-side|farthest\-corner|contain|cover)/,
        positionKeywords: /^(left|center|right|top|bottom)/i,
        pixelValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))px/,
        percentageValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))\%/,
        emValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))em/,
        angleValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))deg/,
        startCall: /^\(/,
        endCall: /^\)/,
        comma: /^,/,
        hexColor: /^\#([0-9a-fA-F]+)/,
        literalColor: /^([a-zA-Z]+)/,
        rgbColor: /^rgb/i,
        rgbaColor: /^rgba/i,
        number: /^(([0-9]*\.[0-9]+)|([0-9]+\.?))/
      };
      var input = "";
      function error(msg) {
        var err2 = new Error(input + ": " + msg);
        err2.source = input;
        throw err2;
      }
      function getAST() {
        var ast = matchListDefinitions();
        if (input.length > 0) {
          error("Invalid input not EOF");
        }
        return ast;
      }
      function matchListDefinitions() {
        return matchListing(matchDefinition);
      }
      function matchDefinition() {
        return matchGradient(
          "linear-gradient",
          tokens.linearGradient,
          matchLinearOrientation
        ) || matchGradient(
          "repeating-linear-gradient",
          tokens.repeatingLinearGradient,
          matchLinearOrientation
        ) || matchGradient(
          "radial-gradient",
          tokens.radialGradient,
          matchListRadialOrientations
        ) || matchGradient(
          "repeating-radial-gradient",
          tokens.repeatingRadialGradient,
          matchListRadialOrientations
        );
      }
      function matchGradient(gradientType, pattern, orientationMatcher) {
        return matchCall(pattern, function(captures) {
          var orientation = orientationMatcher();
          if (orientation) {
            if (!scan2(tokens.comma)) {
              error("Missing comma before color stops");
            }
          }
          return {
            type: gradientType,
            orientation,
            colorStops: matchListing(matchColorStop)
          };
        });
      }
      function matchCall(pattern, callback) {
        var captures = scan2(pattern);
        if (captures) {
          if (!scan2(tokens.startCall)) {
            error("Missing (");
          }
          var result = callback(captures);
          if (!scan2(tokens.endCall)) {
            error("Missing )");
          }
          return result;
        }
      }
      function matchLinearOrientation() {
        return matchSideOrCorner() || matchAngle();
      }
      function matchSideOrCorner() {
        return match("directional", tokens.sideOrCorner, 1);
      }
      function matchAngle() {
        return match("angular", tokens.angleValue, 1);
      }
      function matchListRadialOrientations() {
        var radialOrientations, radialOrientation = matchRadialOrientation(), lookaheadCache;
        if (radialOrientation) {
          radialOrientations = [];
          radialOrientations.push(radialOrientation);
          lookaheadCache = input;
          if (scan2(tokens.comma)) {
            radialOrientation = matchRadialOrientation();
            if (radialOrientation) {
              radialOrientations.push(radialOrientation);
            } else {
              input = lookaheadCache;
            }
          }
        }
        return radialOrientations;
      }
      function matchRadialOrientation() {
        var radialType = matchCircle() || matchEllipse();
        if (radialType) {
          radialType.at = matchAtPosition();
        } else {
          var extent2 = matchExtentKeyword();
          if (extent2) {
            radialType = extent2;
            var positionAt = matchAtPosition();
            if (positionAt) {
              radialType.at = positionAt;
            }
          } else {
            var defaultPosition = matchPositioning();
            if (defaultPosition) {
              radialType = {
                type: "default-radial",
                at: defaultPosition
              };
            }
          }
        }
        return radialType;
      }
      function matchCircle() {
        var circle = match("shape", /^(circle)/i, 0);
        if (circle) {
          circle.style = matchLength() || matchExtentKeyword();
        }
        return circle;
      }
      function matchEllipse() {
        var ellipse = match("shape", /^(ellipse)/i, 0);
        if (ellipse) {
          ellipse.style = matchDistance() || matchExtentKeyword();
        }
        return ellipse;
      }
      function matchExtentKeyword() {
        return match("extent-keyword", tokens.extentKeywords, 1);
      }
      function matchAtPosition() {
        if (match("position", /^at/, 0)) {
          var positioning = matchPositioning();
          if (!positioning) {
            error("Missing positioning value");
          }
          return positioning;
        }
      }
      function matchPositioning() {
        var location = matchCoordinates();
        if (location.x || location.y) {
          return {
            type: "position",
            value: location
          };
        }
      }
      function matchCoordinates() {
        return {
          x: matchDistance(),
          y: matchDistance()
        };
      }
      function matchListing(matcher2) {
        var captures = matcher2(), result = [];
        if (captures) {
          result.push(captures);
          while (scan2(tokens.comma)) {
            captures = matcher2();
            if (captures) {
              result.push(captures);
            } else {
              error("One extra comma");
            }
          }
        }
        return result;
      }
      function matchColorStop() {
        var color4 = matchColor();
        if (!color4) {
          error("Expected color definition");
        }
        color4.length = matchDistance();
        return color4;
      }
      function matchColor() {
        return matchHexColor() || matchRGBAColor() || matchRGBColor() || matchLiteralColor();
      }
      function matchLiteralColor() {
        return match("literal", tokens.literalColor, 0);
      }
      function matchHexColor() {
        return match("hex", tokens.hexColor, 1);
      }
      function matchRGBColor() {
        return matchCall(tokens.rgbColor, function() {
          return {
            type: "rgb",
            value: matchListing(matchNumber)
          };
        });
      }
      function matchRGBAColor() {
        return matchCall(tokens.rgbaColor, function() {
          return {
            type: "rgba",
            value: matchListing(matchNumber)
          };
        });
      }
      function matchNumber() {
        return scan2(tokens.number)[1];
      }
      function matchDistance() {
        return match("%", tokens.percentageValue, 1) || matchPositionKeyword() || matchLength();
      }
      function matchPositionKeyword() {
        return match("position-keyword", tokens.positionKeywords, 1);
      }
      function matchLength() {
        return match("px", tokens.pixelValue, 1) || match("em", tokens.emValue, 1);
      }
      function match(type2, pattern, captureIndex) {
        var captures = scan2(pattern);
        if (captures) {
          return {
            type: type2,
            value: captures[captureIndex]
          };
        }
      }
      function scan2(regexp) {
        var captures, blankCaptures;
        blankCaptures = /^[\n\r\t\s]+/.exec(input);
        if (blankCaptures) {
          consume(blankCaptures[0].length);
        }
        captures = regexp.exec(input);
        if (captures) {
          consume(captures[0].length);
        }
        return captures;
      }
      function consume(size) {
        input = input.substr(size);
      }
      return function(code) {
        input = code.toString();
        return getAST();
      };
    }();
    exports.parse = GradientParser.parse;
    exports.stringify = GradientParser.stringify;
  }
});

// node_modules/@finos/perspective/dist/esm/perspective.js
var import_ws = __toESM(require_browser());

// node_modules/fflate/esm/browser.js
var u8 = Uint8Array;
var u16 = Uint16Array;
var u32 = Uint32Array;
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start2) {
  var b4 = new u16(31);
  for (var i3 = 0; i3 < 31; ++i3) {
    b4[i3] = start2 += 1 << eb[i3 - 1];
  }
  var r = new u32(b4[30]);
  for (var i3 = 1; i3 < 30; ++i3) {
    for (var j5 = b4[i3]; j5 < b4[i3 + 1]; ++j5) {
      r[j5] = j5 - b4[i3] << 5 | i3;
    }
  }
  return [b4, r];
};
var _a = freb(fleb, 2);
var fl = _a[0];
var revfl = _a[1];
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0);
var fd = _b[0];
var revfd = _b[1];
var rev = new u16(32768);
for (i3 = 0; i3 < 32768; ++i3) {
  x5 = (i3 & 43690) >>> 1 | (i3 & 21845) << 1;
  x5 = (x5 & 52428) >>> 2 | (x5 & 13107) << 2;
  x5 = (x5 & 61680) >>> 4 | (x5 & 3855) << 4;
  rev[i3] = ((x5 & 65280) >>> 8 | (x5 & 255) << 8) >>> 1;
}
var x5;
var i3;
var hMap = function(cd, mb, r) {
  var s2 = cd.length;
  var i3 = 0;
  var l = new u16(mb);
  for (; i3 < s2; ++i3) {
    if (cd[i3])
      ++l[cd[i3] - 1];
  }
  var le4 = new u16(mb);
  for (i3 = 0; i3 < mb; ++i3) {
    le4[i3] = le4[i3 - 1] + l[i3 - 1] << 1;
  }
  var co2;
  if (r) {
    co2 = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i3 = 0; i3 < s2; ++i3) {
      if (cd[i3]) {
        var sv = i3 << 4 | cd[i3];
        var r_1 = mb - cd[i3];
        var v2 = le4[cd[i3] - 1]++ << r_1;
        for (var m2 = v2 | (1 << r_1) - 1; v2 <= m2; ++v2) {
          co2[rev[v2] >>> rvb] = sv;
        }
      }
    }
  } else {
    co2 = new u16(s2);
    for (i3 = 0; i3 < s2; ++i3) {
      if (cd[i3]) {
        co2[i3] = rev[le4[cd[i3] - 1]++] >>> 15 - cd[i3];
      }
    }
  }
  return co2;
};
var flt = new u8(288);
for (i3 = 0; i3 < 144; ++i3)
  flt[i3] = 8;
var i3;
for (i3 = 144; i3 < 256; ++i3)
  flt[i3] = 9;
var i3;
for (i3 = 256; i3 < 280; ++i3)
  flt[i3] = 7;
var i3;
for (i3 = 280; i3 < 288; ++i3)
  flt[i3] = 8;
var i3;
var fdt = new u8(32);
for (i3 = 0; i3 < 32; ++i3)
  fdt[i3] = 5;
var i3;
var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
var max = function(a4) {
  var m2 = a4[0];
  for (var i3 = 1; i3 < a4.length; ++i3) {
    if (a4[i3] > m2)
      m2 = a4[i3];
  }
  return m2;
};
var bits = function(d2, p2, m2) {
  var o = p2 / 8 | 0;
  return (d2[o] | d2[o + 1] << 8) >> (p2 & 7) & m2;
};
var bits16 = function(d2, p2) {
  var o = p2 / 8 | 0;
  return (d2[o] | d2[o + 1] << 8 | d2[o + 2] << 16) >> (p2 & 7);
};
var shft = function(p2) {
  return (p2 + 7) / 8 | 0;
};
var slc = function(v2, s2, e) {
  if (s2 == null || s2 < 0)
    s2 = 0;
  if (e == null || e > v2.length)
    e = v2.length;
  var n2 = new (v2.BYTES_PER_ELEMENT == 2 ? u16 : v2.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s2);
  n2.set(v2.subarray(s2, e));
  return n2;
};
var ec = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
];
var err = function(ind, msg, nt2) {
  var e = new Error(msg || ec[ind]);
  e.code = ind;
  if (Error.captureStackTrace)
    Error.captureStackTrace(e, err);
  if (!nt2)
    throw e;
  return e;
};
var inflt = function(dat, buf, st3) {
  var sl2 = dat.length;
  if (!sl2 || st3 && st3.f && !st3.l)
    return buf || new u8(0);
  var noBuf = !buf || st3;
  var noSt = !st3 || st3.i;
  if (!st3)
    st3 = {};
  if (!buf)
    buf = new u8(sl2 * 3);
  var cbuf = function(l2) {
    var bl = buf.length;
    if (l2 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l2));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st3.f || 0, pos = st3.p || 0, bt2 = st3.b || 0, lm = st3.l, dm = st3.d, lbt = st3.m, dbt = st3.n;
  var tbts = sl2 * 8;
  do {
    if (!lm) {
      final = bits(dat, pos, 1);
      var type2 = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type2) {
        var s2 = shft(pos) + 4, l = dat[s2 - 4] | dat[s2 - 3] << 8, t = s2 + l;
        if (t > sl2) {
          if (noSt)
            err(0);
          break;
        }
        if (noBuf)
          cbuf(bt2 + l);
        buf.set(dat.subarray(s2, t), bt2);
        st3.b = bt2 += l, st3.p = pos = t * 8, st3.f = final;
        continue;
      } else if (type2 == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type2 == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl2 = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl2);
        var clt = new u8(19);
        for (var i3 = 0; i3 < hcLen; ++i3) {
          clt[clim[i3]] = bits(dat, pos + i3 * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max(clt), clbmsk = (1 << clb) - 1;
        var clm = hMap(clt, clb, 1);
        for (var i3 = 0; i3 < tl2; ) {
          var r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          var s2 = r >>> 4;
          if (s2 < 16) {
            ldt[i3++] = s2;
          } else {
            var c6 = 0, n2 = 0;
            if (s2 == 16)
              n2 = 3 + bits(dat, pos, 3), pos += 2, c6 = ldt[i3 - 1];
            else if (s2 == 17)
              n2 = 3 + bits(dat, pos, 7), pos += 3;
            else if (s2 == 18)
              n2 = 11 + bits(dat, pos, 127), pos += 7;
            while (n2--)
              ldt[i3++] = c6;
          }
        }
        var lt3 = ldt.subarray(0, hLit), dt3 = ldt.subarray(hLit);
        lbt = max(lt3);
        dbt = max(dt3);
        lm = hMap(lt3, lbt, 1);
        dm = hMap(dt3, dbt, 1);
      } else
        err(1);
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
    }
    if (noBuf)
      cbuf(bt2 + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var lpos = pos;
    for (; ; lpos = pos) {
      var c6 = lm[bits16(dat, pos) & lms], sym = c6 >>> 4;
      pos += c6 & 15;
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
      if (!c6)
        err(2);
      if (sym < 256)
        buf[bt2++] = sym;
      else if (sym == 256) {
        lpos = pos, lm = null;
        break;
      } else {
        var add = sym - 254;
        if (sym > 264) {
          var i3 = sym - 257, b4 = fleb[i3];
          add = bits(dat, pos, (1 << b4) - 1) + fl[i3];
          pos += b4;
        }
        var d2 = dm[bits16(dat, pos) & dms], dsym = d2 >>> 4;
        if (!d2)
          err(3);
        pos += d2 & 15;
        var dt3 = fd[dsym];
        if (dsym > 3) {
          var b4 = fdeb[dsym];
          dt3 += bits16(dat, pos) & (1 << b4) - 1, pos += b4;
        }
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (noBuf)
          cbuf(bt2 + 131072);
        var end = bt2 + add;
        for (; bt2 < end; bt2 += 4) {
          buf[bt2] = buf[bt2 - dt3];
          buf[bt2 + 1] = buf[bt2 + 1 - dt3];
          buf[bt2 + 2] = buf[bt2 + 2 - dt3];
          buf[bt2 + 3] = buf[bt2 + 3 - dt3];
        }
        bt2 = end;
      }
    }
    st3.l = lm, st3.p = lpos, st3.b = bt2, st3.f = final;
    if (lm)
      final = 1, st3.m = lbt, st3.d = dm, st3.n = dbt;
  } while (!final);
  return bt2 == buf.length ? buf : slc(buf, 0, bt2);
};
var et = /* @__PURE__ */ new u8(0);
var gzs = function(d2) {
  if (d2[0] != 31 || d2[1] != 139 || d2[2] != 8)
    err(6, "invalid gzip data");
  var flg = d2[3];
  var st3 = 10;
  if (flg & 4)
    st3 += d2[10] | (d2[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d2[st3++])
    ;
  return st3 + (flg & 2);
};
var Inflate = /* @__PURE__ */ function() {
  function Inflate2(cb) {
    this.s = {};
    this.p = new u8(0);
    this.ondata = cb;
  }
  Inflate2.prototype.e = function(c6) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    var l = this.p.length;
    var n2 = new u8(l + c6.length);
    n2.set(this.p), n2.set(c6, l), this.p = n2;
  };
  Inflate2.prototype.c = function(final) {
    this.d = this.s.i = final || false;
    var bts = this.s.b;
    var dt3 = inflt(this.p, this.o, this.s);
    this.ondata(slc(dt3, bts, this.s.b), this.d);
    this.o = slc(dt3, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
  };
  Inflate2.prototype.push = function(chunk, final) {
    this.e(chunk), this.c(final);
  };
  return Inflate2;
}();
var Gunzip = /* @__PURE__ */ function() {
  function Gunzip2(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  Gunzip2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      var s2 = this.p.length > 3 ? gzs(this.p) : 4;
      if (s2 >= this.p.length && !final)
        return;
      this.p = this.p.subarray(s2), this.v = 0;
    }
    if (final) {
      if (this.p.length < 8)
        err(6, "invalid gzip data");
      this.p = this.p.subarray(0, -8);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Gunzip2;
}();
var Unzlib = /* @__PURE__ */ function() {
  function Unzlib2(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  Unzlib2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      if (this.p.length < 2 && !final)
        return;
      this.p = this.p.subarray(2), this.v = 0;
    }
    if (final) {
      if (this.p.length < 4)
        err(6, "invalid zlib data");
      this.p = this.p.subarray(0, -4);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Unzlib2;
}();
var Decompress = /* @__PURE__ */ function() {
  function Decompress2(cb) {
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
    this.ondata = cb;
  }
  Decompress2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (!this.s) {
      if (this.p && this.p.length) {
        var n2 = new u8(this.p.length + chunk.length);
        n2.set(this.p), n2.set(chunk, this.p.length);
      } else
        this.p = chunk;
      if (this.p.length > 2) {
        var _this_1 = this;
        var cb = function() {
          _this_1.ondata.apply(_this_1, arguments);
        };
        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
        this.s.push(this.p, final);
        this.p = null;
      }
    } else
      this.s.push(chunk, final);
  };
  return Decompress2;
}();
var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
var tds = 0;
try {
  td.decode(et, { stream: true });
  tds = 1;
} catch (e) {
}

// worker:../../src/js/perspective.worker.js
var perspective_worker_default = "./perspective.worker.js";

// worker-stub:../../src/js/perspective.worker.js
async function get_worker_code() {
  const url = new URL(perspective_worker_default, import.meta.url);
  const req2 = await fetch(url);
  const code = await req2.text();
  return code;
}
function make_host(a4, b4) {
  function addEventListener2(type2, callback) {
    a4.push(callback);
  }
  function postMessage2(msg) {
    if (Object.keys(msg).length > 0) {
      for (const listener of b4) {
        listener({ data: msg });
      }
    }
  }
  return {
    addEventListener: addEventListener2,
    postMessage: postMessage2,
    location: { href: "" }
  };
}
function run_single_threaded(code) {
  let f3 = Function("const self = arguments[0];" + code);
  const workers = [];
  const mains = [];
  f3(make_host(workers, mains));
  return make_host(mains, workers);
}
var code_promise = get_worker_code();
var initialize = async function() {
  const code = await code_promise;
  if (window.location.protocol.startsWith("file") && !window.isElectron) {
    console.warn("file:// protocol does not support Web Workers");
    return run_single_threaded(code);
  }
  try {
    const blob = new Blob([code], { type: "application/javascript" });
    const url = URL.createObjectURL(blob);
    return new Worker(url, { type: "module" });
  } catch (e) {
    console.warn("Failed to instantiate worker, falling back to single-threaded runtime", e);
    return run_single_threaded(code);
  }
};
var perspective_worker_default2 = initialize;

// wasm:/Users/mhk/wrk/test/esbuild-example/node_modules/@finos/perspective/dist/pkg/web/perspective.cpp.wasm
var perspective_cpp_default = "./perspective.cpp.wasm";

// wasm-stub:../../dist/pkg/web/perspective.cpp.wasm
async function get_wasm() {
  return new URL(perspective_cpp_default, import.meta.url);
}
var perspective_cpp_default2 = get_wasm();

// node_modules/@finos/perspective/dist/esm/perspective.js
var M = Object.defineProperty;
var z = (r, e) => {
  for (var t in e)
    M(r, t, { get: e[t], enumerable: true });
};
var x = {};
z(x, { COLUMN_SEPARATOR_STRING: () => H, CONFIG_ALIASES: () => B, CONFIG_VALID_KEYS: () => U, DATA_TYPES: () => D, FILTER_OPERATORS: () => n, SORT_ORDERS: () => V, SORT_ORDER_IDS: () => J, TYPE_AGGREGATES: () => K, TYPE_FILTERS: () => X });
var D = { integer: "integer", float: "float", string: "string", boolean: "boolean", date: "date", datetime: "datetime", object: "object" };
var B = { row_pivot: "group_by", "row-pivot": "group_by", "row-pivots": "group_by", col_pivot: "split_by", col_pivots: "split_by", column_pivot: "split_by", "column-pivot": "split_by", "column-pivots": "split_by", filters: "filter", sorts: "sort" };
var U = ["viewport", "group_by", "split_by", "aggregates", "columns", "filter", "sort", "computed_columns", "expressions", "group_by_depth", "split_by_depth", "filter_op"];
var L = ["any", "avg", "abs sum", "count", "distinct count", "dominant", "first by index", "last by index", "last minus first", "last", "high", "join", "low", "high minus low", "max", "mean", "median", "min", "pct sum parent", "pct sum grand total", "stddev", "sum", "sum abs", "sum not null", "unique", "var"];
var v = ["any", "count", "distinct count", "distinct leaf", "dominant", "first by index", "join", "last by index", "last", "unique"];
var W = ["any", "count", "distinct count", "distinct leaf", "dominant", "first by index", "last by index", "last", "unique"];
var V = ["none", "asc", "desc", "col asc", "col desc", "asc abs", "desc abs", "col asc abs", "col desc abs"];
var J = [2, 0, 1, 0, 1, 3, 4, 3, 4];
var K = { string: v, float: L, integer: L, boolean: W, datetime: v, date: v };
var n = { lessThan: "<", greaterThan: ">", equals: "==", lessThanOrEquals: "<=", greaterThanOrEquals: ">=", doesNotEqual: "!=", isNull: "is null", isNotNull: "is not null", isIn: "in", isNotIn: "not in", contains: "contains", bitwiseAnd: "&", bitwiseOr: "|", and: "and", or: "or", beginsWith: "begins with", endsWith: "ends with" };
var Y = [n.bitwiseAnd, n.bitwiseOr, n.equals, n.doesNotEqual, n.or, n.and, n.isNull, n.isNotNull];
var C = [n.lessThan, n.greaterThan, n.equals, n.lessThanOrEquals, n.greaterThanOrEquals, n.doesNotEqual, n.isNull, n.isNotNull];
var $ = [n.equals, n.contains, n.doesNotEqual, n.isIn, n.isNotIn, n.beginsWith, n.endsWith, n.isNull, n.isNotNull];
var G = [n.lessThan, n.greaterThan, n.equals, n.lessThanOrEquals, n.greaterThanOrEquals, n.doesNotEqual, n.isNull, n.isNotNull];
var H = "|";
var X = { string: $, float: C, integer: C, boolean: Y, datetime: G, date: G };
var O = { types: { float: { filter_operator: "==", aggregate: "sum", format: { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 } }, string: { filter_operator: "==", aggregate: "count" }, integer: { filter_operator: "==", aggregate: "sum", format: {} }, boolean: { filter_operator: "==", aggregate: "count" }, datetime: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short", timeStyle: "medium" }, null_value: -1 }, date: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short" }, null_value: -1 } } };
function N(r) {
  return r && typeof r == "object" && !Array.isArray(r);
}
function y(r, ...e) {
  if (!e.length)
    return r;
  let t = e.shift();
  if (N(r) && N(t))
    for (let o in t)
      N(t[o]) ? (r[o] || Object.assign(r, { [o]: {} }), y(r[o], t[o])) : Object.assign(r, { [o]: t[o] });
  return y(r, ...e);
}
function j(r) {
  globalThis.__PERSPECTIVE_CONFIG__ && console.warn("Config already initialized!"), globalThis.__PERSPECTIVE_CONFIG__ = y(O, r);
}
function b() {
  return globalThis.__PERSPECTIVE_CONFIG__ || (globalThis.__PERSPECTIVE_CONFIG__ = y(O, globalThis.__TEMPLATE_CONFIG__ || {})), globalThis.__PERSPECTIVE_CONFIG__;
}
var S = /* @__PURE__ */ new WeakMap();
var A = 0;
function c(r, e) {
  return function() {
    let t, o = () => {
    }, s2 = Array.prototype.slice.call(arguments, 0, arguments.length);
    for (let l = s2.length - 1; l >= 0; l--)
      typeof s2[l] == "function" && (t = s2.splice(l, 1)[0]);
    let p2 = S.get(t);
    S.delete(t);
    let u = { cmd: e || "view_method", name: this._name, method: r, args: s2, subscribe: true, callback_id: p2 };
    this._worker.post(u, t, o), this._worker.unsubscribe(e, t);
  };
}
function f(r, e) {
  return function() {
    let t, o = () => {
    }, s2 = Array.prototype.slice.call(arguments, 0, arguments.length);
    for (let u = s2.length - 1; u >= 0; u--)
      typeof s2[u] == "function" && (t = s2.splice(u, 1)[0]);
    A++, S.set(t, A);
    let p2 = { cmd: e || "view_method", name: this._name, method: r, args: s2, subscribe: true, callback_id: A };
    this._worker.post(p2, t, o, true);
  };
}
function i(r, e) {
  return function() {
    var t = Array.prototype.slice.call(arguments, 0, arguments.length);
    return new Promise(function(o, s2) {
      var p2 = { cmd: e || "view_method", name: this._name, method: r, args: t, subscribe: false };
      this._worker.post(p2, o, s2);
    }.bind(this));
  };
}
function a(r, e, t) {
  return new Promise((o, s2) => {
    this._worker = r, this._name = Math.random() + "", this._worker.post({ cmd: "view", view_name: this._name, table_name: e, config: t }, () => {
      o(this);
    }, s2), this._worker._initialized === true && !this._worker._features?.wait_for_response && o(this);
  });
}
function Z(r, e) {
  this._worker = r, this._name = e;
}
Z.prototype = a.prototype;
a.prototype.get_config = i("get_config");
a.prototype.get_min_max = i("get_min_max");
a.prototype.to_json = i("to_json");
a.prototype.to_arrow = i("to_arrow");
a.prototype.to_columns = i("to_columns");
a.prototype.to_columns_string = i("to_columns_string");
a.prototype.to_csv = i("to_csv");
a.prototype.schema = i("schema");
a.prototype.expression_schema = i("expression_schema");
a.prototype.column_paths = i("column_paths");
a.prototype.num_columns = i("num_columns");
a.prototype.num_rows = i("num_rows");
a.prototype.dimensions = i("dimensions");
a.prototype.set_depth = i("set_depth");
a.prototype.get_row_expanded = i("get_row_expanded");
a.prototype.expand = i("expand");
a.prototype.collapse = i("collapse");
a.prototype.delete = i("delete");
a.prototype.col_to_js_typed_array = i("col_to_js_typed_array");
a.prototype.on_update = f("on_update", "view_method", true);
a.prototype.remove_update = c("remove_update", "view_method", true);
a.prototype.on_delete = f("on_delete", "view_method", true);
a.prototype.remove_delete = c("remove_delete", "view_method", true);
function w(r) {
  let e = r;
  do
    for (let t of Object.getOwnPropertyNames(e)) {
      let o = r[t];
      t !== "constructor" && typeof o == "function" && (r[t] = o.bind(r));
    }
  while (e = e !== Object && Object.getPrototypeOf(e));
}
String.prototype.includes || (String.prototype.includes = function(r, e) {
  return typeof e != "number" && (e = 0), e + r.length > this.length ? false : this.indexOf(r, e) !== -1;
});
Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", { value: function(r, e) {
  if (this == null)
    throw new TypeError('"this" is null or not defined');
  var t = Object(this), o = t.length >>> 0;
  if (o === 0)
    return false;
  var s2 = e | 0, p2 = Math.max(s2 >= 0 ? s2 : o - Math.abs(s2), 0);
  function u(l, h2) {
    return l === h2 || typeof l == "number" && typeof h2 == "number" && isNaN(l) && isNaN(h2);
  }
  for (; p2 < o; ) {
    if (u(t[p2], r))
      return true;
    p2++;
  }
  return false;
} });
function _(r, e, t) {
  return new Promise((o, s2) => {
    this._worker = r, this._name = t.name || Math.random() + "", w(this), e.to_arrow ? (this._worker.post({ cmd: "table", name: this._name, args: [], options: t || {} }), e.to_arrow().then((p2) => {
      this._worker.post({ cmd: "table", name: this._name, args: [p2], options: t || {} }, () => {
        e.on_update((u) => {
          this.update(u.delta);
        }, { mode: "row" }), o(this);
      }, s2);
    })) : this._worker.post({ cmd: "table", name: this._name, args: [e], options: t || {} }, () => {
      o(this);
    }, s2), this._worker._initialized === true && !this._worker._features?.wait_for_response && o(this);
  });
}
_.prototype.type = "table";
function I(r, e) {
  this._worker = r, this._name = e;
}
I.prototype = _.prototype;
_.prototype.view = function(r) {
  return new a(this._worker, this._name, r);
};
_.prototype.query_columns = i("query_columns", "table_method");
_.prototype.get_index = i("get_index", "table_method");
_.prototype.get_limit = i("get_limit", "table_method");
_.prototype.get_num_views = i("get_num_views", "table_method");
_.prototype.make_port = i("make_port", "table_method");
_.prototype.remove_port = i("remove_port", "table_method");
_.prototype.schema = i("schema", "table_method");
_.prototype.validate_expressions = i("validate_expressions", "table_method");
_.prototype.is_valid_filter = i("is_valid_filter", "table_method");
_.prototype.size = i("size", "table_method");
_.prototype.num_rows = i("num_rows", "table_method");
_.prototype.num_columns = i("num_columns", "table_method");
_.prototype.columns = i("columns", "table_method");
_.prototype.clear = i("clear", "table_method");
_.prototype.replace = i("replace", "table_method");
_.prototype.delete = i("delete", "table_method");
_.prototype.on_delete = f("on_delete", "table_method", true);
_.prototype.remove = i("remove", "table_method");
_.prototype.remove_delete = c("remove_delete", "table_method", true);
_.prototype.update = function(r, e) {
  return new Promise((t, o) => {
    this._worker.post({ name: this._name, cmd: "table_method", method: "update", args: [r, e || {}] }, t, o, false);
  });
};
_.prototype.execute = function(r) {
  this._worker.post({ cmd: "table_execute", name: this._name, f: r.toString() });
};
var d = class {
  constructor() {
    this._initialized = false, this._worker = { initialized: { value: false }, transferable: false, msg_id: 0, handlers: {}, messages: [] }, w(this);
  }
  unsubscribe(e, t) {
    for (let o of Object.keys(this._worker.handlers))
      this._worker.handlers[o].resolve === t && delete this._worker.handlers[o];
  }
  post(e, t, o, s2 = false) {
    ++this._worker.msg_id, (t || o) && (this._worker.handlers[this._worker.msg_id] = { resolve: t, reject: o, keep_alive: s2 }), e.id = this._worker.msg_id, this._worker.initialized.value ? this.send(e) : this._worker.messages.push(() => {
      this.send(e), (e.cmd === "table" || e.cmd === "view") && !this._features?.wait_for_response && t && t();
    });
  }
  async memory_usage() {
    return await new Promise((e, t) => {
      this.post({ cmd: "memory_usage" }, e, t);
    });
  }
  async get_hosted_table_names() {
    return await new Promise((e, t) => {
      this.post({ cmd: "get_hosted_table_names" }, e, t);
    });
  }
  initialize_profile_thread() {
    this._worker.initialized.value ? this.send({ id: -1, cmd: "init_profile_thread" }) : this._worker.messages.push(() => this.send({ id: -1, cmd: "init_profile_thread" }));
  }
  send() {
    throw new Error("send() not implemented");
  }
  async open_table(e) {
    return new I(this, e);
  }
  _handle(e) {
    if (!this._worker.initialized.value) {
      this._initialized || (this._initialized = true);
      let t = this._worker.messages;
      if (this._worker.initialized.value = true, this._worker.messages = [], e.data?.data) {
        this._features = {};
        for (let o of e.data.data)
          this._features[o] = true;
      }
      if (t)
        for (let o in t)
          t.hasOwnProperty(o) && t[o]();
    }
    if (e.data.id) {
      let t = this._worker.handlers[e.data.id];
      t && (e.data.error ? t.reject(e.data.error) : t.resolve(e.data.data), t.keep_alive || delete this._worker.handlers[e.data.id]);
    }
  }
  table(e, t) {
    return new _(this, e, t || {});
  }
  terminate() {
    this._worker.terminate(), this._worker = void 0;
  }
};
var ee = 3e4;
var k = class extends d {
  _ping() {
    this._ping_loop && this._ws.send("ping"), this._ping_loop = setTimeout(this._ping.bind(this), ee);
  }
  _close() {
    clearTimeout(this._ping_loop), this._ping_loop = void 0, this._on_close_callback?.();
  }
  _onmessage(e) {
    if (e.data !== "pong")
      if (this._pending_binary) {
        let t = e.data;
        if (this._full_binary.set(new Uint8Array(t), this._total_chunk_length), this._total_chunk_length += t.byteLength, this._total_chunk_length === this._pending_binary_length)
          t = this._full_binary.buffer;
        else
          return;
        let o = { data: { id: this._pending_binary, data: t } };
        if (this._pending_port_id !== void 0) {
          let s2 = { port_id: this._pending_port_id, delta: t };
          o.data.data = s2;
        }
        this._handle(o), delete this._pending_binary, delete this._pending_binary_length, delete this._pending_port_id, this._total_chunk_length = 0, this._full_binary = null;
      } else
        e = JSON.parse(e.data), e.binary_length ? (this._pending_binary = e.id, this._pending_binary_length = e.binary_length, e.data && e.data.port_id !== void 0 && (this._pending_port_id = e.data.port_id), this._full_binary = new Uint8Array(this._pending_binary_length)) : this._handle({ data: e });
  }
  constructor(e) {
    super(), this._ws = e, this._ws.binaryType = "arraybuffer", this._full_binary, this._total_chunk_length = 0, this._pending_binary_length = 0, this._ws.onopen = () => {
      this.send({ id: -1, cmd: "init" });
    }, this._ping(), this._ws.onclose = this._close.bind(this), this._ws.onmessage = this._onmessage.bind(this);
  }
  send(e) {
    if (this._ws.readyState === import_ws.default.CLOSED) {
      console.warn("Websocket connection is already closed.");
      return;
    }
    if (e.args && e.args.length > 0 && e.args[0] instanceof ArrayBuffer && e.args[0].byteLength !== void 0) {
      let t = e;
      e.binary_length = e.args[0].byteLength, this._ws.send(JSON.stringify(t)), this._ws.send(e.args[0]);
      return;
    }
    this._ws.send(JSON.stringify(e));
  }
  terminate() {
    return new Promise((e) => {
      this._on_close_callback = e, this._ws.close();
    });
  }
};
var F = false;
function q(r) {
  return new Uint32Array(r.slice(0, 4))[0] == 559903;
}
var R = function() {
  let r;
  return function() {
    return r || (r = new class {
      async worker() {
        return await perspective_worker_default2();
      }
      async wasm() {
        let e = await perspective_cpp_default2, t = [], o = 0, s2 = new Decompress((l) => {
          l && (o += l.byteLength, t.push(l));
        });
        if (e instanceof ArrayBuffer && !e.buffer && (e = new Uint8Array(e)), e.buffer && e.buffer instanceof ArrayBuffer)
          F = true, q(e.buffer) ? s2.push(e, true) : (o = e.byteLength, t = [e]);
        else if (e instanceof ArrayBuffer)
          o = e.byteLength, t = [new Uint8Array(e)];
        else {
          let h2 = (await fetch(e)).body.getReader(), m2 = 0;
          for (; ; ) {
            let { value: g2, done: P3 } = await h2.read();
            if (P3)
              break;
            m2 === 0 && q(g2.buffer) || m2 === 1 ? (m2 = 1, s2.push(g2, P3)) : (m2 = 2, o += g2.byteLength, t.push(g2));
          }
        }
        let p2 = 0, u = new Uint8Array(o);
        for (let l of t)
          u.set(l, p2), p2 += l.byteLength;
        return this._wasm = u.buffer, this._wasm;
      }
    }()), r;
  };
}();
var E = class extends d {
  constructor(e) {
    e && j(e), super(), this.register();
  }
  async register() {
    let e, t = { cmd: "init", config: b() };
    if (typeof WebAssembly > "u")
      throw new Error("WebAssembly not supported.");
    [e, t.buffer] = await Promise.all([R().worker(), R().wasm()]);
    for (var o in this._worker)
      e[o] = this._worker[o];
    this._worker = e, this._worker.addEventListener("message", this._handle.bind(this)), this._worker.postMessage(t), this._detect_transferable();
  }
  send(e) {
    this._worker.transferable && e.args && e.args[0] instanceof ArrayBuffer ? this._worker.postMessage(e, [e.args[0]]) : this._worker.postMessage(e);
  }
  terminate() {
    this._worker.terminate(), this._worker = void 0;
  }
  get transferable() {
    return this._worker?.transferable || false;
  }
  get inline() {
    return F;
  }
  _detect_transferable() {
    var e = new ArrayBuffer(1);
    this._worker.postMessage(e, [e]), this._worker.transferable = e.byteLength === 0;
  }
};
var ie = function() {
  let r, e;
  return { getInstance: function(t) {
    r === void 0 && (r = new E(t));
    let o = JSON.stringify(t);
    if (e && o !== e)
      throw new Error("Configuration object for shared_worker() has changed - this is probably a bug in your application.");
    return e = o, r;
  } };
}();
function ne(r) {
  return R().set(r);
}
function se(r) {
  return new E(r);
}
function ae(r = window.location.origin.replace("http", "ws")) {
  return new k(new WebSocket(r));
}
function _e(r) {
  return ie.getInstance(r);
}
var Ge = { override: ne, worker: se, websocket: ae, shared_worker: _e, ...Object.keys(x) };

// wasm:/Users/mhk/wrk/test/esbuild-example/node_modules/@finos/perspective-viewer/dist/pkg/perspective_bg.wasm
var perspective_bg_default = "./perspective_bg.wasm";

// wasm-stub:../../dist/pkg/perspective_bg.wasm
async function get_wasm2() {
  return new URL(perspective_bg_default, import.meta.url);
}
var perspective_bg_default2 = get_wasm2();

// node_modules/@finos/perspective-viewer/dist/esm/perspective-viewer.js
var fe = Object.defineProperty;
var ge = (n2, e) => {
  for (var t in e)
    fe(n2, t, { get: e[t], enumerable: true });
};
var $2 = class extends HTMLElement {
  constructor() {
    super();
  }
  get name() {
    return "Debug";
  }
  get select_mode() {
    return "select";
  }
  get min_config_columns() {
  }
  get config_column_names() {
  }
  get priority() {
    return 0;
  }
  async update(e) {
    return this.draw(e);
  }
  async draw(e) {
    this.style.backgroundColor = "#fff";
    let t = await e.to_csv(), r = "margin:0;overflow:scroll;position:absolute;width:100%;height:100%";
    this.innerHTML = `<pre style='${r}'>${t}</pre>`;
  }
  async clear() {
    this.innerHTML = "";
  }
  async resize() {
  }
  async restyle() {
  }
  async save() {
  }
  async restore() {
  }
  async delete() {
  }
};
document.createElement("perspective-viewer-plugin").constructor === HTMLElement && window.customElements.define("perspective-viewer-plugin", $2);
var x2 = {};
ge(x2, { ColumnDropDownElement: () => Y2, CopyDropDownMenuElement: () => T, ExportDropDownMenuElement: () => A2, FilterDropDownElement: () => z2, FunctionDropDownElement: () => D2, PerspectiveDateColumnStyleElement: () => P, PerspectiveDatetimeColumnStyleElement: () => E2, PerspectiveDebugPluginElement: () => L2, PerspectiveNumberColumnStyleElement: () => O2, PerspectiveStringColumnStyleElement: () => F2, PerspectiveViewerElement: () => h, default: () => q2, defineWebComponents: () => X2, getExprTKCommands: () => Ae, initSync: () => Le, registerPlugin: () => Te });
var Z2 = window.ClipboardItem;
var ee2 = window.ResizeObserver;
function te(n2, e, t, r) {
  let o = n2[t], s2 = o.prototype;
  class u extends HTMLElement {
    constructor() {
      super(), this._instance = new o(this);
    }
  }
  let d2 = Object.getOwnPropertyNames(s2);
  for (let l of d2)
    "get" in Object.getOwnPropertyDescriptor(s2, l) ? Object.defineProperty(u.prototype, l, { get: function() {
      return this._instance[l];
    } }) : Object.defineProperty(u.prototype, l, { value: function(...v2) {
      return this._instance[l].call(this._instance, ...v2);
    } });
  for (let l of r)
    Object.defineProperty(u, l, { value: function(...v2) {
      return n2[l].call(n2, ...v2);
    } });
  customElements.define(e, u);
}
var c2;
var y2 = new Array(128).fill(void 0);
y2.push(void 0, null, true, false);
function _2(n2) {
  return y2[n2];
}
function g(n2) {
  return n2 == null;
}
var j2 = null;
function _e2() {
  return (j2 === null || j2.byteLength === 0) && (j2 = new Float64Array(c2.memory.buffer)), j2;
}
var S2 = null;
function a2() {
  return (S2 === null || S2.byteLength === 0) && (S2 = new Int32Array(c2.memory.buffer)), S2;
}
var p = 0;
var R2 = null;
function B2() {
  return (R2 === null || R2.byteLength === 0) && (R2 = new Uint8Array(c2.memory.buffer)), R2;
}
var H2 = new TextEncoder("utf-8");
var we = typeof H2.encodeInto == "function" ? function(n2, e) {
  return H2.encodeInto(n2, e);
} : function(n2, e) {
  let t = H2.encode(n2);
  return e.set(t), { read: n2.length, written: t.length };
};
function m(n2, e, t) {
  if (t === void 0) {
    let d2 = H2.encode(n2), l = e(d2.length);
    return B2().subarray(l, l + d2.length).set(d2), p = d2.length, l;
  }
  let r = n2.length, o = e(r), s2 = B2(), u = 0;
  for (; u < r; u++) {
    let d2 = n2.charCodeAt(u);
    if (d2 > 127)
      break;
    s2[o + u] = d2;
  }
  if (u !== r) {
    u !== 0 && (n2 = n2.slice(u)), o = t(o, r, r = u + n2.length * 3);
    let d2 = B2().subarray(o + u, o + r);
    u += we(n2, d2).written;
  }
  return p = u, o;
}
var V2 = y2.length;
function i2(n2) {
  V2 === y2.length && y2.push(y2.length + 1);
  let e = V2;
  return V2 = y2[e], y2[e] = n2, e;
}
var oe = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
oe.decode();
function w2(n2, e) {
  return oe.decode(B2().subarray(n2, n2 + e));
}
function de(n2) {
  n2 < 132 || (y2[n2] = V2, V2 = n2);
}
function f2(n2) {
  let e = _2(n2);
  return de(n2), e;
}
var I2 = null;
function le() {
  return (I2 === null || I2.byteLength === 0) && (I2 = new BigInt64Array(c2.memory.buffer)), I2;
}
function N2(n2) {
  let e = typeof n2;
  if (e == "number" || e == "boolean" || n2 == null)
    return `${n2}`;
  if (e == "string")
    return `"${n2}"`;
  if (e == "symbol") {
    let o = n2.description;
    return o == null ? "Symbol" : `Symbol(${o})`;
  }
  if (e == "function") {
    let o = n2.name;
    return typeof o == "string" && o.length > 0 ? `Function(${o})` : "Function";
  }
  if (Array.isArray(n2)) {
    let o = n2.length, s2 = "[";
    o > 0 && (s2 += N2(n2[0]));
    for (let u = 1; u < o; u++)
      s2 += ", " + N2(n2[u]);
    return s2 += "]", s2;
  }
  let t = /\[object ([^\]]+)\]/.exec(toString.call(n2)), r;
  if (t.length > 1)
    r = t[1];
  else
    return toString.call(n2);
  if (r == "Object")
    try {
      return "Object(" + JSON.stringify(n2) + ")";
    } catch {
      return "Object";
    }
  return n2 instanceof Error ? `${n2.name}: ${n2.message}
${n2.stack}` : r;
}
function W2(n2, e, t, r) {
  let o = { a: n2, b: e, cnt: 1, dtor: t }, s2 = (...u) => {
    o.cnt++;
    try {
      return r(o.a, o.b, ...u);
    } finally {
      --o.cnt === 0 && (c2.__wbindgen_export_2.get(o.dtor)(o.a, o.b), o.a = 0);
    }
  };
  return s2.original = o, s2;
}
function pe(n2, e, t) {
  let r = c2.__wbindgen_export_3(n2, e, i2(t));
  return f2(r);
}
function k2(n2, e, t, r) {
  let o = { a: n2, b: e, cnt: 1, dtor: t }, s2 = (...u) => {
    o.cnt++;
    let d2 = o.a;
    o.a = 0;
    try {
      return r(d2, o.b, ...u);
    } finally {
      --o.cnt === 0 ? c2.__wbindgen_export_2.get(o.dtor)(d2, o.b) : o.a = d2;
    }
  };
  return s2.original = o, s2;
}
function ne2(n2, e, t) {
  c2.__wbindgen_export_4(n2, e, i2(t));
}
function re(n2, e, t) {
  c2.__wbindgen_export_5(n2, e, i2(t));
}
function me(n2, e) {
  try {
    let o = c2.__wbindgen_add_to_stack_pointer(-16);
    c2.__wbindgen_export_6(o, n2, e);
    var t = a2()[o / 4 + 0], r = a2()[o / 4 + 1];
    if (r)
      throw f2(t);
  } finally {
    c2.__wbindgen_add_to_stack_pointer(16);
  }
}
function ye(n2, e) {
  c2.__wbindgen_export_7(n2, e);
}
function he(n2, e, t) {
  c2.__wbindgen_export_8(n2, e, i2(t));
}
var U2 = 128;
function ve(n2) {
  if (U2 == 1)
    throw new Error("out of js stack");
  return y2[--U2] = n2, U2;
}
function xe(n2, e, t) {
  try {
    c2.__wbindgen_export_9(n2, e, ve(t));
  } finally {
    y2[U2++] = void 0;
  }
}
var M2 = null;
function ce() {
  return (M2 === null || M2.byteLength === 0) && (M2 = new Uint32Array(c2.memory.buffer)), M2;
}
function ke(n2, e) {
  let t = e(n2.length * 4), r = ce();
  for (let o = 0; o < n2.length; o++)
    r[t / 4 + o] = i2(n2[o]);
  return p = n2.length, t;
}
function b2(n2, e) {
  try {
    return n2.apply(this, e);
  } catch (t) {
    c2.__wbindgen_export_11(i2(t));
  }
}
function Te(n2) {
  let e = m(n2, c2.__wbindgen_export_0, c2.__wbindgen_export_1), t = p;
  c2.registerPlugin(e, t);
}
function ie2(n2, e) {
  let r = ce().subarray(n2 / 4, n2 / 4 + e), o = [];
  for (let s2 = 0; s2 < r.length; s2++)
    o.push(f2(r[s2]));
  return o;
}
function Ae() {
  try {
    let s2 = c2.__wbindgen_add_to_stack_pointer(-16);
    c2.getExprTKCommands(s2);
    var n2 = a2()[s2 / 4 + 0], e = a2()[s2 / 4 + 1], t = a2()[s2 / 4 + 2], r = a2()[s2 / 4 + 3];
    if (r)
      throw f2(t);
    var o = ie2(n2, e).slice();
    return c2.__wbindgen_export_10(n2, e * 4), o;
  } finally {
    c2.__wbindgen_add_to_stack_pointer(16);
  }
}
function X2() {
  c2.defineWebComponents();
}
function Pe(n2, e, t, r) {
  c2.__wbindgen_export_12(n2, e, i2(t), i2(r));
}
var Y2 = class {
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_columndropdownelement_free(e);
  }
};
var T = class {
  static __wrap(e) {
    let t = Object.create(T.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_copydropdownmenuelement_free(e);
  }
  constructor(e) {
    let t = c2.copydropdownmenuelement_new(i2(e));
    return T.__wrap(t);
  }
  open(e) {
    c2.copydropdownmenuelement_open(this.ptr, i2(e));
  }
  hide() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.copydropdownmenuelement_hide(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  unsafe_set_model(e) {
    c2.copydropdownmenuelement_unsafe_set_model(this.ptr, e);
  }
  connected_callback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var A2 = class {
  static __wrap(e) {
    let t = Object.create(A2.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_exportdropdownmenuelement_free(e);
  }
  constructor(e) {
    let t = c2.copydropdownmenuelement_new(i2(e));
    return A2.__wrap(t);
  }
  open(e) {
    c2.exportdropdownmenuelement_open(this.ptr, i2(e));
  }
  hide() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.copydropdownmenuelement_hide(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  unsafe_set_model(e) {
    c2.exportdropdownmenuelement_unsafe_set_model(this.ptr, e);
  }
  connected_callback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var z2 = class {
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_filterdropdownelement_free(e);
  }
};
var D2 = class {
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_functiondropdownelement_free(e);
  }
};
var P = class {
  static __wrap(e) {
    let t = Object.create(P.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_perspectivedatecolumnstyleelement_free(e);
  }
  constructor(e) {
    let t = c2.perspectivedatecolumnstyleelement_new(i2(e));
    return P.__wrap(t);
  }
  reset(e) {
    try {
      let o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_reset(o, this.ptr, i2(e));
      var t = a2()[o / 4 + 0], r = a2()[o / 4 + 1];
      if (r)
        throw f2(t);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e, t, r) {
    try {
      let u = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_open(u, this.ptr, i2(e), i2(t), i2(r));
      var o = a2()[u / 4 + 0], s2 = a2()[u / 4 + 1];
      if (s2)
        throw f2(o);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_close(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r = this.__destroy_into_raw(), o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_destroy(o, r);
      var e = a2()[o / 4 + 0], t = a2()[o / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var E2 = class {
  static __wrap(e) {
    let t = Object.create(E2.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_perspectivedatetimecolumnstyleelement_free(e);
  }
  constructor(e) {
    let t = c2.perspectivedatecolumnstyleelement_new(i2(e));
    return E2.__wrap(t);
  }
  reset(e) {
    try {
      let o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_reset(o, this.ptr, i2(e));
      var t = a2()[o / 4 + 0], r = a2()[o / 4 + 1];
      if (r)
        throw f2(t);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e, t, r) {
    try {
      let u = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatetimecolumnstyleelement_open(u, this.ptr, i2(e), i2(t), i2(r));
      var o = a2()[u / 4 + 0], s2 = a2()[u / 4 + 1];
      if (s2)
        throw f2(o);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_close(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r = this.__destroy_into_raw(), o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_destroy(o, r);
      var e = a2()[o / 4 + 0], t = a2()[o / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var L2 = class {
  static __wrap(e) {
    let t = Object.create(L2.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_perspectivedebugpluginelement_free(e);
  }
  constructor(e) {
    let t = c2.perspectivedebugpluginelement_new(i2(e));
    return L2.__wrap(t);
  }
  get name() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedebugpluginelement_name(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      return w2(e, t);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16), c2.__wbindgen_export_10(e, t);
    }
  }
  get select_mode() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedebugpluginelement_select_mode(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      return w2(e, t);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16), c2.__wbindgen_export_10(e, t);
    }
  }
  get min_config_columns() {
    let e = c2.perspectivedebugpluginelement_config_column_names(this.ptr);
    return f2(e);
  }
  get config_column_names() {
    let e = c2.perspectivedebugpluginelement_config_column_names(this.ptr);
    return f2(e);
  }
  update(e) {
    let t = c2.perspectivedebugpluginelement_draw(this.ptr, i2(e));
    return f2(t);
  }
  draw(e) {
    let t = c2.perspectivedebugpluginelement_draw(this.ptr, i2(e));
    return f2(t);
  }
  clear() {
    let e = c2.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e);
  }
  resize() {
    let e = c2.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e);
  }
  restyle() {
    let e = c2.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e);
  }
  save() {
    let e = c2.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e);
  }
  restore() {
    let e = c2.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e);
  }
  delete() {
    let e = c2.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e);
  }
  connectedCallback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var O2 = class {
  static __wrap(e) {
    let t = Object.create(O2.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_perspectivenumbercolumnstyleelement_free(e);
  }
  constructor(e) {
    let t = c2.perspectivedatecolumnstyleelement_new(i2(e));
    return O2.__wrap(t);
  }
  reset(e, t) {
    try {
      let s2 = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivenumbercolumnstyleelement_reset(s2, this.ptr, i2(e), i2(t));
      var r = a2()[s2 / 4 + 0], o = a2()[s2 / 4 + 1];
      if (o)
        throw f2(r);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e, t, r) {
    try {
      let u = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivenumbercolumnstyleelement_open(u, this.ptr, i2(e), i2(t), i2(r));
      var o = a2()[u / 4 + 0], s2 = a2()[u / 4 + 1];
      if (s2)
        throw f2(o);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_close(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r = this.__destroy_into_raw(), o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivenumbercolumnstyleelement_destroy(o, r);
      var e = a2()[o / 4 + 0], t = a2()[o / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var F2 = class {
  static __wrap(e) {
    let t = Object.create(F2.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_perspectivestringcolumnstyleelement_free(e);
  }
  constructor(e) {
    let t = c2.perspectivedatecolumnstyleelement_new(i2(e));
    return F2.__wrap(t);
  }
  reset(e) {
    try {
      let o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivestringcolumnstyleelement_reset(o, this.ptr, i2(e));
      var t = a2()[o / 4 + 0], r = a2()[o / 4 + 1];
      if (r)
        throw f2(t);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e, t, r) {
    try {
      let u = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivestringcolumnstyleelement_open(u, this.ptr, i2(e), i2(t), i2(r));
      var o = a2()[u / 4 + 0], s2 = a2()[u / 4 + 1];
      if (s2)
        throw f2(o);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivedatecolumnstyleelement_close(r, this.ptr);
      var e = a2()[r / 4 + 0], t = a2()[r / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r = this.__destroy_into_raw(), o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectivestringcolumnstyleelement_destroy(o, r);
      var e = a2()[o / 4 + 0], t = a2()[o / 4 + 1];
      if (t)
        throw f2(e);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var h = class {
  static __wrap(e) {
    let t = Object.create(h.prototype);
    return t.ptr = e, t;
  }
  __destroy_into_raw() {
    let e = this.ptr;
    return this.ptr = 0, e;
  }
  free() {
    let e = this.__destroy_into_raw();
    c2.__wbg_perspectiveviewerelement_free(e);
  }
  constructor(e) {
    let t = c2.perspectiveviewerelement_new(i2(e));
    return h.__wrap(t);
  }
  connectedCallback() {
    c2.copydropdownmenuelement_connected_callback(this.ptr);
  }
  load(e) {
    let t = c2.perspectiveviewerelement_load(this.ptr, i2(e));
    return f2(t);
  }
  delete() {
    let e = c2.perspectiveviewerelement_delete(this.ptr);
    return f2(e);
  }
  getView() {
    let e = c2.perspectiveviewerelement_getView(this.ptr);
    return f2(e);
  }
  getTable(e) {
    let t = c2.perspectiveviewerelement_getTable(this.ptr, g(e) ? 16777215 : e ? 1 : 0);
    return f2(t);
  }
  flush() {
    let e = c2.perspectiveviewerelement_flush(this.ptr);
    return f2(e);
  }
  restore(e) {
    let t = c2.perspectiveviewerelement_restore(this.ptr, i2(e));
    return f2(t);
  }
  save(e) {
    var t = g(e) ? 0 : m(e, c2.__wbindgen_export_0, c2.__wbindgen_export_1), r = p;
    let o = c2.perspectiveviewerelement_save(this.ptr, t, r);
    return f2(o);
  }
  download(e) {
    let t = c2.perspectiveviewerelement_download(this.ptr, g(e) ? 16777215 : e ? 1 : 0);
    return f2(t);
  }
  copy(e) {
    let t = c2.perspectiveviewerelement_copy(this.ptr, g(e) ? 16777215 : e ? 1 : 0);
    return f2(t);
  }
  reset(e) {
    let t = c2.perspectiveviewerelement_reset(this.ptr, g(e) ? 16777215 : e ? 1 : 0);
    return f2(t);
  }
  notifyResize(e) {
    let t = c2.perspectiveviewerelement_notifyResize(this.ptr, g(e) ? 16777215 : e ? 1 : 0);
    return f2(t);
  }
  setAutoSize(e) {
    c2.perspectiveviewerelement_setAutoSize(this.ptr, e);
  }
  getEditPort() {
    try {
      let o = c2.__wbindgen_add_to_stack_pointer(-16);
      c2.perspectiveviewerelement_getEditPort(o, this.ptr);
      var e = _e2()[o / 8 + 0], t = a2()[o / 4 + 2], r = a2()[o / 4 + 3];
      if (r)
        throw f2(t);
      return e;
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  restyleElement() {
    let e = c2.perspectiveviewerelement_restyleElement(this.ptr);
    return f2(e);
  }
  resetThemes(e) {
    var t = g(e) ? 0 : ke(e, c2.__wbindgen_export_0), r = p;
    let o = c2.perspectiveviewerelement_resetThemes(this.ptr, t, r);
    return f2(o);
  }
  setThrottle(e) {
    c2.perspectiveviewerelement_setThrottle(this.ptr, !g(e), g(e) ? 0 : e);
  }
  toggleConfig(e) {
    let t = c2.perspectiveviewerelement_toggleConfig(this.ptr, g(e) ? 16777215 : e ? 1 : 0);
    return f2(t);
  }
  getAllPlugins() {
    let e = c2.perspectiveviewerelement_getAllPlugins(this.ptr);
    return f2(e);
  }
  getPlugin(e) {
    try {
      let d2 = c2.__wbindgen_add_to_stack_pointer(-16);
      var t = g(e) ? 0 : m(e, c2.__wbindgen_export_0, c2.__wbindgen_export_1), r = p;
      c2.perspectiveviewerelement_getPlugin(d2, this.ptr, t, r);
      var o = a2()[d2 / 4 + 0], s2 = a2()[d2 / 4 + 1], u = a2()[d2 / 4 + 2];
      if (u)
        throw f2(s2);
      return f2(o);
    } finally {
      c2.__wbindgen_add_to_stack_pointer(16);
    }
  }
  unsafeGetModel() {
    return c2.perspectiveviewerelement_unsafeGetModel(this.ptr);
  }
};
async function Ee(n2, e) {
  if (typeof Response == "function" && n2 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(n2, e);
      } catch (r) {
        if (n2.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", r);
        else
          throw r;
      }
    let t = await n2.arrayBuffer();
    return await WebAssembly.instantiate(t, e);
  } else {
    let t = await WebAssembly.instantiate(n2, e);
    return t instanceof WebAssembly.Instance ? { instance: t, module: n2 } : t;
  }
}
function se2() {
  let n2 = {};
  return n2.wbg = {}, n2.wbg.__wbindgen_is_undefined = function(e) {
    return _2(e) === void 0;
  }, n2.wbg.__wbindgen_in = function(e, t) {
    return _2(e) in _2(t);
  }, n2.wbg.__wbindgen_number_get = function(e, t) {
    let r = _2(t), o = typeof r == "number" ? r : void 0;
    _e2()[e / 8 + 1] = g(o) ? 0 : o, a2()[e / 4 + 0] = !g(o);
  }, n2.wbg.__wbindgen_boolean_get = function(e) {
    let t = _2(e);
    return typeof t == "boolean" ? t ? 1 : 0 : 2;
  }, n2.wbg.__wbindgen_string_get = function(e, t) {
    let r = _2(t), o = typeof r == "string" ? r : void 0;
    var s2 = g(o) ? 0 : m(o, c2.__wbindgen_export_0, c2.__wbindgen_export_1), u = p;
    a2()[e / 4 + 1] = u, a2()[e / 4 + 0] = s2;
  }, n2.wbg.__wbindgen_is_bigint = function(e) {
    return typeof _2(e) == "bigint";
  }, n2.wbg.__wbindgen_is_object = function(e) {
    let t = _2(e);
    return typeof t == "object" && t !== null;
  }, n2.wbg.__wbindgen_is_string = function(e) {
    return typeof _2(e) == "string";
  }, n2.wbg.__wbindgen_bigint_from_i64 = function(e) {
    return i2(e);
  }, n2.wbg.__wbindgen_bigint_from_u64 = function(e) {
    let t = BigInt.asUintN(64, e);
    return i2(t);
  }, n2.wbg.__wbindgen_error_new = function(e, t) {
    let r = new Error(w2(e, t));
    return i2(r);
  }, n2.wbg.__wbg_static_accessor_PSP_c3cc6465cd22dc65 = function() {
    return i2(x2);
  }, n2.wbg.__wbindgen_object_clone_ref = function(e) {
    let t = _2(e);
    return i2(t);
  }, n2.wbg.__wbindgen_jsval_eq = function(e, t) {
    return _2(e) === _2(t);
  }, n2.wbg.__wbindgen_string_new = function(e, t) {
    let r = w2(e, t);
    return i2(r);
  }, n2.wbg.__wbg_supportedValuesOf_7f9d607b73d4b93f = function(e) {
    let t = Intl.supportedValuesOf(_2(e));
    return i2(t);
  }, n2.wbg.__wbindgen_object_drop_ref = function(e) {
    f2(e);
  }, n2.wbg.__wbindgen_cb_drop = function(e) {
    let t = f2(e).original;
    return t.cnt-- == 1 ? (t.a = 0, true) : false;
  }, n2.wbg.__wbg_expressionschema_788fca34e22af890 = function(e) {
    let t = _2(e).expression_schema;
    return i2(t);
  }, n2.wbg.__wbg_restore_82330eb8b51f1c2e = function(e, t) {
    _2(e).restore(_2(t));
  }, n2.wbg.__wbindgen_is_null = function(e) {
    return _2(e) === null;
  }, n2.wbg.__wbg_contentRect_6f8b110706101237 = function(e) {
    let t = _2(e).contentRect;
    return i2(t);
  }, n2.wbg.__wbg_new_64deb56650054ff6 = function(e) {
    let t = new Z2(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_update_be3f5c16508431b0 = function() {
    return b2(function(e, t, r, o, s2, u, d2) {
      let l = _2(e).update(_2(t), r === 0 ? void 0 : o >>> 0, s2 === 0 ? void 0 : u >>> 0, d2 !== 0);
      return i2(l);
    }, arguments);
  }, n2.wbg.__wbg_draw_4eeb9a0dd4ffc75d = function() {
    return b2(function(e, t, r, o, s2, u, d2) {
      let l = _2(e).draw(_2(t), r === 0 ? void 0 : o >>> 0, s2 === 0 ? void 0 : u >>> 0, d2 !== 0);
      return i2(l);
    }, arguments);
  }, n2.wbg.__wbg_delete_f76c6d94e53ca8ee = function(e) {
    _2(e).delete();
  }, n2.wbg.__wbg_setrenderwarning_649c5c341cc50637 = function(e, t) {
    _2(e).render_warning = t !== 0;
  }, n2.wbg.__wbg_size_a7de7fac79238ca7 = function() {
    return b2(function(e) {
      let t = _2(e).size();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_columns_b24dd4bbefe3200b = function() {
    return b2(function(e) {
      let t = _2(e).columns();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_schema_af14e98ed1e4f1d5 = function() {
    return b2(function(e) {
      let t = _2(e).schema();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_makeport_8684f2db90086a39 = function() {
    return b2(function(e) {
      let t = _2(e).make_port();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_numtablerows_307b87e4fe1533a1 = function(e) {
    return _2(e).num_table_rows;
  }, n2.wbg.__wbg_numtablecolumns_bad80cff2495d41d = function(e) {
    return _2(e).num_table_columns;
  }, n2.wbg.__wbg_numviewrows_cfa9a57cb2ec99a9 = function(e) {
    return _2(e).num_view_rows;
  }, n2.wbg.__wbg_numviewcolumns_b3aaf0fbd9b3779d = function(e) {
    return _2(e).num_view_columns;
  }, n2.wbg.__wbg_errors_50b148fcb81ba283 = function(e) {
    let t = _2(e).errors;
    return i2(t);
  }, n2.wbg.__wbg_tocolumns_8eba54822424b891 = function() {
    return b2(function(e) {
      let t = _2(e).to_columns();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbindgen_number_new = function(e) {
    return i2(e);
  }, n2.wbg.__wbg_onupdate_65b7122464f09d3b = function(e, t) {
    _2(e).on_update(_2(t));
  }, n2.wbg.__wbg_removeupdate_0fadacb61b1462fb = function(e, t) {
    _2(e).remove_update(_2(t));
  }, n2.wbg.__wbg_expressionalias_3488a9b7aacadd11 = function(e) {
    let t = _2(e).expression_alias;
    return i2(t);
  }, n2.wbg.__wbg_validateexpressions_d9013e9e5cb9abf8 = function() {
    return b2(function(e, t) {
      let r = _2(e).validate_expressions(f2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_view_d586c6b29c5a3c92 = function() {
    return b2(function(e, t) {
      let r = _2(e).view(_2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_tocsv_be185c4fa437ea1e = function() {
    return b2(function(e, t) {
      let r = _2(e).to_csv(f2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_toarrow_63dec4b8c6da0f42 = function() {
    return b2(function(e) {
      let t = _2(e).to_arrow();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_dimensions_dd863c67d2e0c8e1 = function() {
    return b2(function(e) {
      let t = _2(e).dimensions();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_schema_65b19bbd170c69a6 = function() {
    return b2(function(e) {
      let t = _2(e).schema();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_delete_a4b8b5c5b3cc1e24 = function() {
    return b2(function(e) {
      let t = _2(e).delete();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_name_4333e7eabaf68eb0 = function(e, t) {
    let r = _2(t).name, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_category_d3d7ec259363ec41 = function(e, t) {
    let r = _2(t).category;
    var o = g(r) ? 0 : m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_maxcolumns_af24b7aad3c0ab5a = function(e, t) {
    let r = _2(t).max_columns;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_maxcells_7b09002042ca29b0 = function(e, t) {
    let r = _2(t).max_cells;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_renderwarning_4ac79c1e8e5ddbaa = function(e) {
    let t = _2(e).render_warning;
    return g(t) ? 16777215 : t ? 1 : 0;
  }, n2.wbg.__wbg_selectmode_c9535e91f95ba112 = function(e) {
    let t = _2(e).select_mode;
    return i2(t);
  }, n2.wbg.__wbg_minconfigcolumns_562e640bd275bbfa = function(e, t) {
    let r = _2(t).min_config_columns;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_configcolumnnames_749034786f1c8485 = function(e) {
    let t = _2(e).config_column_names;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_priority_c7ea73cb6bca0e6f = function(e, t) {
    let r = _2(t).priority;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_save_36ac3c95fbca4e4e = function(e) {
    let t = _2(e).save();
    return i2(t);
  }, n2.wbg.__wbg_restyle_6aec2b9f5f37ddd3 = function() {
    return b2(function(e, t) {
      let r = _2(e).restyle(_2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_resize_2eb3fc255ec5516a = function() {
    return b2(function(e) {
      let t = _2(e).resize();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_new_f3559e5f9b1b1de0 = function(e) {
    let t = new ee2(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_observe_8b4a2db443f0ef99 = function(e, t) {
    _2(e).observe(_2(t));
  }, n2.wbg.__wbg_unobserve_6b7a70e94afeeb9e = function(e, t) {
    _2(e).unobserve(_2(t));
  }, n2.wbg.__wbg_bootstrap_3adef9edb5d25859 = function(e, t, r, o, s2, u) {
    let d2 = te(_2(e), w2(t, r), w2(o, s2), f2(u));
    return i2(d2);
  }, n2.wbg.__wbg_listenerid_12315eee21527820 = function(e, t) {
    let r = _2(t).__yew_listener_id;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_setlistenerid_3183aae8fa5840fb = function(e, t) {
    _2(e).__yew_listener_id = t >>> 0;
  }, n2.wbg.__wbg_setsubtreeid_d32e6327eef1f7fc = function(e, t) {
    _2(e).__yew_subtree_id = t >>> 0;
  }, n2.wbg.__wbg_setcachekey_80183b7cfc421143 = function(e, t) {
    _2(e).__yew_subtree_cache_key = t >>> 0;
  }, n2.wbg.__wbg_subtreeid_e348577f7ef777e3 = function(e, t) {
    let r = _2(t).__yew_subtree_id;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_cachekey_b61393159c57fd7b = function(e, t) {
    let r = _2(t).__yew_subtree_cache_key;
    a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
  }, n2.wbg.__wbg_new_abda76e883ba8a5f = function() {
    let e = new Error();
    return i2(e);
  }, n2.wbg.__wbg_stack_658279fe44541cf6 = function(e, t) {
    let r = _2(t).stack, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_error_f851667af71bcfc6 = function(e, t) {
    try {
      console.error(w2(e, t));
    } finally {
      c2.__wbindgen_export_10(e, t);
    }
  }, n2.wbg.__wbindgen_jsval_loose_eq = function(e, t) {
    return _2(e) == _2(t);
  }, n2.wbg.__wbg_String_91fba7ded13ba54c = function(e, t) {
    let r = String(_2(t)), o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_getwithrefkey_15c62c2b8546208d = function(e, t) {
    let r = _2(e)[_2(t)];
    return i2(r);
  }, n2.wbg.__wbg_set_20cbc34131e76824 = function(e, t, r) {
    _2(e)[f2(t)] = f2(r);
  }, n2.wbg.__wbg_error_c0a7dc7e3b138aad = function(e, t) {
    var r = ie2(e, t).slice();
    c2.__wbindgen_export_10(e, t * 4), console.error(...r);
  }, n2.wbg.__wbg_newwithu8arraysequence_fede89c6795cc33e = function() {
    return b2(function(e) {
      let t = new Blob(_2(e));
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_newwithstrsequenceandoptions_710e3955c3af1c1f = function() {
    return b2(function(e, t) {
      let r = new Blob(_2(e), _2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_write_835b6fdc840018db = function(e, t) {
    let r = _2(e).write(_2(t));
    return i2(r);
  }, n2.wbg.__wbg_length_cb56788f94a79587 = function(e) {
    return _2(e).length;
  }, n2.wbg.__wbg_item_cd42d84b8a35d126 = function(e, t) {
    let r = _2(e).item(t >>> 0);
    return g(r) ? 0 : i2(r);
  }, n2.wbg.__wbg_length_eef5266d0b30c7d7 = function(e) {
    return _2(e).length;
  }, n2.wbg.__wbg_getPropertyValue_05e910529ab6e32a = function() {
    return b2(function(e, t, r, o) {
      let s2 = _2(t).getPropertyValue(w2(r, o)), u = m(s2, c2.__wbindgen_export_0, c2.__wbindgen_export_1), d2 = p;
      a2()[e / 4 + 1] = d2, a2()[e / 4 + 0] = u;
    }, arguments);
  }, n2.wbg.__wbg_item_4c111cb0cc721409 = function(e, t, r) {
    let o = _2(t).item(r >>> 0), s2 = m(o, c2.__wbindgen_export_0, c2.__wbindgen_export_1), u = p;
    a2()[e / 4 + 1] = u, a2()[e / 4 + 0] = s2;
  }, n2.wbg.__wbg_setProperty_21e2e7868b86a93e = function() {
    return b2(function(e, t, r, o, s2) {
      _2(e).setProperty(w2(t, r), w2(o, s2));
    }, arguments);
  }, n2.wbg.__wbg_instanceof_CssStyleRule_6e8af49f43f0b7ab = function(e) {
    let t;
    try {
      t = _2(e) instanceof CSSStyleRule;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_selectorText_62ef3bed9323aefc = function(e, t) {
    let r = _2(t).selectorText, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_style_71d307158ce61414 = function(e) {
    let t = _2(e).style;
    return i2(t);
  }, n2.wbg.__wbg_cssRules_d2d7f924cdcf6c4c = function() {
    return b2(function(e) {
      let t = _2(e).cssRules;
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_new_6ed14e2e6f8b5a03 = function() {
    return b2(function(e, t) {
      let r = new CustomEvent(w2(e, t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_newwitheventinitdict_3607f3d9a58509d5 = function() {
    return b2(function(e, t, r) {
      let o = new CustomEvent(w2(e, t), _2(r));
      return i2(o);
    }, arguments);
  }, n2.wbg.__wbg_setdropEffect_95e777b58aabb679 = function(e, t, r) {
    _2(e).dropEffect = w2(t, r);
  }, n2.wbg.__wbg_setData_7cbabb43b90bb947 = function() {
    return b2(function(e, t, r, o, s2) {
      _2(e).setData(w2(t, r), w2(o, s2));
    }, arguments);
  }, n2.wbg.__wbg_setDragImage_12deaa947a938ec4 = function(e, t, r, o) {
    _2(e).setDragImage(_2(t), r, o);
  }, n2.wbg.__wbg_readyState_70087d592b243b36 = function(e, t) {
    let r = _2(t).readyState, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_body_be46234bb33edd63 = function(e) {
    let t = _2(e).body;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_activeElement_4f793763dfcc99d7 = function(e) {
    let t = _2(e).activeElement;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_styleSheets_bdce530fbe6c099e = function(e) {
    let t = _2(e).styleSheets;
    return i2(t);
  }, n2.wbg.__wbg_fonts_dfcbe0032e3ae560 = function(e) {
    let t = _2(e).fonts;
    return i2(t);
  }, n2.wbg.__wbg_createElement_e2a0e21263eb5416 = function() {
    return b2(function(e, t, r) {
      let o = _2(e).createElement(w2(t, r));
      return i2(o);
    }, arguments);
  }, n2.wbg.__wbg_createElementNS_0047de728927ea00 = function() {
    return b2(function(e, t, r, o, s2) {
      let u = _2(e).createElementNS(t === 0 ? void 0 : w2(t, r), w2(o, s2));
      return i2(u);
    }, arguments);
  }, n2.wbg.__wbg_createTextNode_866e33a51b47f04c = function(e, t, r) {
    let o = _2(e).createTextNode(w2(t, r));
    return i2(o);
  }, n2.wbg.__wbg_width_f0cbf7dcbbe056da = function(e) {
    return _2(e).width;
  }, n2.wbg.__wbg_height_e46975153da440ae = function(e) {
    return _2(e).height;
  }, n2.wbg.__wbg_width_6762f1c0e103466e = function(e) {
    return _2(e).width;
  }, n2.wbg.__wbg_height_7228c2f4dd8e75bd = function(e) {
    return _2(e).height;
  }, n2.wbg.__wbg_top_98bc5382de3ec5d2 = function(e) {
    return _2(e).top;
  }, n2.wbg.__wbg_left_09342c290d46b4a6 = function(e) {
    return _2(e).left;
  }, n2.wbg.__wbg_get_36817a0b6bd3b305 = function(e, t, r, o) {
    let s2 = _2(t)[w2(r, o)];
    var u = g(s2) ? 0 : m(s2, c2.__wbindgen_export_0, c2.__wbindgen_export_1), d2 = p;
    a2()[e / 4 + 1] = d2, a2()[e / 4 + 0] = u;
  }, n2.wbg.__wbg_set_6903780050f0d9a9 = function() {
    return b2(function(e, t, r, o, s2) {
      _2(e)[w2(t, r)] = w2(o, s2);
    }, arguments);
  }, n2.wbg.__wbg_delete_d197db23212363f3 = function(e, t, r) {
    delete _2(e)[w2(t, r)];
  }, n2.wbg.__wbg_add_ea314b325ad27189 = function() {
    return b2(function(e, t) {
      _2(e).add(..._2(t));
    }, arguments);
  }, n2.wbg.__wbg_add_73f794d491a0e44f = function() {
    return b2(function(e, t, r) {
      _2(e).add(w2(t, r));
    }, arguments);
  }, n2.wbg.__wbg_remove_10fbe66510bfee98 = function() {
    return b2(function(e, t) {
      _2(e).remove(..._2(t));
    }, arguments);
  }, n2.wbg.__wbg_remove_f021903057d23f5e = function() {
    return b2(function(e, t, r) {
      _2(e).remove(w2(t, r));
    }, arguments);
  }, n2.wbg.__wbg_toggle_e36c504dbc3d7694 = function() {
    return b2(function(e, t, r) {
      return _2(e).toggle(w2(t, r));
    }, arguments);
  }, n2.wbg.__wbg_dataTransfer_445ade328cdd17c8 = function(e) {
    let t = _2(e).dataTransfer;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_instanceof_Element_cb847a3fc7b1b1a4 = function(e) {
    let t;
    try {
      t = _2(e) instanceof Element;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_namespaceURI_436d78f0f18e05c1 = function(e, t) {
    let r = _2(t).namespaceURI;
    var o = g(r) ? 0 : m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_tagName_92d4c105959ede9f = function(e, t) {
    let r = _2(t).tagName, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_classList_c4ebb3813d3a2f5d = function(e) {
    let t = _2(e).classList;
    return i2(t);
  }, n2.wbg.__wbg_scrollTop_296f89e3a4486106 = function(e) {
    return _2(e).scrollTop;
  }, n2.wbg.__wbg_scrollLeft_7d962ecb3da16acc = function(e) {
    return _2(e).scrollLeft;
  }, n2.wbg.__wbg_setscrollLeft_5124e83b21ab4746 = function(e, t) {
    _2(e).scrollLeft = t;
  }, n2.wbg.__wbg_clientWidth_1fa51f20a3bebbbf = function(e) {
    return _2(e).clientWidth;
  }, n2.wbg.__wbg_clientHeight_0fe149fdad1fe046 = function(e) {
    return _2(e).clientHeight;
  }, n2.wbg.__wbg_setinnerHTML_76167cda24d9b96b = function(e, t, r) {
    _2(e).innerHTML = w2(t, r);
  }, n2.wbg.__wbg_children_93bcc921a4904ad4 = function(e) {
    let t = _2(e).children;
    return i2(t);
  }, n2.wbg.__wbg_attachShadow_c071102f3dae5d9a = function() {
    return b2(function(e, t) {
      let r = _2(e).attachShadow(_2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_getAttribute_2c20e00a5cd314af = function(e, t, r, o) {
    let s2 = _2(t).getAttribute(w2(r, o));
    var u = g(s2) ? 0 : m(s2, c2.__wbindgen_export_0, c2.__wbindgen_export_1), d2 = p;
    a2()[e / 4 + 1] = d2, a2()[e / 4 + 0] = u;
  }, n2.wbg.__wbg_getBoundingClientRect_aaa701cbcb448965 = function(e) {
    let t = _2(e).getBoundingClientRect();
    return i2(t);
  }, n2.wbg.__wbg_hasAttribute_8d21af81e8fc2f17 = function(e, t, r) {
    return _2(e).hasAttribute(w2(t, r));
  }, n2.wbg.__wbg_matches_bda2f7b6478030a6 = function() {
    return b2(function(e, t, r) {
      return _2(e).matches(w2(t, r));
    }, arguments);
  }, n2.wbg.__wbg_releasePointerCapture_b0063bfa1890f17b = function() {
    return b2(function(e, t) {
      _2(e).releasePointerCapture(t);
    }, arguments);
  }, n2.wbg.__wbg_removeAttribute_ad7a5bf2eed30373 = function() {
    return b2(function(e, t, r) {
      _2(e).removeAttribute(w2(t, r));
    }, arguments);
  }, n2.wbg.__wbg_setAttribute_79c9562d32d05e66 = function() {
    return b2(function(e, t, r, o, s2) {
      _2(e).setAttribute(w2(t, r), w2(o, s2));
    }, arguments);
  }, n2.wbg.__wbg_setPointerCapture_5479dc0d082282b7 = function() {
    return b2(function(e, t) {
      _2(e).setPointerCapture(t);
    }, arguments);
  }, n2.wbg.__wbg_toggleAttribute_b07fecd058040a59 = function() {
    return b2(function(e, t, r, o) {
      return _2(e).toggleAttribute(w2(t, r), o !== 0);
    }, arguments);
  }, n2.wbg.__wbg_target_b629c177f9bee3da = function(e) {
    let t = _2(e).target;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_bubbles_80a0700df9c59aee = function(e) {
    return _2(e).bubbles;
  }, n2.wbg.__wbg_cancelBubble_c9a8182589205d54 = function(e) {
    return _2(e).cancelBubble;
  }, n2.wbg.__wbg_composedPath_d4428cc409ddd3e6 = function(e) {
    let t = _2(e).composedPath();
    return i2(t);
  }, n2.wbg.__wbg_preventDefault_16b2170b12f56317 = function(e) {
    _2(e).preventDefault();
  }, n2.wbg.__wbg_stopPropagation_7647c9985222f9b0 = function(e) {
    _2(e).stopPropagation();
  }, n2.wbg.__wbg_addEventListener_615d4590d38da1c9 = function() {
    return b2(function(e, t, r, o) {
      _2(e).addEventListener(w2(t, r), _2(o));
    }, arguments);
  }, n2.wbg.__wbg_addEventListener_cf5b03cd29763277 = function() {
    return b2(function(e, t, r, o, s2) {
      _2(e).addEventListener(w2(t, r), _2(o), _2(s2));
    }, arguments);
  }, n2.wbg.__wbg_dispatchEvent_615d1ccbba577081 = function() {
    return b2(function(e, t) {
      return _2(e).dispatchEvent(_2(t));
    }, arguments);
  }, n2.wbg.__wbg_removeEventListener_86fd19ed073cd1ed = function() {
    return b2(function(e, t, r, o) {
      _2(e).removeEventListener(w2(t, r), _2(o));
    }, arguments);
  }, n2.wbg.__wbg_instanceof_FontFace_52e8786298dcabeb = function(e) {
    let t;
    try {
      t = _2(e) instanceof FontFace;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_family_afd8897a6b516d76 = function(e, t) {
    let r = _2(t).family, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_weight_a1f1e299df7b3fa2 = function(e, t) {
    let r = _2(t).weight, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_loaded_02544538272a8a04 = function() {
    return b2(function(e) {
      let t = _2(e).loaded;
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_values_aafc66d1486c9292 = function(e) {
    let t = _2(e).values();
    return i2(t);
  }, n2.wbg.__wbg_next_92f073c7b53427b2 = function() {
    return b2(function(e) {
      let t = _2(e).next();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_item_2ab86c1e3cb70ed3 = function(e, t) {
    let r = _2(e).item(t >>> 0);
    return g(r) ? 0 : i2(r);
  }, n2.wbg.__wbg_getwithindex_aec05ea9d2417c75 = function(e, t) {
    let r = _2(e)[t >>> 0];
    return g(r) ? 0 : i2(r);
  }, n2.wbg.__wbg_scrollTop_99ac74051927ce93 = function(e) {
    return _2(e).scrollTop;
  }, n2.wbg.__wbg_setscrollTop_a800ac5312e75de8 = function(e, t) {
    _2(e).scrollTop = t;
  }, n2.wbg.__wbg_dataset_704ec547006a213c = function(e) {
    let t = _2(e).dataset;
    return i2(t);
  }, n2.wbg.__wbg_style_2141664e428fef46 = function(e) {
    let t = _2(e).style;
    return i2(t);
  }, n2.wbg.__wbg_offsetParent_fadc40e6ce156dc2 = function(e) {
    let t = _2(e).offsetParent;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_offsetWidth_56caa7d0f7e171a2 = function(e) {
    return _2(e).offsetWidth;
  }, n2.wbg.__wbg_offsetHeight_31cde48f5fbc2368 = function(e) {
    return _2(e).offsetHeight;
  }, n2.wbg.__wbg_blur_b94a30ed202c3612 = function() {
    return b2(function(e) {
      _2(e).blur();
    }, arguments);
  }, n2.wbg.__wbg_click_f3e37a4a2595187d = function(e) {
    _2(e).click();
  }, n2.wbg.__wbg_focus_6497e1b44dabfb24 = function() {
    return b2(function(e) {
      _2(e).focus();
    }, arguments);
  }, n2.wbg.__wbg_checked_44c09d0c819e33ad = function(e) {
    return _2(e).checked;
  }, n2.wbg.__wbg_setchecked_cbd6f423c4deba69 = function(e, t) {
    _2(e).checked = t !== 0;
  }, n2.wbg.__wbg_value_1f2c9e357d18d3ea = function(e, t) {
    let r = _2(t).value, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_setvalue_a706abe70dab1b65 = function(e, t, r) {
    _2(e).value = w2(t, r);
  }, n2.wbg.__wbg_selectedIndex_1e9fee59fa44bd02 = function(e) {
    return _2(e).selectedIndex;
  }, n2.wbg.__wbg_setvalue_7f698ba375d14330 = function(e, t, r) {
    _2(e).value = w2(t, r);
  }, n2.wbg.__wbg_value_00fb0fdc46959169 = function(e, t) {
    let r = _2(t).value, o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbg_setvalue_f92ff20dd33356a8 = function(e, t, r) {
    _2(e).value = w2(t, r);
  }, n2.wbg.__wbg_setselectionStart_dd9b85d67b4216ee = function() {
    return b2(function(e, t, r) {
      _2(e).selectionStart = t === 0 ? void 0 : r >>> 0;
    }, arguments);
  }, n2.wbg.__wbg_selectionEnd_cd4e4c1adfe0d246 = function() {
    return b2(function(e, t) {
      let r = _2(t).selectionEnd;
      a2()[e / 4 + 1] = g(r) ? 0 : r, a2()[e / 4 + 0] = !g(r);
    }, arguments);
  }, n2.wbg.__wbg_setselectionEnd_7c74ebb970b35942 = function() {
    return b2(function(e, t, r) {
      _2(e).selectionEnd = t === 0 ? void 0 : r >>> 0;
    }, arguments);
  }, n2.wbg.__wbg_keyCode_b33194be2ceec53b = function(e) {
    return _2(e).keyCode;
  }, n2.wbg.__wbg_shiftKey_31e62e9d172b26f0 = function(e) {
    return _2(e).shiftKey;
  }, n2.wbg.__wbg_clientX_35f23f953e04ec0e = function(e) {
    return _2(e).clientX;
  }, n2.wbg.__wbg_clientY_8104e462abc0b3ec = function(e) {
    return _2(e).clientY;
  }, n2.wbg.__wbg_offsetX_413d9f02022e72ad = function(e) {
    return _2(e).offsetX;
  }, n2.wbg.__wbg_offsetY_488f80a0a9666028 = function(e) {
    return _2(e).offsetY;
  }, n2.wbg.__wbg_shiftKey_fdd99b6df96e25c5 = function(e) {
    return _2(e).shiftKey;
  }, n2.wbg.__wbg_button_a1c470d5e4c997f2 = function(e) {
    return _2(e).button;
  }, n2.wbg.__wbg_relatedTarget_66d2be52fe1361a2 = function(e) {
    let t = _2(e).relatedTarget;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_clipboard_72ae7717d527a067 = function(e) {
    let t = _2(e).clipboard;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_isConnected_93fb8849454bdb93 = function(e) {
    return _2(e).isConnected;
  }, n2.wbg.__wbg_parentNode_e81e6d5dc2fc35b0 = function(e) {
    let t = _2(e).parentNode;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_parentElement_0e8c9afce5cb9d6e = function(e) {
    let t = _2(e).parentElement;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_lastChild_e0fcecf63df5f824 = function(e) {
    let t = _2(e).lastChild;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_nextSibling_653f43ab9380175f = function(e) {
    let t = _2(e).nextSibling;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_setnodeValue_10d5890cd7e3f998 = function(e, t, r) {
    _2(e).nodeValue = t === 0 ? void 0 : w2(t, r);
  }, n2.wbg.__wbg_settextContent_19dc6a6146112f16 = function(e, t, r) {
    _2(e).textContent = t === 0 ? void 0 : w2(t, r);
  }, n2.wbg.__wbg_appendChild_b8199dc1655c852d = function() {
    return b2(function(e, t) {
      let r = _2(e).appendChild(_2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_cloneNode_4c5e9ec3203eb137 = function() {
    return b2(function(e, t) {
      let r = _2(e).cloneNode(t !== 0);
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_contains_d7dbb4dfe10d9428 = function(e, t) {
    return _2(e).contains(_2(t));
  }, n2.wbg.__wbg_getRootNode_d1b23203c654b1e5 = function(e) {
    let t = _2(e).getRootNode();
    return i2(t);
  }, n2.wbg.__wbg_insertBefore_77a7d032a91abf86 = function() {
    return b2(function(e, t, r) {
      let o = _2(e).insertBefore(_2(t), _2(r));
      return i2(o);
    }, arguments);
  }, n2.wbg.__wbg_removeChild_794db72cbb6f21d3 = function() {
    return b2(function(e, t) {
      let r = _2(e).removeChild(_2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_getEntriesByName_bf69b2da670dc020 = function(e, t, r, o, s2) {
    let u = _2(e).getEntriesByName(w2(t, r), w2(o, s2));
    return i2(u);
  }, n2.wbg.__wbg_mark_88960258286b2684 = function() {
    return b2(function(e, t, r) {
      _2(e).mark(w2(t, r));
    }, arguments);
  }, n2.wbg.__wbg_measure_6cfb450367bf8564 = function() {
    return b2(function(e, t, r, o, s2) {
      _2(e).measure(w2(t, r), w2(o, s2));
    }, arguments);
  }, n2.wbg.__wbg_now_c644db5194be8437 = function(e) {
    return _2(e).now();
  }, n2.wbg.__wbg_startTime_0f0e575a7b97165d = function(e) {
    return _2(e).startTime;
  }, n2.wbg.__wbg_pointerId_d2caae4465ba386f = function(e) {
    return _2(e).pointerId;
  }, n2.wbg.__wbg_instanceof_ShadowRoot_7088dfa874f5499c = function(e) {
    let t;
    try {
      t = _2(e) instanceof ShadowRoot;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_host_33f0224f975dc46a = function(e) {
    let t = _2(e).host;
    return i2(t);
  }, n2.wbg.__wbg_length_551f829bae645f61 = function(e) {
    return _2(e).length;
  }, n2.wbg.__wbg_item_494a4f50d5ab293f = function(e, t) {
    let r = _2(e).item(t >>> 0);
    return g(r) ? 0 : i2(r);
  }, n2.wbg.__wbg_which_0dd05aa408002d08 = function(e) {
    return _2(e).which;
  }, n2.wbg.__wbg_createObjectURL_adf40f2719ba3b9b = function() {
    return b2(function(e, t) {
      let r = URL.createObjectURL(_2(t)), o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
      a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
    }, arguments);
  }, n2.wbg.__wbg_instanceof_Window_e266f02eee43b570 = function(e) {
    let t;
    try {
      t = _2(e) instanceof Window;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_document_950215a728589a2d = function(e) {
    let t = _2(e).document;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_navigator_b18e629f7f0b75fa = function(e) {
    let t = _2(e).navigator;
    return i2(t);
  }, n2.wbg.__wbg_innerWidth_7e9d12e05bcb598e = function() {
    return b2(function(e) {
      let t = _2(e).innerWidth;
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_innerHeight_3ef25a30618357e0 = function() {
    return b2(function(e) {
      let t = _2(e).innerHeight;
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_performance_8629f414811abc46 = function(e) {
    let t = _2(e).performance;
    return g(t) ? 0 : i2(t);
  }, n2.wbg.__wbg_getComputedStyle_ae586cab8f5c81f8 = function() {
    return b2(function(e, t) {
      let r = _2(e).getComputedStyle(_2(t));
      return g(r) ? 0 : i2(r);
    }, arguments);
  }, n2.wbg.__wbg_requestAnimationFrame_afe426b568f84138 = function() {
    return b2(function(e, t) {
      return _2(e).requestAnimationFrame(_2(t));
    }, arguments);
  }, n2.wbg.__wbg_setTimeout_6609c9aa64f32bfc = function() {
    return b2(function(e, t, r) {
      return _2(e).setTimeout(_2(t), r);
    }, arguments);
  }, n2.wbg.__wbg_debug_7960d327fd96f71a = function(e, t, r, o) {
    console.debug(_2(e), _2(t), _2(r), _2(o));
  }, n2.wbg.__wbg_error_fe807da27c4a4ced = function(e) {
    console.error(_2(e));
  }, n2.wbg.__wbg_error_62b53e8733a5a02b = function(e, t, r) {
    console.error(_2(e), _2(t), _2(r));
  }, n2.wbg.__wbg_error_fd84ca2a8a977774 = function(e, t, r, o) {
    console.error(_2(e), _2(t), _2(r), _2(o));
  }, n2.wbg.__wbg_info_5566be377f5b52ae = function(e, t, r, o) {
    console.info(_2(e), _2(t), _2(r), _2(o));
  }, n2.wbg.__wbg_trace_62f71326d384be35 = function(e, t, r, o) {
    console.trace(_2(e), _2(t), _2(r), _2(o));
  }, n2.wbg.__wbg_warn_e57696dbb3977030 = function(e) {
    console.warn(_2(e));
  }, n2.wbg.__wbg_warn_48cbddced45e5414 = function(e, t, r, o) {
    console.warn(_2(e), _2(t), _2(r), _2(o));
  }, n2.wbg.__wbindgen_is_function = function(e) {
    return typeof _2(e) == "function";
  }, n2.wbg.__wbg_self_e7c1f827057f6584 = function() {
    return b2(function() {
      let e = self.self;
      return i2(e);
    }, arguments);
  }, n2.wbg.__wbg_window_a09ec664e14b1b81 = function() {
    return b2(function() {
      let e = window.window;
      return i2(e);
    }, arguments);
  }, n2.wbg.__wbg_globalThis_87cbb8506fecf3a9 = function() {
    return b2(function() {
      let e = globalThis.globalThis;
      return i2(e);
    }, arguments);
  }, n2.wbg.__wbg_global_c85a9259e621f3db = function() {
    return b2(function() {
      let e = global.global;
      return i2(e);
    }, arguments);
  }, n2.wbg.__wbg_newnoargs_2b8b6bd7753c76ba = function(e, t) {
    let r = new Function(w2(e, t));
    return i2(r);
  }, n2.wbg.__wbg_new_b525de17f44a8943 = function() {
    let e = new Array();
    return i2(e);
  }, n2.wbg.__wbg_new_f841cc6f2098f4b5 = function() {
    return i2(/* @__PURE__ */ new Map());
  }, n2.wbg.__wbg_next_b7d530c04fd8b217 = function(e) {
    let t = _2(e).next;
    return i2(t);
  }, n2.wbg.__wbg_value_6ac8da5cc5b3efda = function(e) {
    let t = _2(e).value;
    return i2(t);
  }, n2.wbg.__wbg_iterator_55f114446221aa5a = function() {
    return i2(Symbol.iterator);
  }, n2.wbg.__wbg_new_f9876326328f45ed = function() {
    let e = new Object();
    return i2(e);
  }, n2.wbg.__wbg_new_1a153916efe94e88 = function(e, t) {
    let r = new Intl.DateTimeFormat(_2(e), _2(t));
    return i2(r);
  }, n2.wbg.__wbg_at_155d8a5ce48004cd = function(e, t) {
    let r = _2(e).at(t);
    return i2(r);
  }, n2.wbg.__wbg_get_27fe3dac1c4d0224 = function(e, t) {
    let r = _2(e)[t >>> 0];
    return i2(r);
  }, n2.wbg.__wbg_set_17224bc548dd1d7b = function(e, t, r) {
    _2(e)[t >>> 0] = f2(r);
  }, n2.wbg.__wbg_from_67ca20fa722467e6 = function(e) {
    let t = Array.from(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_isArray_39d28997bf6b96b4 = function(e) {
    return Array.isArray(_2(e));
  }, n2.wbg.__wbg_length_e498fbc24f9c1d4f = function(e) {
    return _2(e).length;
  }, n2.wbg.__wbg_push_49c286f04dd3bf59 = function(e, t) {
    return _2(e).push(_2(t));
  }, n2.wbg.__wbg_instanceof_ArrayBuffer_a69f02ee4c4f5065 = function(e) {
    let t;
    try {
      t = _2(e) instanceof ArrayBuffer;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_slice_cd850bbc3b09b547 = function(e, t, r) {
    let o = _2(e).slice(t >>> 0, r >>> 0);
    return i2(o);
  }, n2.wbg.__wbg_instanceof_Error_749a7378f4439ee0 = function(e) {
    let t;
    try {
      t = _2(e) instanceof Error;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_message_a95c3ef248e4b57a = function(e) {
    let t = _2(e).message;
    return i2(t);
  }, n2.wbg.__wbg_call_95d1ea488d03e4e8 = function() {
    return b2(function(e, t) {
      let r = _2(e).call(_2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_call_9495de66fdbe016b = function() {
    return b2(function(e, t, r) {
      let o = _2(e).call(_2(t), _2(r));
      return i2(o);
    }, arguments);
  }, n2.wbg.__wbg_set_388c4c6422704173 = function(e, t, r) {
    let o = _2(e).set(_2(t), _2(r));
    return i2(o);
  }, n2.wbg.__wbg_next_88560ec06a094dea = function() {
    return b2(function(e) {
      let t = _2(e).next();
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_done_1ebec03bbd919843 = function(e) {
    return _2(e).done;
  }, n2.wbg.__wbg_isSafeInteger_8c4789029e885159 = function(e) {
    return Number.isSafeInteger(_2(e));
  }, n2.wbg.__wbg_getTimezoneOffset_2a6b27fb18493a56 = function(e) {
    return _2(e).getTimezoneOffset();
  }, n2.wbg.__wbg_new_f127e324c1313064 = function(e) {
    let t = new Date(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_entries_4e1315b774245952 = function(e) {
    let t = Object.entries(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_is_8f1618fe9a4fd388 = function(e, t) {
    return Object.is(_2(e), _2(t));
  }, n2.wbg.__wbg_keys_60443f4f867207f9 = function(e) {
    let t = Object.keys(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_get_baf4855f9a986186 = function() {
    return b2(function(e, t) {
      let r = Reflect.get(_2(e), _2(t));
      return i2(r);
    }, arguments);
  }, n2.wbg.__wbg_has_3feea89d34bd7ad5 = function() {
    return b2(function(e, t) {
      return Reflect.has(_2(e), _2(t));
    }, arguments);
  }, n2.wbg.__wbg_set_6aa458a4ebdb65cb = function() {
    return b2(function(e, t, r) {
      return Reflect.set(_2(e), _2(t), _2(r));
    }, arguments);
  }, n2.wbg.__wbg_buffer_cf65c07de34b9a08 = function(e) {
    let t = _2(e).buffer;
    return i2(t);
  }, n2.wbg.__wbg_stringify_029a979dfb73aa17 = function() {
    return b2(function(e) {
      let t = JSON.stringify(_2(e));
      return i2(t);
    }, arguments);
  }, n2.wbg.__wbg_resolvedOptions_8d355f78be16b46d = function(e) {
    let t = _2(e).resolvedOptions();
    return i2(t);
  }, n2.wbg.__wbg_instanceof_Promise_4333c4e5587e8936 = function(e) {
    let t;
    try {
      t = _2(e) instanceof Promise;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_new_9d3a9ce4282a18a8 = function(e, t) {
    try {
      var r = { a: e, b: t }, o = (u, d2) => {
        let l = r.a;
        r.a = 0;
        try {
          return Pe(l, r.b, u, d2);
        } finally {
          r.a = l;
        }
      };
      let s2 = new Promise(o);
      return i2(s2);
    } finally {
      r.a = r.b = 0;
    }
  }, n2.wbg.__wbg_resolve_fd40f858d9db1a04 = function(e) {
    let t = Promise.resolve(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_then_ec5db6d509eb475f = function(e, t) {
    let r = _2(e).then(_2(t));
    return i2(r);
  }, n2.wbg.__wbg_then_f753623316e2873a = function(e, t, r) {
    let o = _2(e).then(_2(t), _2(r));
    return i2(o);
  }, n2.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5 = function(e, t, r) {
    let o = new Uint8Array(_2(e), t >>> 0, r >>> 0);
    return i2(o);
  }, n2.wbg.__wbg_new_537b7341ce90bb31 = function(e) {
    let t = new Uint8Array(_2(e));
    return i2(t);
  }, n2.wbg.__wbg_instanceof_Uint8Array_01cebe79ca606cca = function(e) {
    let t;
    try {
      t = _2(e) instanceof Uint8Array;
    } catch {
      t = false;
    }
    return t;
  }, n2.wbg.__wbg_buffer_5f1fc856188c4b44 = function(e) {
    let t = _2(e).buffer;
    return i2(t);
  }, n2.wbg.__wbg_length_27a2afe8ab42b09f = function(e) {
    return _2(e).length;
  }, n2.wbg.__wbg_byteLength_29d6f6f493852fd4 = function(e) {
    return _2(e).byteLength;
  }, n2.wbg.__wbg_byteOffset_85a4ff4bd899e78b = function(e) {
    return _2(e).byteOffset;
  }, n2.wbg.__wbg_set_17499e8aa4003ebd = function(e, t, r) {
    _2(e).set(_2(t), r >>> 0);
  }, n2.wbg.__wbindgen_bigint_get_as_i64 = function(e, t) {
    let r = _2(t), o = typeof r == "bigint" ? r : void 0;
    le()[e / 8 + 1] = g(o) ? BigInt(0) : o, a2()[e / 4 + 0] = !g(o);
  }, n2.wbg.__wbindgen_debug_string = function(e, t) {
    let r = N2(_2(t)), o = m(r, c2.__wbindgen_export_0, c2.__wbindgen_export_1), s2 = p;
    a2()[e / 4 + 1] = s2, a2()[e / 4 + 0] = o;
  }, n2.wbg.__wbindgen_throw = function(e, t) {
    throw new Error(w2(e, t));
  }, n2.wbg.__wbindgen_memory = function() {
    let e = c2.memory;
    return i2(e);
  }, n2.wbg.__wbindgen_closure_wrapper3628 = function(e, t, r) {
    let o = W2(e, t, 40, pe);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper3630 = function(e, t, r) {
    let o = k2(e, t, 40, ne2);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper3632 = function(e, t, r) {
    let o = k2(e, t, 40, ne2);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper3634 = function(e, t, r) {
    let o = W2(e, t, 40, re);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper3636 = function(e, t, r) {
    let o = k2(e, t, 42, me);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper3638 = function(e, t, r) {
    let o = W2(e, t, 42, re);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper9893 = function(e, t, r) {
    let o = k2(e, t, 2352, ye);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper9917 = function(e, t, r) {
    let o = k2(e, t, 2357, he);
    return i2(o);
  }, n2.wbg.__wbindgen_closure_wrapper9978 = function(e, t, r) {
    let o = k2(e, t, 2373, xe);
    return i2(o);
  }, n2;
}
function ae2(n2, e) {
  return c2 = n2.exports, ue.__wbindgen_wasm_module = e, I2 = null, j2 = null, S2 = null, M2 = null, R2 = null, c2;
}
function Le(n2) {
  let e = se2();
  n2 instanceof WebAssembly.Module || (n2 = new WebAssembly.Module(n2));
  let t = new WebAssembly.Instance(n2, e);
  return ae2(t, n2);
}
async function ue(n2) {
  let e = se2();
  (typeof n2 == "string" || typeof Request == "function" && n2 instanceof Request || typeof URL == "function" && n2 instanceof URL) && (n2 = fetch(n2));
  let { instance: t, module: r } = await Ee(await n2, e);
  return ae2(t, r);
}
var q2 = ue;
function J2(n2, e) {
  return function(t, r) {
    let o = 0;
    for (let s2 of e)
      if (s2 in t) {
        if (o++ > 0)
          throw new Error(`Duplicate "${n2}" fields`);
        t[n2] = t[s2], s2 !== n2 && (delete t[s2], r.warn && console.warn(`Deprecated perspective attribute "${s2}" renamed "${n2}"`));
      }
    return t;
  };
}
var Se = J2("group_by", ["group_by", "row_pivots", "row-pivot", "row-pivots", "row_pivot"]);
var Re = J2("split_by", ["split_by", "column_pivots", "column-pivot", "column-pivots", "column_pivot", "col_pivots", "col-pivot", "col-pivots", "col_pivot"]);
var Ie = J2("filter", ["filter", "filters"]);
window.addEventListener("unhandledrejection", (n2) => {
  n2.reason?.message === "View method cancelled" && n2.preventDefault();
});
function K2(n2) {
  return new Uint32Array(n2.slice(0, 4))[0] == 559903;
}
async function ze() {
  let n2 = await perspective_bg_default2, e = [], t = 0, r = new Decompress((u) => {
    u && (t += u.byteLength, e.push(u));
  });
  if (n2 instanceof URL || typeof n2 == "string") {
    let d2 = (await fetch(n2.toString())).body?.getReader(), l = 0;
    if (d2 !== void 0)
      for (; ; ) {
        let { value: v2, done: Q5 } = await d2.read();
        if (Q5 || v2 === void 0)
          break;
        l === 0 && K2(v2?.buffer) || l === 1 ? (l = 1, r.push(v2, Q5)) : (l = 2, t += v2.byteLength, e.push(v2));
      }
  } else if (n2 instanceof Uint8Array)
    K2(n2.buffer) ? r.push(n2, true) : (t = n2.byteLength, e = [n2]);
  else {
    let u = new Uint8Array(n2);
    K2(n2) ? r.push(u, true) : (t = u.byteLength, e = [u]);
  }
  let o = 0, s2 = new Uint8Array(t);
  for (let u of e)
    s2.set(u, o), o += u.byteLength;
  return await q2(s2), X2(), x2;
}
var G2 = ze();
var C2 = class extends HTMLElement {
  constructor() {
    super();
    this.__load_wasm();
  }
  async __load_wasm() {
    await G2, this._instance === void 0 && (this._instance = new h(this));
  }
};
var De = h.prototype;
var Xe = Object.getOwnPropertyNames(De);
for (let n2 of Xe)
  Object.defineProperty(C2.prototype, n2, { value: async function(...e) {
    return await this.__load_wasm(), await this._instance[n2].call(this._instance, ...e);
  } });
for (let n2 of ["registerPlugin", "getExprTKCommands"])
  Object.defineProperty(C2, n2, { value: async function(...e) {
    let t = await G2;
    return t[n2].call(t, ...e);
  } });
customElements.define("perspective-viewer", C2);

// node_modules/regular-table/dist/esm/regular-table.js
var z3 = /* @__PURE__ */ new WeakMap();
var Q2 = true;
var ct = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
var it = ct ? 5e6 : 1e7;
var V3 = 0;
var D3 = 0;
var st = performance.now();
function ot() {
  let u = performance.now(), t = u - st, e = V3, i3 = D3 * 1e3 / t, s2 = 1e3 / e, o = D3;
  return V3 = 0, D3 = 0, st = u, { avg: e, real_fps: i3, virtual_fps: s2, num_frames: o, elapsed: t };
}
function lt(u) {
  V3 = (V3 * D3 + u) / (D3 + 1), D3 += 1;
}
var F3 = (u, ...t) => u.map((e, i3) => [e, t[i3]]).flat().filter((e) => !!e).join("");
var dt = () => {
  let u, t = new Promise((e) => {
    u = e;
  });
  return t.resolve = u, t;
};
var C3 = /* @__PURE__ */ new Map();
async function at(u) {
  return await new Promise(requestAnimationFrame), await C3.get(u);
}
async function N3(u, t) {
  if (C3.has(u) && (await C3.get(u), C3.has(u))) {
    await C3.get(u);
    return;
  }
  C3.set(u, dt());
  try {
    return await t();
  } finally {
    let e = C3.get(u);
    C3.delete(u), e.resolve();
  }
}
var _t = ":host{position:absolute;top:0px;left:0px;right:0px;bottom:0px;overflow:scroll;overflow-anchor:none;overscroll-behavior:none;-webkit-overflow-scrolling:touch;}div.rt-virtual-panel{position:absolute;top:0;left:0;right:0;pointer-events:none;}div.rt-scroll-table-clip{position:sticky;contain:strict;overflow-anchor:none;width:100%;height:100%;}div.rt-tree-container{display:flex;align-items:center;height:100%;}slot{position:absolute;overflow:hidden;overflow-anchor:none;}";
var rt = ":host ::slotted(table){--regular-table--transform-x:0px;--regular-table--transform-y:0px;--regular-table--clip-x:0px;--regular-table--clip-y:0px;}";
var Y3 = class extends HTMLElement {
  create_shadow_dom() {
    this.attachShadow({ mode: "open" });
    let t = "<slot></slot>";
    this.shadowRoot.innerHTML = F3`
            <style>
                ${_t}
            </style>
            <style>
                ${rt}
            </style>
            <div class="rt-virtual-panel"></div>
            <div class="rt-scroll-table-clip">
                ${t}
            </div>
        `;
    let [, e, i3, s2] = this.shadowRoot.children;
    this._sub_cell_style = e, this._table_clip = s2, this._virtual_panel = i3, this._setup_virtual_scroll();
  }
  _setup_virtual_scroll() {
    this._table_clip && (this._virtual_mode === "both" || this._virtual_mode === "vertical" ? this._table_clip.style.top = "0px" : this._table_clip.style.removeProperty("top"), this._virtual_mode === "both" || this._virtual_mode === "horizontal" ? this._table_clip.style.left = "0px" : this._table_clip.style.removeProperty("left"), this._virtual_mode !== "both" ? this._table_clip.style.contain = "none" : this._table_clip.style.removeProperty("contain"));
  }
  _calculate_viewport(t, e) {
    let { start_row: i3, end_row: s2 } = this._calculate_row_range(t), { start_col: o, end_col: l } = this._calculate_column_range(e);
    return this._nrows = t, { start_col: o, end_col: l, start_row: i3, end_row: s2 };
  }
  _calculate_row_range(t) {
    let { height: e } = this._container_size, i3 = this._column_sizes.row_height || 19, s2 = this._view_cache.config.column_pivots.length, o = Math.max(1, this._virtual_panel.offsetHeight - this.clientHeight), l = Math.max(Math.ceil(this.scrollTop), 0) / o, r = e / i3 - s2, h2 = Math.max(0, Math.ceil((t || 0) - r)) * l, n2 = Math.max(0, Math.min(h2 + r, t));
    return { start_row: h2, end_row: n2 };
  }
  _calc_start_column() {
    let t = this._view_cache.config.row_pivots.length, e = 0, i3 = 0, s2 = 0;
    for (; i3 < this.scrollLeft; ) {
      let o = this._column_sizes.indices[e + t];
      s2 = this.scrollLeft - i3, e += 1, i3 += o !== void 0 ? o : 60;
    }
    return e += s2 / (this._column_sizes.indices[e + t - 1] || 60), Math.max(0, e - 1);
  }
  _calculate_column_range(t) {
    if (this._virtual_mode === "none" || this._virtual_mode === "vertical")
      return { start_col: 0, end_col: 1 / 0 };
    {
      let e = this._calc_start_column(), i3 = this.table_model.num_columns() || Math.min(t, Math.ceil(this._container_size.width / 60)), s2 = e + i3 + 1;
      return { start_col: e, end_col: s2 };
    }
  }
  _max_scroll_column(t) {
    let e = 0;
    if (this._view_cache.config.row_pivots.length > 0)
      for (let o of this._column_sizes.indices.slice(0, this._view_cache.config.row_pivots.length))
        e += o;
    let i3 = this._view_cache.config.row_pivots.length, s2 = t;
    for (; e < this._container_size.width && s2 >= 0; )
      s2--, e += this._column_sizes.indices[s2 + i3] || 60;
    return Math.min(t - 1, s2 + 1);
  }
  _validate_viewport({ start_col: t, end_col: e, start_row: i3, end_row: s2 }) {
    i3 = Math.floor(i3), s2 = Math.ceil(s2), t = Math.floor(t), e = Math.ceil(e);
    let o = this._start_col !== t, l = this._start_row !== i3 || this._end_row !== s2 || this._end_col !== e;
    return this._start_col = t, this._end_col = e, this._start_row = i3, this._end_row = s2, { invalid_column: o, invalid_row: l };
  }
  _calc_scrollable_column_width(t) {
    let e = this._view_cache.config.row_pivots.length, i3 = this._max_scroll_column(t), s2 = e, o = 0;
    for (; s2 < i3 + e; )
      o += this._column_sizes.indices[s2] || 60, s2++;
    return o;
  }
  _update_virtual_panel_width(t, e) {
    if (t)
      if (this._virtual_mode === "vertical" || this._virtual_mode === "none")
        this._virtual_panel.style.width = this._column_sizes.indices.reduce((i3, s2) => i3 + s2, 0) + "px";
      else {
        let i3 = this._calc_scrollable_column_width(e);
        if (i3 !== 0) {
          let s2 = this._container_size.width + i3 + 2;
          this._virtual_panel.style.width = s2 + "px";
        } else
          this._virtual_panel.style.width = "1px";
      }
  }
  _update_virtual_panel_height(t) {
    let { row_height: e = 19 } = this._column_sizes, i3 = this._view_cache.config.column_pivots.length * e, s2;
    if (this._virtual_mode === "horizontal" || this._virtual_mode === "none")
      s2 = t * e + i3;
    else {
      let o = this.clientHeight / (this._table_clip.offsetHeight - i3);
      s2 = Math.min(it, t * e * o);
    }
    this._virtual_panel.style.height = `${s2}px`;
  }
  async draw(t = {}) {
    return typeof t.throttle < "u" && !t.throttle ? await nt.call(this, [t]) : await N3(this, () => nt.call(this, [t]));
  }
  async _draw_flush() {
    await at(this);
  }
  update_sub_cell_offset(t) {
    let e = this._column_sizes.row_height * (t.start_row % 1) || 0, i3 = this._column_sizes.indices[(this.table_model._row_headers_length || 0) + Math.floor(t.start_col)] * (t.start_col % 1) || 0, s2 = this._sub_cell_style.sheet?.cssRules[0].style;
    s2 && (s2.setProperty("--regular-table--clip-x", `${i3}px`), s2.setProperty("--regular-table--clip-y", `${e}px`), s2.setProperty("--regular-table--transform-x", `-${i3}px`), s2.setProperty("--regular-table--transform-y", `-${e}px`));
  }
};
async function nt(u) {
  let t = Q2 && performance.now(), { invalid_viewport: e = true, preserve_width: i3 = false } = u, { num_columns: s2, num_rows: o, row_height: l } = await this._view_cache.view(0, 0, 0, 0);
  this._container_size = { width: this._virtual_mode === "none" || this._virtual_mode === "vertical" ? 1 / 0 : this._table_clip.clientWidth, height: this._virtual_mode === "none" || this._virtual_mode === "horizontal" ? 1 / 0 : this._table_clip.clientHeight }, this._update_virtual_panel_height(o), i3 || this._update_virtual_panel_width(e, s2);
  let r = this._calculate_viewport(o, s2), { invalid_row: a4, invalid_column: f3 } = this._validate_viewport(r);
  if (this._invalid_schema || a4 || f3 || e) {
    let h2 = [], n2 = true;
    for await (let c6 of this.table_model.draw(this._container_size, this._view_cache, this._selected_id, i3, r, s2)) {
      c6 !== void 0 && (h2 = h2.concat(c6)), n2 && (this.update_sub_cell_offset(r), n2 = false), this._is_styling = true;
      let g2 = this._style_callbacks;
      for (let d2 of g2)
        await d2({ detail: this });
      if (this._is_styling = false, !this._invalidated && c6 !== void 0)
        break;
      this._invalidated = false;
    }
    this.table_model.autosize_cells(h2, l), this.table_model.header.reset_header_cache(), i3 || this._update_virtual_panel_width(this._invalid_schema || f3, s2), this._invalid_schema = false;
  } else
    this.update_sub_cell_offset(r);
  Q2 && lt(performance.now() - t);
}
var mt = false;
var j3 = class extends Y3 {
  register_listeners() {
    this.addEventListener("mousedown", this._on_click_or_dblclick.bind(this)), this.addEventListener("scroll", this._on_scroll.bind(this), { passive: true }), this._register_glitch_scroll_listeners();
  }
  async _on_scroll(t) {
    t.stopPropagation(), await this.draw({ invalid_viewport: false }), this.dispatchEvent(new CustomEvent("regular-table-scroll"));
  }
  _register_glitch_scroll_listeners() {
    this.addEventListener("mousewheel", this._on_mousewheel.bind(this)), mt && (this.addEventListener("touchmove", this._on_touchmove.bind(this)), this.addEventListener("touchstart", this._on_touchstart.bind(this), { passive: true }));
  }
  _on_mousewheel(t) {
    if (!window.safari)
      return;
    let { clientWidth: e, clientHeight: i3, scrollTop: s2, scrollLeft: o } = this;
    t.preventDefault(), t.returnValue = false;
    let l = Math.max(1, this._virtual_panel.offsetHeight - i3), r = Math.max(1, this._virtual_panel.offsetWidth - e);
    this.scrollTop = Math.max(0, Math.min(l, s2 + t.deltaY)), this.scrollLeft = Math.max(0, Math.min(r, o + t.deltaX)), this._on_scroll(t);
  }
  _on_touchmove(t) {
    t.stopPropagation(), t.preventDefault(), t.returnValue = false;
    let { clientWidth: e, clientHeight: i3 } = this, s2 = Math.max(1, this._virtual_panel.offsetHeight - i3), o = Math.max(1, this._virtual_panel.offsetWidth - e);
    this.scrollTop = Math.min(s2, this._memo_scroll_top + (this._memo_touch_startY - t.touches[0].pageY)), this.scrollLeft = Math.min(o, this._memo_scroll_left + (this._memo_touch_startX - t.touches[0].pageX)), this._on_scroll(t);
  }
  _on_touchstart(t) {
    this._memo_touch_startY = t.touches[0].pageY, this._memo_touch_startX = t.touches[0].pageX, this._memo_scroll_top = this.scrollTop, this._memo_scroll_left = this.scrollLeft;
  }
  async _on_dblclick(t) {
    let e = t.target;
    for (; e.tagName !== "TD" && e.tagName !== "TH"; )
      if (e = e.parentElement, !this.contains(e))
        return;
    let i3 = t.target.classList.contains("rt-column-resize"), s2 = z3.get(e);
    if (i3) {
      t.stopImmediatePropagation(), e.style.minWidth = "", e.style.maxWidth = "", t.shiftKey ? (this._column_sizes.override = [], this._column_sizes.auto = [], this._column_sizes.indices = []) : (this._column_sizes.override[s2.size_key] = void 0, this._column_sizes.auto[s2.size_key] = void 0, this._column_sizes.indices[s2.size_key] = void 0);
      for (let o of t.shiftKey ? [this.table_model.header.cells[this.table_model.header.cells.length - 1], ...this.table_model.body.cells] : this.table_model.body.cells)
        for (let l of t.shiftKey ? o : [o[s2._virtual_x]])
          l && (l.style.minWidth = "", l.style.maxWidth = "", l.classList.remove("rt-cell-clip"));
      await this.draw();
    }
  }
  async _on_click(t) {
    if (t.button !== 0)
      return;
    let e = t.target;
    for (; e.tagName !== "TD" && e.tagName !== "TH"; )
      if (e = e.parentElement, !this.contains(e))
        return;
    let i3 = t.target.classList.contains("rt-column-resize"), s2 = z3.get(e);
    i3 && (this._on_resize_column(t, e, s2), t.stopImmediatePropagation());
  }
  async _on_click_or_dblclick(t) {
    let e = performance.now();
    this._last_clicked_time && e - this._last_clicked_time < 500 ? (this._last_clicked_time = e, await this._on_dblclick(t)) : (this._last_clicked_time = e, await this._on_click(t));
  }
  _on_resize_column(t, e, i3) {
    let { _virtual_x: s2, size_key: o } = i3, l = t.pageX, r = s2 + e.colSpan - 1, a4 = this.table_model.header.get_column_header(r), f3 = this._column_sizes.indices[o], h2 = (c6) => N3(this, async () => await this._on_resize_column_move(c6, a4, l, f3, o, r)), n2 = () => {
      document.removeEventListener("mousemove", h2), document.removeEventListener("mouseup", n2);
      let c6 = this._column_sizes.override[o], g2 = this._column_sizes.indices[o] !== c6;
      this._column_sizes.indices[o] = c6, g2 && this.draw();
    };
    document.addEventListener("mousemove", h2), document.addEventListener("mouseup", n2);
  }
  async _on_resize_column_move(t, e, i3, s2, o, l) {
    await new Promise(requestAnimationFrame);
    let r = t.pageX - i3, a4 = Math.max(1, s2 + r);
    if (this._column_sizes.override[o] = a4, r < 0)
      await this.draw({ preserve_width: true, throttle: false });
    else {
      e.style.minWidth = a4 + "px", e.style.maxWidth = a4 + "px";
      let f3 = this._column_sizes.auto[o];
      for (let h2 of this.table_model.body.cells) {
        let n2 = h2[l];
        n2 && (n2.style.maxWidth = n2.style.minWidth = a4 + "px", n2.classList.toggle("rt-cell-clip", f3 > a4));
      }
    }
  }
};
var Z3 = class {
  constructor(t) {
    this._name = t, this._elements = [], this._index = 0;
  }
  reset() {
    this._index = 0;
  }
  get() {
    this._elements[this._index] || (this._elements[this._index] = document.createElement(this._name));
    let t = this._elements[this._index];
    return this._index += 1, t;
  }
};
var S3 = class {
  constructor(t, e, i3) {
    this._column_sizes = t, this._container = e, this._span_factory = new Z3("span"), this.table = i3, this.cells = [], this.rows = [];
  }
  num_columns() {
    return this._get_row(Math.max(0, this.rows.length - 1)).row_container.length;
  }
  num_rows() {
    return this.cells.length;
  }
  _set_metadata(t, e) {
    z3.set(t, e);
  }
  _get_or_create_metadata(t) {
    if (t === void 0)
      return {};
    if (z3.has(t))
      return z3.get(t);
    {
      let e = {};
      return z3.set(t, e), e;
    }
  }
  _replace_cell(t, e) {
    let { tr: i3, row_container: s2 } = this._get_row(t), o = s2[e];
    return o && (i3.removeChild(o), s2.splice(e, 1, void 0)), o;
  }
  _fetch_cell(t, e) {
    if (t < 0 || e < 0)
      return;
    let { row_container: i3 } = this._get_row(t);
    return i3[e];
  }
  _get_cell(t = "TD", e, i3) {
    let { tr: s2, row_container: o } = this._get_row(e), l = o[i3];
    if (l || (i3 < o.length ? (l = o[i3] = document.createElement(t), s2.insertBefore(l, o.slice(i3 + 1).find((r) => r))) : (l = o[i3] = document.createElement(t), s2.appendChild(l))), l.tagName !== t) {
      let r = document.createElement(t);
      s2.replaceChild(r, l), this.cells[e].splice(i3, 1, r), l = r;
    }
    return l;
  }
  _get_row(t) {
    let e = this.rows[t];
    e || (e = this.rows[t] = document.createElement("tr"), this.table.appendChild(e));
    let i3 = this.cells[t];
    return i3 || (i3 = this.cells[t] = []), { tr: e, row_container: i3 };
  }
  _clean_columns(t) {
    for (let e = 0; e < this.rows.length; e++) {
      let i3 = this.rows[e], s2 = this.cells[e];
      this.cells[e] = s2.slice(0, t[e] || t);
      let o = this.cells[e].filter((l) => l !== void 0).length;
      for (; i3.children[o]; )
        i3.removeChild(i3.children[o]);
    }
  }
  _clean_rows(t) {
    for (; this.table.children[t]; )
      this.table.removeChild(this.table.children[t]);
    this.rows = this.rows.slice(0, t), this.cells = this.cells.slice(0, t);
  }
};
var q3 = class extends S3 {
  constructor(...t) {
    super(...t), this._group_header_cache = [], this._offset_cache = [];
  }
  _draw_group_th(t, e, i3) {
    let s2 = this._get_cell("TH", e, t[e] || 0);
    if (t[e] += 1, s2.removeAttribute("colspan"), s2.style.minWidth = "0", s2.textContent = "", i3 instanceof HTMLElement)
      s2.appendChild(i3);
    else {
      let l = this._span_factory.get("span");
      l.textContent = i3, s2.appendChild(l);
    }
    let o = this._span_factory.get("span");
    return o.className = "rt-column-resize", s2.appendChild(o), s2;
  }
  _draw_group(t, e, i3) {
    let s2 = this._get_or_create_metadata(i3);
    return s2.column_header = t, s2.value = e, s2.value = e, s2;
  }
  _draw_th(t, e, i3, s2, o) {
    let l = this._get_or_create_metadata(i3);
    if (l.column_header = t, l.value = e, l.size_key = o.length ? o[0] : o, !(o.length > 1)) {
      let r = this._column_sizes.override[l.size_key], a4 = this._column_sizes.auto[l.size_key];
      r ? (i3.classList.toggle("rt-cell-clip", a4 > r), i3.style.minWidth = r + "px", i3.style.maxWidth = r + "px") : a4 ? (i3.classList.remove("rt-cell-clip"), i3.style.maxWidth = "", i3.style.minWidth = a4 + "px") : (i3.style.maxWidth = "", i3.style.maxWidth = "");
    }
    return l;
  }
  get_column_header(t) {
    return this._get_cell("TH", this.num_rows() - 1, t);
  }
  draw(t, e, i3, s2, o, l, r, a4) {
    let f3 = e?.length;
    if (f3 === 0)
      return;
    let h2, n2, c6, g2;
    a4 = typeof a4 > "u" ? f3 - 1 : a4;
    for (let d2 = 0; d2 < f3; d2++) {
      if (c6 = e[d2] ? e[d2] : "", this._offset_cache[d2] = this._offset_cache[d2] || 0, d2 < a4)
        this._group_header_cache?.[d2]?.[0]?.value === c6 ? (h2 = this._group_header_cache[d2][1], this._group_header_cache[d2][2] += 1, i3 === 1 && (this._group_header_cache[d2][0].row_header_x = o), h2.setAttribute("colspan", this._group_header_cache[d2][2])) : (h2 = this._draw_group_th(this._offset_cache, d2, c6), n2 = this._draw_group(e, c6, h2), this._group_header_cache[d2] = [n2, h2, 1]);
      else {
        h2 = this._draw_group_th(this._offset_cache, d2, c6), n2 = this._draw_th(t || e, c6, h2, s2, o), typeof g2 > "u" && (g2 = { th: h2, metadata: n2 });
        for (let [A6] of this._group_header_cache)
          A6.size_key = n2.size_key;
        h2.removeAttribute("colspan");
      }
      this._get_row(d2).tr.classList.toggle("rt-autosize", d2 === a4), h2.classList.toggle("rt-group-corner", s2 === void 0), n2 && (n2.x = typeof s2 > "u" ? s2 : Math.floor(s2), n2.column_header_y = d2, n2.x0 = Math.floor(l), n2._virtual_x = r, i3 === 1 && (n2.row_header_x = o));
    }
    return this._clean_rows(this._offset_cache.length), g2 = g2 || { th: h2, metadata: n2 }, g2;
  }
  clean() {
    this._clean_columns(this._offset_cache);
  }
  reset_header_cache() {
    this._offset_cache = [], this._group_header_cache = [];
  }
};
var U3 = class extends S3 {
  _draw_td(t, e, i3, s2, { column_name: o }, { ridx_offset: l }, r) {
    let a4 = this._get_cell(t, e, s2), f3 = this._get_or_create_metadata(a4);
    f3.y = e + Math.floor(l), f3.size_key = r, t === "TD" && (f3.column_header = o);
    let h2 = this._column_sizes.override[f3.size_key];
    if (h2) {
      let n2 = this._column_sizes.auto[f3.size_key];
      a4.classList.toggle("rt-cell-clip", n2 > h2), a4.style.minWidth = h2 + "px", a4.style.maxWidth = h2 + "px";
    } else
      a4.classList.remove("rt-cell-clip"), a4.style.minWidth = "", a4.style.maxWidth = "";
    return f3.value !== i3 && (i3 instanceof HTMLElement ? (a4.textContent = "", a4.appendChild(i3)) : a4.textContent = i3), f3.value = i3, { td: a4, metadata: f3 };
  }
  draw(t, e, i3, s2 = false, o, l, r) {
    let { cidx: a4, column_data: f3, row_headers: h2, column_data_listener_metadata: n2 } = e, { row_height: c6 } = i3, g2, d2 = [], A6 = [], m2 = 0, v2 = [];
    for (let p2 = 0; p2 < (s2 ? i3.row_headers_length : 1); p2++) {
      m2 = 0;
      for (let R4 of f3) {
        let K5 = h2?.[m2], _3;
        if (s2) {
          let b4 = R4[p2], y4 = this._fetch_cell(m2 - (d2[p2] || 1), a4 + p2), W4 = this._get_or_create_metadata(y4), L3 = this._fetch_cell(m2, a4 + p2 - (v2[m2] || 1)), w3 = this._get_or_create_metadata(L3);
          L3 && (w3.value === b4 || b4 === void 0) && !L3.hasAttribute("rowspan") ? (v2[m2] = v2[m2] ? v2[m2] + 1 : 2, L3.setAttribute("colspan", v2[m2]), this._replace_cell(m2, a4 + p2)) : y4 && W4.value === b4 && !y4.hasAttribute("colspan") ? (d2[p2] = d2[p2] ? d2[p2] + 1 : 2, y4.setAttribute("rowspan", d2[p2]), this._replace_cell(m2, a4 + p2)) : (_3 = this._draw_td("TH", m2, b4, a4 + p2, e, i3, p2), _3.td.style.display = "", _3.td.removeAttribute("rowspan"), _3.td.removeAttribute("colspan"), _3.metadata.row_header = R4, _3.metadata.row_header_x = p2, _3.metadata.y0 = Math.floor(i3.ridx_offset), _3.metadata.y1 = Math.ceil(i3.y1), _3.metadata._virtual_x = p2, typeof l < "u" && (_3.metadata.x0 = Math.floor(l)), d2[p2] = 1, v2[m2] = 1, A6[p2] = _3);
        } else
          _3 = this._draw_td("TD", m2, R4, a4, e, i3, r), n2 && (_3.metadata.user = n2[m2]), _3.metadata.x = typeof o > "u" ? o : Math.floor(o), _3.metadata.x1 = Math.ceil(i3.x1), _3.metadata.row_header = K5 || [], _3.metadata.y0 = Math.floor(i3.ridx_offset), _3.metadata.y1 = Math.ceil(i3.y1), _3.metadata.dx = Math.floor(o - l), _3.metadata.dy = _3.metadata.y - Math.floor(_3.metadata.y0), _3.metadata._virtual_x = a4, typeof l < "u" && (_3.metadata.x0 = Math.floor(l)), A6[0] = _3;
        if (m2++, g2 = _3 ? _3.metadata : g2, c6 = c6 || _3?.td.offsetHeight, m2 * c6 > t)
          break;
      }
    }
    return this._clean_rows(m2), { tds: A6, ridx: m2, metadata: g2, row_height: c6 };
  }
  clean({ ridx: t, cidx: e }) {
    this._clean_rows(t), this._clean_columns(e);
  }
};
var B3 = class {
  constructor(t, e, i3) {
    this.clear(i3);
    let [s2] = i3.children, [o, l] = s2.children;
    this.table = s2, this._column_sizes = e, this.header = new q3(e, t, o), this.body = new U3(e, t, l), this.fragment = document.createDocumentFragment();
  }
  num_columns() {
    return this.header.num_columns();
  }
  clear(t) {
    t.innerHTML = F3`
            <table cellspacing="0">
                <thead></thead>
                <tbody></tbody>
            </table>
        `;
  }
  autosize_cells(t, e) {
    for (; t.length > 0; ) {
      let [i3, s2] = t.pop(), o = i3.getBoundingClientRect();
      this._column_sizes.row_height = e || Math.max(10, Math.min(this._column_sizes.row_height || o.height, o.height)), this._column_sizes.indices[s2.size_key] = o.width;
      let l = this._column_sizes.override[s2.size_key] !== void 0;
      o.width && !l && (this._column_sizes.auto[s2.size_key] = o.width), i3.style.minWidth === "0px" && (i3.style.minWidth = `${o.width}px`);
    }
  }
  async *draw(t, e, i3, s2, o, l) {
    let { width: r, height: a4 } = t, { view: f3, config: h2 } = e, { data: n2, row_headers: c6, column_headers: g2, metadata: d2, column_header_merge_depth: A6 } = await f3(Math.floor(o.start_col), Math.floor(o.start_row), Math.ceil(o.end_col), Math.ceil(o.end_row)), { start_row: m2 = 0, start_col: v2 = 0, end_col: p2 = 0, end_row: R4 = 0 } = o;
    c6 && (this._row_headers_length = c6.reduce((w3, I4) => Math.max(w3, I4.length), 0), c6 = c6.map((w3) => (w3.length = this._row_headers_length, w3))), e.config.column_pivots = Array.from(Array(g2?.[0]?.length || 0).keys()), e.config.row_pivots = Array.from(Array(c6?.[0]?.length || 0).keys());
    let K5 = this._column_sizes.indices[(this._row_headers_length || 0) + Math.floor(o.start_col)] || 0, _3 = { viewport_width: 0, selected_id: i3, ridx_offset: m2, sub_cell_offset: K5, x0: v2, x1: p2, y1: R4, row_height: this._column_sizes.row_height, row_headers_length: this._row_headers_length }, b4, y4 = 0, W4 = [], L3 = true;
    if (c6?.length > 0) {
      let w3 = h2.row_pivots.join(","), I4 = { column_name: w3, cidx: 0, column_data: c6, row_headers: c6, first_col: L3 }, G4 = y4 + Math.floor(v2);
      b4 = this.body.draw(a4, I4, { ..._3, x0: 0 }, true, void 0, void 0, G4);
      let O5 = [];
      for (let x5 = 0; x5 < e.config.row_pivots.length; x5++) {
        let k4 = this.header.draw(w3, Array(e.config.column_pivots.length).fill(""), 1, void 0, x5, v2, x5, A6);
        k4 && O5.push(k4);
      }
      if (L3 = false, _3.viewport_width += O5.reduce((x5, { th: k4 }, P3) => x5 + (this._column_sizes.indices[P3] || k4.offsetWidth), 0), _3.row_height = _3.row_height || b4.row_height, y4 = c6[0].length, !s2)
        for (let x5 = 0; x5 < e.config.row_pivots.length; x5++) {
          let { td: k4, metadata: P3 } = b4.tds[x5] || {}, { th: $4, metadata: X6 } = O5[x5] || {};
          (k4 || $4) && W4.push([$4 || k4, X6 || P3]);
        }
    }
    try {
      let w3 = 0, I4 = l - o.start_col;
      for (; w3 < I4; ) {
        if (!n2[w3]) {
          let T3 = Math.max(o.end_col, 0);
          o.start_col = T3;
          let H4 = 0, J3 = 0;
          for (; this._column_sizes.indices.length > y4 + v2 + H4 + 1 && J3 + _3.viewport_width < r; )
            H4++, J3 += this._column_sizes.indices[y4 + v2 + H4];
          if (J3 + _3.viewport_width < r) {
            let M4 = Math.min(l, T3 + 5);
            o.end_col = Math.max(1, Math.min(l, M4));
          } else
            o.end_col = Math.max(1, Math.min(l, T3 + H4));
          let ht2 = f3(Math.floor(o.start_col), Math.floor(o.start_row), Math.ceil(o.end_col), Math.ceil(o.end_row));
          yield void 0;
          let E6 = await ht2;
          if (typeof E6.column_header_merge_depth < "u" && (A6 = E6.column_header_merge_depth), E6.data.length === 0) {
            yield W4;
            return;
          }
          o.end_col = o.start_col + E6.data.length;
          for (let M4 = 0; M4 < E6.data.length; M4++)
            n2[w3 + M4] = E6.data[M4], E6.metadata && (d2[w3 + M4] = E6.metadata[M4]), g2 && (g2[w3 + M4] = E6.column_headers?.[M4]);
        }
        let G4 = g2?.[w3] || "", O5 = n2[w3], x5 = d2?.[w3], k4 = { column_name: G4, cidx: y4, column_data: O5, column_data_listener_metadata: x5, row_headers: c6, first_col: L3 }, P3 = w3 + v2, $4 = y4 + Math.floor(v2), X6 = this.header.draw(void 0, G4, void 0, P3, $4, v2, y4, A6);
        if (b4 = this.body.draw(a4, k4, _3, false, P3, v2, $4), L3 = false, !s2)
          for (let { td: T3, metadata: H4 } of b4.tds)
            W4.push([X6?.th || T3, X6?.metadata || H4]);
        let et3 = this._column_sizes.indices[y4 + Math.floor(v2)];
        if (et3 ? _3.viewport_width += et3 : _3.viewport_width += X6?.th?.offsetWidth || b4.tds.reduce((T3, H4) => T3 + H4.td?.offsetWidth, 0), _3.row_height = _3.row_height || b4.row_height, y4++, w3++, _3.viewport_width - _3.sub_cell_offset > r) {
          this.body.clean({ ridx: b4?.ridx || 0, cidx: y4 }), this.header.clean(), yield W4, _3.viewport_width = 0;
          for (let [T3] of W4)
            _3.viewport_width += T3.offsetWidth;
          if (_3.viewport_width - _3.sub_cell_offset > r)
            return;
        }
      }
      this.body.clean({ ridx: b4?.ridx || 0, cidx: y4 }), this.header.clean(), yield W4;
    } finally {
      this.body.clean({ ridx: b4?.ridx || 0, cidx: y4 }), this.header.clean(), this.body._span_factory.reset(), this.header._span_factory.reset();
    }
  }
};
var pt = ["both", "horizontal", "vertical", "none"];
var tt = class extends j3 {
  constructor() {
    super(), this._column_sizes = { auto: [], override: [], indices: [] }, this._style_callbacks = [], this._initialized = false;
  }
  connectedCallback() {
    this._initialized || (this.create_shadow_dom(), this.register_listeners(), this.setAttribute("tabindex", "0"), this._initialized = true, this.table_model = new B3(this._table_clip, this._column_sizes, this));
  }
  _reset_viewport() {
    this._start_row = void 0, this._end_row = void 0, this._start_col = void 0, this._end_col = void 0;
  }
  _reset_scroll() {
    this._column_sizes.indices = [], this.scrollTop = 0, this.scrollLeft = 0, this._reset_viewport();
  }
  _resetAutoSize() {
    this._column_sizes.auto = [], this._column_sizes.override = [], this._column_sizes.indices = [];
    for (let t = 0; t < this.table_model.header.num_columns(); t++) {
      let e = this.table_model.header.get_column_header(t);
      e.style.minWidth = "", e.style.maxWidth = "";
    }
  }
  clear() {
    this.table_model = new B3(this._table_clip, this._column_sizes, this);
  }
  addStyleListener(t) {
    this._style_callbacks = this._style_callbacks.concat(t);
    let e = true;
    return () => {
      if (!e)
        return;
      e = false;
      let s2 = this._style_callbacks = this._style_callbacks.slice(), o = s2.indexOf(t);
      s2.splice(o, 1);
    };
  }
  invalidate() {
    if (!this._is_styling)
      throw new Error("Cannot call `invalidate()` outside of a `StyleListener`");
    this._invalidated = true;
  }
  getMeta(t) {
    if (!(typeof t > "u")) {
      if (t instanceof HTMLElement)
        return z3.get(t);
      if (t.row_header_x >= 0) {
        if (t.row_header_x < this._view_cache.config.row_pivots.length) {
          let e = this.table_model.body._fetch_cell(t.y, t.row_header_x);
          return this.getMeta(e);
        }
      } else if (t.column_header_y >= 0) {
        if (t.column_header_y < this._view_cache.config.column_pivots.length) {
          let e = this.table_model.body._fetch_cell(t.column_header_y, t.y);
          return this.getMeta(e);
        }
      } else
        return this.getMeta(this.table_model.body._fetch_cell(t.dy, t.dx + this.table_model._row_headers_length));
    }
  }
  getDrawFPS() {
    return ot();
  }
  async scrollToCell(t, e) {
    if (!this._view_cache) {
      console.warn("data listener not configured");
      return;
    }
    let i3 = this._column_sizes.row_height || 19, s2 = this._view_cache.config.column_pivots.length * i3, l = (this._table_clip.offsetHeight - s2) % i3, r = (this._virtual_panel.offsetHeight - l) / this._nrows;
    this.scrollTop = Math.ceil(r * e);
    let a4 = 0;
    for (; t > 0; )
      t--, a4 += this._column_sizes.indices[t + this._view_cache.config.row_pivots.length] || 60;
    this.scrollLeft = Math.ceil(a4), await new Promise(requestAnimationFrame), await this._draw_flush();
  }
  setDataListener(t, { virtual_mode: e = "both" } = {}) {
    let i3 = {}, s2 = { row_pivots: [], column_pivots: [] };
    console.assert(pt.indexOf(e) > -1, `Unknown virtual_mode ${e};  valid options are "both" (default), "horizontal", "vertical" or "none"`), this._virtual_mode = e, this._invalid_schema = true, this._view_cache = { view: t, config: s2, schema: i3 }, this._setup_virtual_scroll();
  }
  __noop_jsdoc_hints() {
  }
};
document.createElement("regular-table").constructor === HTMLElement && window.customElements.define("regular-table", tt);

// node_modules/@finos/perspective-viewer-datagrid/dist/esm/perspective-viewer-datagrid.js
var import_chroma_js = __toESM(require_chroma());
var import_chroma_js2 = __toESM(require_chroma());
var import_chroma_js3 = __toESM(require_chroma());
var import_chroma_js4 = __toESM(require_chroma());

// node_modules/@finos/perspective/src/js/config/settings.js
var settings_default = {
  types: {
    float: {
      filter_operator: "==",
      aggregate: "sum",
      format: {
        style: "decimal",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    },
    string: {
      filter_operator: "==",
      aggregate: "count"
    },
    integer: {
      filter_operator: "==",
      aggregate: "sum",
      format: {}
    },
    boolean: {
      filter_operator: "==",
      aggregate: "count"
    },
    datetime: {
      filter_operator: "==",
      aggregate: "count",
      format: {
        dateStyle: "short",
        timeStyle: "medium"
      },
      null_value: -1
    },
    date: {
      filter_operator: "==",
      aggregate: "count",
      format: {
        dateStyle: "short"
      },
      null_value: -1
    }
  }
};

// node_modules/@finos/perspective/src/js/config/index.js
function get_type_config(type2) {
  const config = {};
  if (get_config().types[type2]) {
    Object.assign(config, get_config().types[type2]);
  }
  if (config.type) {
    const props = get_type_config(config.type);
    Object.assign(props, config);
    return props;
  } else {
    return config;
  }
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
function mergeDeep(target, ...sources) {
  if (!sources.length)
    return target;
  const source = sources.shift();
  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key])
          Object.assign(target, { [key]: {} });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
  }
  return mergeDeep(target, ...sources);
}
function get_config() {
  if (!globalThis.__PERSPECTIVE_CONFIG__) {
    globalThis.__PERSPECTIVE_CONFIG__ = mergeDeep(
      settings_default,
      globalThis.__TEMPLATE_CONFIG__ || {}
    );
  }
  return globalThis.__PERSPECTIVE_CONFIG__;
}

// node_modules/@finos/perspective-viewer-datagrid/dist/esm/perspective-viewer-datagrid.js
var Z4 = 'regular-table{padding:0;margin:12px 0 0 12px;scrollbar-color:transparent transparent;scrollbar-width:thin;outline:none;}regular-table:hover{scrollbar-color:rgba(0,0,0,0.3)transparent;}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody td,perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table thead th:not(.rt-group-corner){transform:translate(var(--regular-table--transform-x,0px));}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody{transform:translate(0,var(--regular-table--transform-y,0px));}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr:first-child td,perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr:first-child th{clip-path:polygon(0 var(--regular-table--clip-y,0),0 200%,200% 200%,200% var(--regular-table--clip-y,0));}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table thead th.rt-group-corner{background:var(--plugin--background,white);z-index:1;}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr td:first-of-type{clip-path:polygon(var(--regular-table--clip-x,0)0,var(--regular-table--clip-x,0)200%,200% 200%,200% 0);}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr:first-child td:first-of-type{clip-path:polygon(var(--regular-table--clip-x,0)var(--regular-table--clip-y,0),var(--regular-table--clip-x,0)200%,200% 200%,200% var(--regular-table--clip-y,0));}regular-table{font-family:inherit;}regular-table div[tabindex]{outline:none;}regular-table>div{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;}regular-table th{text-align:center;}regular-table thead tr:not(.rt-autosize) th{overflow:hidden;max-width:0px;}regular-table thead tr:last-child .rt-float,regular-table tbody .rt-float{text-align:right;}regular-table thead .rt-integer,regular-table tbody .rt-integer{text-align:right;}regular-table tbody th{text-align:left;}regular-table span.rt-tree-container{display:flex;align-items:center;height:100%;}regular-table thead .rt-string,regular-table tbody .rt-string,regular-table thead .rt-date,regular-table tbody .rt-date,regular-table thead .rt-datetime,regular-table tbody .rt-datetime{text-align:left;}regular-table thead tr:last-child th{border-bottom:1px solid#8b868045;}regular-table tbody tr:first-child td,regular-table tbody tr:first-child th{border-top:1px solid transparent!important;}regular-table th{position:relative;}regular-table tr th span.rt-tree-group{margin-left:5px;margin-right:15px;border-left:1px solid#eee;height:100%;}regular-table td,regular-table th{white-space:nowrap;font-size:12px;padding-right:5px;padding-left:5px;padding-top:0px;padding-bottom:0px;height:19px;}regular-table tr:hover td{background:#eee;opacity:1;}regular-table tr:hover{color:#333;}regular-table table *{box-sizing:border-box;}regular-table table{position:absolute;overflow:hidden;color:#666;outline:none;}regular-table span.rt-row-header-icon{color:#aaa;padding-right:4px;font-family:var(--button--font-family,"Material Icons");}regular-table span.rt-column-header-icon{font-size:10px;padding-left:3px;display:inline-block;width:10px;font-family:var(--button--font-family,"Material Icons");}regular-table span.rt-row-header-icon:hover{color:#1a7da1;text-shadow:0px 0px 3px#1a7da1;}regular-table .rt-selected td{background-color:#eee;}regular-table .rt-cell-clip{overflow:hidden;text-overflow:ellipsis;}regular-table td span.rt-group-name,regular-table th span.rt-group-name{margin-right:-5px;padding-right:5px;padding-left:8px;flex:1;height:100%;}regular-table th span.rt-group-name{text-align:left;}regular-table td th span.rt-group-leaf,regular-table th span.rt-group-leaf{margin-left:16px;height:100%;}regular-table .rt-column-resize{height:100%;width:10px;position:absolute;top:0;right:0;cursor:col-resize;}regular-table a{color:var(--rt-pos-cell--color);}regular-table a:visited{color:var(--active--color);}regular-table::-webkit-scrollbar,regular-table::-webkit-scrollbar-corner{background-color:transparent;height:12px;width:12px;}regular-table::-webkit-scrollbar-thumb{background-clip:content-box;background:var(--icon--color);border:5.5px solid var(--plugin--background);max-height:50%;max-width:50%;min-width:10%;min-height:10%;}.psp-header-border:not(.psp-is-top):not(.psp-header-leaf){box-shadow:1px 0px var(--inactive--border-color,#8b868045);}.psp-header-group{box-shadow:0px 10px 0 -9px var(--inactive--border-color,#8b868045);}.psp-is-top{box-shadow:5px 4px 0px -4px var(--inactive--border-color,#8b868045);}.psp-is-top.psp-header-group:not(.psp-header-group-corner){box-shadow:5px 4px 0px -4px var(--inactive--border-color,#8b868045),0px 10px 0 -9px var(--inactive--border-color,#8b868045);}.psp-header-border.psp-header-group:not(.psp-is-top):not(.psp-header-group-corner){box-shadow:1px 0px var(--inactive--border-color,#8b868045),0px 10px 0 -9px var(--inactive--border-color,#8b868045);}perspective-viewer[settings] tr.rt-autosize .psp-header-leaf.psp-header-border:not(.psp-menu-enabled){box-shadow:1px 0px var(--inactive--border-color,#8b868045);}.psp-header-leaf.psp-header-border{box-shadow:5px -4px 0px -4px var(--inactive--border-color,#8b868045);}tr:only-child th{box-shadow:none!important;}regular-table tbody tr:hover th.psp-tree-leaf:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover th.psp-tree-label:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover td:not(.psp-row-selected):not(.psp-row-subselected){border-color:var(--rt-hover--border-color,#c5c9d080)!important;background-color:transparent;box-shadow:0px 1px 0px var(--rt-hover--border-color,#c5c9d080),0px 3px 0px rgba(0,0,0,0.05),0px 5px 0px rgba(0,0,0,0.01);}regular-table tbody tr:hover+tr th.psp-tree-leaf:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover+tr th.psp-tree-label:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover+tr td:not(.psp-row-selected):not(.psp-row-subselected){border-top-color:transparent;}regular-table tbody tr th:first-child:not(:empty),regular-table tbody tr th:first-child:empty+th:not(:empty),regular-table tbody tr th:first-child:empty~th:empty+th:not(:empty),regular-table tbody tr td:first-child{border-left-width:1px;border-left-color:transparent;}regular-table tbody tr th:last-child,regular-table tbody tr td:last-child{border-right-width:1px;border-right-color:transparent;}regular-table tbody tr:hover{color:#161616;}regular-table tbody tr:hover th:first-child:not(:empty),regular-table tbody tr:hover th:first-child:empty+th:not(:empty),regular-table tbody tr:hover th:first-child:empty~th:empty+th:not(:empty),regular-table tbody tr:hover td:first-child{border-left-color:var(--rt-hover--border-color,#c5c9d080)!important;}regular-table tbody tr:hover th:last-child,regular-table tbody tr:hover td:last-child{border-right-color:var(--rt-hover--border-color,#c5c9d080)!important;}perspective-viewer:not([settings]) tr.rt-autosize+tr th{height:0px;}perspective-viewer:not([settings]) tr.rt-autosize+tr th span{display:none;}perspective-viewer[settings] .psp-menu-enabled{padding:0 6px;font-size:8px;border-radius:3px 3px 0 0;}perspective-viewer[settings] .psp-menu-enabled:hover,perspective-viewer[settings] tr:not(.rt-autosize) .psp-menu-open{color:var(--plugin--background);background-color:var(--icon--color);cursor:pointer;}perspective-viewer[settings] tr:not(.rt-autosize) .psp-menu-open:before{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;height:8px;width:10px;-webkit-mask-image:var(--column-settings-icon--mask-image);mask-image:var(--column-settings-icon--mask-image);margin-right:4px;background-color:var(--plugin--background);}.psp-sort-enabled:hover{cursor:pointer;}.psp-row-selected,:hover .psp-row-selected,:hover th.psp-tree-leaf.psp-row-selected,:hover th.psp-tree-label.psp-row-selected{color:white!important;background-color:#ea7319!important;border-color:#ea7319!important;}.psp-row-selected.psp-tree-label:not(:hover):before{color:white;}.psp-row-subselected,:hover .psp-row-subselected,:hover th.psp-tree-leaf.psp-row-subselected,:hover th.psp-tree-label.psp-row-subselected{background:rgba(234,115,25,0.2)!important;}.psp-error{color:red;}td:focus{outline:#666;outline-style:dotted;outline-width:1px;}perspective-viewer.dragging regular-table{pointer-events:none;}.psp-header-border:last-child{border-right-width:0px;}.psp-header-sort-desc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-desc-icon--mask-image);mask-image:var(--sort-desc-icon--mask-image);}.psp-header-sort-asc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-asc-icon--mask-image);mask-image:var(--sort-asc-icon--mask-image);}.psp-header-sort-col-desc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-col-desc-icon--mask-image);mask-image:var(--sort-col-desc-icon--mask-image);}.psp-header-sort-col-asc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-col-asc-icon--mask-image);mask-image:var(--sort-col-asc-icon--mask-image);}tbody th:last-of-type{border-right:1px solid var(--inactive--border-color,#8b868045);overflow:hidden;text-overflow:ellipsis;}tbody th:empty{background-image:linear-gradient(to right,transparent 9px,#eee 10px,transparent 11px);background-repeat:no-repeat;min-width:20px;max-width:20px;pointer-events:none;}.psp-tree-label{max-width:0px;min-width:0px;}.psp-tree-label:before{color:var(--icon--color);font-family:var(--button--font-family,inherit);padding-right:11px;}.psp-tree-label-expand:before{content:var(--tree-label-expand--content,"+");}.psp-tree-label-collapse:before{content:var(--tree-label-collapse--content,"-");}.psp-tree-label-expand,.psp-tree-label-collapse{cursor:pointer;}.psp-tree-label:hover:before{color:var(--active--color);text-shadow:0px 0px 5px var(--active--color);}regular-table thead tr:last-child th{border-bottom-width:1px;border-bottom-color:var(--inactive--border-color,#8b868045);}.psp-tree-leaf{padding-left:24px;}.psp-align-right{text-align:right;}.psp-align-left{text-align:left;}.psp-positive:not(:focus){color:var(--rt-pos-cell--color);}.psp-negative:not(:focus){color:var(--rt-neg-cell--color);}regular-table table tbody td{min-width:52px!important;}.psp-is-width-override .rt-column-resize,.rt-column-resize:hover{border:1px dashed#999;border-bottom-width:0px;border-left-width:0px;}.psp-bool-type{font-family:var(--button--font-family,"Material Icons");}.boolean-editable{cursor:pointer;}regular-table table{user-select:none;color:#161616;border-collapse:separate;}regular-table table th{font-weight:400;}regular-table table td,regular-table table th{border-color:var(--inactive--border-color,#8b868045);height:23px;}regular-table table .psp-header-group{text-overflow:ellipsis;}regular-table table th.psp-header-leaf{border-bottom-width:0px;}regular-table table th.psp-header-leaf span{height:23px;min-height:23px;}regular-table table td,regular-table table th.psp-tree-label,regular-table table th.psp-tree-label,regular-table table th.psp-tree-leaf,regular-table table tbody tr:first-child th{border-style:solid;border-width:0px;border-top-width:1px;}regular-table table tbody th:empty{background-position:0px -10px;}@keyframes pulse_pos{0%{background-color:var(--pulse--background-color-start,rgba(0,128,255,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(0,128,255,0));}}@keyframes pulse_pos2{0%{background-color:var(--pulse--background-color-start,rgba(0,128,255,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(0,128,255,0));}}@keyframes pulse_neg{0%{background-color:var(--pulse--background-color-start,rgba(255,25,0,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(255,25,0,0));}}@keyframes pulse_neg2{0%{background-color:var(--pulse--background-color-start,rgba(255,25,0,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(255,25,0,0));}}';
function Ne(e) {
  return e.x >= 0 ? this._column_types[e.x] : this._row_header_types[e.row_header_x - 1];
}
function X3(e) {
  let o = Array.from(e.children[0].children[0].children);
  if (o.length > 0) {
    let [r] = o.splice(this._config.split_by.length, 1);
    K3.call(this, e, r, false);
    let [s2] = o.splice(this._config.split_by.length, 1);
    s2 && K3.call(this, e, s2, true);
  }
}
function K3(e, o, r) {
  let s2 = e._view_cache.config.row_pivots.length - 1;
  for (let t of o?.children) {
    let l = e.getMeta(t), i3 = l.column_header?.[this._config.split_by.length], n2 = this._config.sort.find((p2) => p2[0] === i3), a4 = l.row_header_x === s2, c6 = typeof l.x > "u";
    a4 = a4 || (l.x + 1) % this._config.columns.length === 0, t.classList.toggle("psp-header-border", a4), t.classList.toggle("psp-header-group", false), t.classList.toggle("psp-header-leaf", true), t.classList.toggle("psp-is-top", false), t.classList.toggle("psp-header-corner", c6), t.classList.toggle("psp-header-sort-asc", !r && !!n2 && n2[1] === "asc"), t.classList.toggle("psp-header-sort-desc", !r && !!n2 && n2[1] === "desc"), t.classList.toggle("psp-header-sort-col-asc", !r && !!n2 && n2[1] === "col asc"), t.classList.toggle("psp-header-sort-col-desc", !r && !!n2 && n2[1] === "col desc");
    let d2 = Ne.call(this, l), h2 = d2 === "integer" || d2 === "float", u = d2 === "string", _3 = d2 === "date", g2 = d2 === "datetime";
    t.classList.toggle("psp-align-right", h2), t.classList.toggle("psp-align-left", !h2), t.classList.toggle("psp-menu-open", this._open_column_styles_menu[0] === l._virtual_x), t.classList.toggle("psp-menu-enabled", (u || h2 || _3 || g2) && !c6 && l.column_header_y == this._config.split_by.length + 1), t.classList.toggle("psp-sort-enabled", (u || h2 || _3 || g2) && !c6 && l.column_header_y === this._config.split_by.length), t.classList.toggle("psp-is-width-override", e._column_sizes?.override[l.size_key] !== void 0);
  }
}
function Q3(e) {
  let o = e._view_cache.config.row_pivots.length - 1, r = Array.from(e.children[0].children[0].children), s2 = [], t = /* @__PURE__ */ new Set(), l = e.children[0];
  for (let i3 = 0; i3 < r.length; i3++) {
    let n2 = l.rows[i3], a4 = /* @__PURE__ */ new Set();
    for (let c6 = 0; c6 < n2.cells.length; c6++) {
      let d2 = n2.cells[c6];
      d2.style.backgroundColor = "";
      let h2 = e.getMeta(d2), u = h2.row_header_x === o || h2.x >= 0;
      d2.classList.toggle("psp-align-right", false), d2.classList.toggle("psp-align-left", false), d2.classList.toggle("psp-header-group", true), d2.classList.toggle("psp-header-leaf", false), d2.classList.toggle("psp-header-border", u), d2.classList.toggle("psp-header-group-corner", typeof h2.x > "u"), d2.classList.toggle("psp-color-mode-bar", false), d2.classList.toggle("psp-header-sort-asc", false), d2.classList.toggle("psp-header-sort-desc", false), d2.classList.toggle("psp-header-sort-col-asc", false), d2.classList.toggle("psp-header-sort-col-desc", false), d2.classList.toggle("psp-sort-enabled", false);
      let _3 = n2.cells[c6], g2 = c6, p2, y4;
      for (; s2[i3] && s2[i3][g2]; ++g2)
        ;
      for (a4.add(g2), p2 = g2; p2 < g2 + _3.colSpan; ++p2)
        for (y4 = i3; y4 < i3 + _3.rowSpan; ++y4)
          s2[y4] || (s2[y4] = []), s2[y4][p2] = true;
      _3.classList.toggle("psp-is-top", i3 === 0 || !t.has(p2));
    }
    t = a4;
  }
}
var x3 = Symbol("Plugin Symbol");
function ee3(e, o, [, , , , , r, s2], [, , , , , t, l]) {
  let i3 = this._ids?.[e.dy]?.join("|"), n2 = e.column_header.join("|");
  if (this.last_reverse_columns?.has(n2) && this.last_reverse_ids?.has(i3)) {
    let a4 = this.last_reverse_ids?.get(i3), c6 = this.last_reverse_columns.get(n2);
    this._is_old_viewport ? this.last_meta?.[c6]?.[a4] > e.user ? (o.style.setProperty("--pulse--background-color-start", t), o.style.setProperty("--pulse--background-color-end", l), o.style.animationName === "pulse_neg" ? o.style.animation = "pulse_neg2 0.5s linear" : o.style.animation = "pulse_neg 0.5s linear") : this.last_meta?.[c6]?.[a4] < e.user ? (o.style.setProperty("--pulse--background-color-start", r), o.style.setProperty("--pulse--background-color-end", s2), o.style.animationName === "pulse_pos" ? o.style.animation = "pulse_pos2 0.5s linear" : o.style.animation = "pulse_pos 0.5s linear") : a4 !== e.dy && (o.style.animation = "") : o.style.animation = "";
  } else
    o.style.animation = "";
}
function V4(e, o) {
  return import_chroma_js.default.mix(e, `rgb(${o[0]},${o[1]},${o[2]})`, 0.5).hex();
}
function E3([e, o, r, s2], t = [255, 255, 255]) {
  function l(i3, n2) {
    return ((1 - s2) * (t[i3] / 255) + s2 * (n2 / 255)) * 255;
  }
  return [l(0, e), l(1, o), l(2, r)];
}
function S4([e, o, r]) {
  return Math.sqrt(e * e * 0.299 + o * o * 0.587 + r * r * 0.114) > 130 ? "#161616" : "#ffffff";
}
function De2(e) {
  let [o, r, s2] = e.rgb(), [t, l, i3] = e.set("hsl.h", (e.get("hsl.h") - 15) % 360).rgb(), [n2, a4, c6] = e.set("hsl.h", (e.get("hsl.h") + 15) % 360).rgb();
  return `linear-gradient(to right top,rgb(${t},${l},${i3}),rgb(${o},${r},${s2}) 50%,rgb(${n2},${a4},${c6}))`;
}
function b3(e) {
  let o = (0, import_chroma_js.default)(e), r = De2(o), s2 = o.rgb();
  return [e, ...s2, r, `rgba(${s2[0]},${s2[1]},${s2[2]},1)`, `rgba(${s2[0]},${s2[1]},${s2[2]},0)`];
}
function oe2(e, o, r) {
  let s2 = r.user > 0, t = r.user < 0, l;
  e?.pos_bg_color !== void 0 ? l = e.pos_bg_color : l = this._pos_bg_color;
  let i3;
  e?.neg_bg_color !== void 0 ? i3 = e.neg_bg_color : i3 = this._neg_bg_color;
  let n2 = s2 ? l : t ? i3 : ["", ...this._plugin_background, ""];
  {
    let [_3, g2, p2, y4, w3] = n2;
    if (o.style.position = "", e?.number_bg_mode === "color")
      o.style.animation = "", o.style.backgroundColor = _3;
    else if (e?.number_bg_mode === "gradient") {
      let f3 = Math.max(0, Math.min(1, Math.abs(r.user / e.bg_gradient))), m2 = this._plugin_background, v2 = S4(E3([g2, p2, y4, f3], m2));
      o.style.animation = "", o.style.color = v2, o.style.backgroundColor = `rgba(${g2},${p2},${y4},${f3})`;
    } else
      e?.number_bg_mode === "pulse" ? (ee3.call(this, r, o, l, i3), o.style.backgroundColor = "") : (e?.number_bg_mode === "disabled" || e?.number_bg_mode, o.style.animation = "", o.style.backgroundColor = "");
  }
  let [a4, c6, d2, h2, u] = (() => e?.pos_fg_color !== void 0 ? s2 ? e.pos_fg_color : t ? e.neg_fg_color : ["", ...this._plugin_background, ""] : s2 ? this._pos_fg_color : t ? this._neg_fg_color : ["", ...this._plugin_background, ""])();
  if (e?.number_fg_mode === "disabled")
    if (e?.number_bg_mode === "color") {
      let _3 = this._plugin_background, g2 = S4(E3([n2[1], n2[2], n2[3], 1], _3));
      o.style.color = g2;
    } else
      e?.number_bg_mode === "gradient" || (o.style.color = "");
  else
    e?.number_fg_mode === "bar" ? (o.style.color = "", o.style.position = "relative", u !== "" && o.children.length > 0 && o.children[0].nodeType === Node.ELEMENT_NODE && (o.children[0].style.background = u)) : (e?.number_fg_mode === "color" || !e?.number_fg_mode) && (o.style.color = a4);
}
function se3(e, o, r) {
  let s2 = r.column_header?.[this._config.split_by.length], [t, l, i3, n2, a4] = (() => e?.color !== void 0 ? e.color : this._color)();
  if (e?.string_color_mode === "foreground" && r.user !== null)
    o.style.color = t, o.style.backgroundColor = "", e?.format === "link" && (o.children[0].style.color = t);
  else if (e?.string_color_mode === "background" && r.user !== null) {
    let c6 = this._plugin_background, d2 = S4(E3([l, i3, n2, 1], c6));
    o.style.color = d2, o.style.backgroundColor = t;
  } else if (e?.string_color_mode === "series" && r.user !== null) {
    this._series_color_map.has(s2) || (this._series_color_map.set(s2, /* @__PURE__ */ new Map()), this._series_color_seed.set(s2, 0));
    let c6 = this._series_color_map.get(s2);
    if (!c6.has(r.user)) {
      let k4 = this._series_color_seed.get(s2);
      c6.set(r.user, k4), this._series_color_seed.set(s2, k4 + 1);
    }
    let d2 = c6.get(r.user), [h2, u, _3] = (0, import_chroma_js2.default)(t).hsl();
    h2 = h2 + d2 * 150 % 360;
    let g2 = (0, import_chroma_js2.default)(h2, u, _3, "hsl"), [p2, y4, w3] = g2.rgb(), f3 = g2.hex(), m2 = this._plugin_background, v2 = S4(E3([p2, y4, w3, 1], m2));
    o.style.color = v2, o.style.backgroundColor = f3;
  } else
    o.style.backgroundColor = "", o.style.color = "";
}
function le2(e, o, r) {
  let s2 = r.column_header?.[this._config.split_by.length], [t, l, i3, n2, a4] = (() => e?.color !== void 0 ? e.color : this._color)();
  if (e?.datetime_color_mode === "foreground" && r.user !== null)
    o.style.color = t, o.style.backgroundColor = "";
  else if (e?.datetime_color_mode === "background" && r.user !== null) {
    let c6 = this._plugin_background, d2 = S4(E3([l, i3, n2, 1], c6));
    o.style.color = d2, o.style.backgroundColor = t;
  } else
    o.style.backgroundColor = "", o.style.color = "";
}
function ie3(e, o, r) {
  let [s2] = r.user === true ? this._pos_fg_color : r.user === false ? this._neg_fg_color : ["", 0, 0, 0, ""];
  o.style.backgroundColor = "", o.style.color = s2;
}
function ne3(e, o, r) {
  let s2 = typeof r.value != null && typeof r.value != null && r.value?.toString()?.trim().length > 0, t = r.row_header_x >= this._config.group_by.length, l = e.getMeta({ dx: 0, dy: r.y - r.y0 + 1 }), i3 = l && l.row_header && typeof l.row_header[r.row_header_x + 1] < "u";
  o.classList.toggle("psp-tree-label", s2 && !t), o.classList.toggle("psp-tree-label-expand", s2 && !t && !i3), o.classList.toggle("psp-tree-label-collapse", s2 && !t && i3), o.classList.toggle("psp-tree-leaf", s2 && t);
}
function $e(e) {
  return e.x >= 0 ? this._column_types[e.x] : this._row_header_types[e.row_header_x - 1];
}
function ae3(e) {
  let o = e[x3] || {};
  for (let r of e.children[0].children[1].children)
    for (let s2 of r.children) {
      let t = e.getMeta(s2), l = t.column_header?.[this._config.split_by.length], i3 = $e.call(this, t), n2 = o[l], a4 = i3 === "integer" || i3 === "float";
      a4 ? oe2.call(this, n2, s2, t) : i3 === "boolean" ? ie3.call(this, n2, s2, t) : i3 === "string" ? se3.call(this, n2, s2, t) : i3 === "date" || i3 === "datetime" ? le2.call(this, n2, s2, t) : (s2.style.backgroundColor = "", s2.style.color = ""), s2.classList.toggle("psp-bool-type", i3 === "boolean" && t.user !== null);
      let c6 = s2.tagName === "TH";
      c6 && ne3.call(this, e, s2, t), s2.classList.toggle("psp-align-right", !c6 && a4), s2.classList.toggle("psp-align-left", c6 || !a4), s2.classList.toggle("psp-color-mode-bar", n2?.number_fg_mode === "bar" && a4);
    }
}
async function ce2(e, o, r) {
  let t = e.getMeta(r).column_header[this._config.split_by.length], i3 = (o.shiftKey ? Fe : He).call(this, t);
  this._preserve_focus_state = true, await e.parentElement.parentElement.restore({ sort: i3 });
}
function Fe(e) {
  let o = [], r = false;
  for (let s2 of this._config.sort) {
    let [t, l] = s2;
    if (t === e) {
      r = true;
      let i3 = de2.call(this, e, l);
      i3 && o.push(i3);
    } else
      o.push(s2);
  }
  return r || o.push([e, "desc"]), o;
}
function He(e) {
  for (let [o, r] of this._config.sort)
    if (o === e) {
      let s2 = de2.call(this, e, r);
      return s2 ? [s2] : [];
    }
  return [[e, "desc"]];
}
function de2(e, o) {
  let s2 = this._config.split_by.length > 0 ? Be : je, t = o ? s2[o] : "desc";
  if (t)
    return [e, t];
}
var je = { desc: "asc", asc: void 0 };
var Be = { desc: "asc", asc: "col desc", "col desc": "col asc", "col asc": void 0 };
function W3(e, o, r) {
  let t = e.getMeta(o).column_header[this._config.split_by.length], l = this._schema[t], i3 = l === "integer" || l === "float", n2 = document.createElement(`perspective-${{ float: "number", integer: "number", string: "string", date: "date", datetime: "datetime" }[l]}-column-style`), a4;
  if (i3 ? a4 = { fg_gradient: r, pos_fg_color: this._pos_fg_color[0], neg_fg_color: this._neg_fg_color[0], number_fg_mode: "color", bg_gradient: r, pos_bg_color: this._pos_bg_color[0], neg_bg_color: this._neg_bg_color[0], number_bg_mode: "disabled" } : a4 = { color: this._color[0], bg_color: this._color[0] }, !(l === "string" || l === "date" || l === "datetime"))
    if (l === "float")
      a4.fixed = 2;
    else if (l === "integer")
      a4.fixed = 0;
    else {
      this._open_column_styles_menu.pop(), o.classList.remove("psp-menu-open");
      return;
    }
  let c6 = () => n2.blur(), d2 = (g2) => {
    let p2 = g2.detail;
    p2.pos_fg_color && (p2.pos_fg_color = b3(p2.pos_fg_color), p2.neg_fg_color = b3(p2.neg_fg_color)), p2.pos_bg_color && (p2.pos_bg_color = b3(p2.pos_bg_color), p2.neg_bg_color = b3(p2.neg_bg_color)), p2.color && (p2.color = b3(p2.color)), p2.bg_color && (p2.bg_color = b3(p2.bg_color)), e[x3] = e[x3] || {}, e[x3][t] = p2, e.draw({ preserve_width: true }), e.parentElement.parentElement.dispatchEvent(new Event("perspective-config-update"));
  }, h2 = async () => {
    e.removeEventListener("regular-table-scroll", c6), n2.removeEventListener("perspective-column-style-change", d2), n2.removeEventListener("blur", h2);
    let g2 = this._open_column_styles_menu.pop();
    e.parentElement.parentElement.dispatchEvent(new Event("perspective-config-update")), g2 !== this._open_column_styles_menu[0] && o.classList.remove("psp-menu-open"), n2.destroy();
  };
  n2.addEventListener("perspective-column-style-change", d2), n2.addEventListener("blur", h2), e.addEventListener("regular-table-scroll", c6);
  let u = e[x3] || {}, _3 = Object.assign({}, u[t] = u[t] || {});
  (_3.pos_fg_color || _3.pos_bg_color) && (_3.pos_fg_color = _3.pos_fg_color?.[0], _3.neg_fg_color = _3.neg_fg_color?.[0], _3.pos_bg_color = _3.pos_bg_color?.[0], _3.neg_bg_color = _3.neg_bg_color?.[0]), _3.color && (_3.color = _3.color[0]), _3.bg_color && (_3.bg_color = _3.bg_color[0]), n2.open(o, _3, a4);
}
async function _e3(e, o) {
  let r = e.getMeta(o.target), s2 = o.target.classList.contains("psp-tree-label-collapse");
  o.shiftKey && s2 ? this._view.set_depth(r.row_header.filter((t) => t !== void 0).length - 2) : o.shiftKey ? this._view.set_depth(r.row_header.filter((t) => t !== void 0).length - 1) : s2 ? this._view.collapse(r.y) : this._view.expand(r.y), this._num_rows = await this._view.num_rows(), this._num_columns = await this._view.num_columns(), e.draw();
}
async function pe2(e, o) {
  if (o.which !== 1)
    return;
  let r = o.target;
  if (r.tagName !== "A") {
    for (; r.tagName !== "TD" && r.tagName !== "TH"; )
      if (r = r.parentElement, !e.contains(r))
        return;
    if (r.classList.contains("psp-tree-label")) {
      _e3.call(this, e, o), o.stopImmediatePropagation();
      return;
    }
    if (r.classList.contains("psp-menu-enabled")) {
      r.classList.add("psp-menu-open");
      let s2 = e.getMeta(r), t = s2.column_header?.[this._config.split_by.length], l = this._schema[t];
      if (this._open_column_styles_menu.unshift(s2._virtual_x), l === "string" || l === "date" || l === "datetime")
        W3.call(this, e, r);
      else {
        let [i3, n2] = await this._view.get_min_max(t), a4 = Math.max(Math.abs(i3), Math.abs(n2));
        a4 > 1 && (a4 = Math.round(a4 * 100) / 100), W3.call(this, e, r, a4);
      }
      o.preventDefault(), o.stopImmediatePropagation();
    } else
      r.classList.contains("psp-sort-enabled") && (ce2.call(this, e, o, r), o.stopImmediatePropagation());
  }
}
function ge2(e, o) {
  if (o.which !== 1)
    return;
  let r = o.target;
  for (; r.tagName !== "TD" && r.tagName !== "TH"; )
    if (r = r.parentElement, !e.contains(r))
      return;
  (r.classList.contains("psp-tree-label") && o.offsetX < 26 || r.classList.contains("psp-header-leaf") && !r.classList.contains("psp-header-corner")) && o.stopImmediatePropagation();
}
function he2(e, o = false) {
  let r = this._config.group_by.length === 0 && this._config.split_by.length === 0, s2 = e.hasAttribute("selectable"), t = o || !!e.children[0]._is_edit_mode;
  return r && !s2 && t;
}
function ue2(e, o) {
  let r = e[x3] || {}, s2 = he2.call(this, o);
  e.parentElement.classList.toggle("edit-mode-allowed", he2.call(this, o, true));
  for (let t of e.querySelectorAll("td")) {
    let l = e.getMeta(t), i3 = this.get_psp_type(l);
    if (s2 && this._is_editable[l.x]) {
      let n2 = l.column_header[this._config.split_by.length];
      i3 === "string" && r[n2]?.format === "link" ? (t.toggleAttribute("contenteditable", false), t.classList.toggle("boolean-editable", false)) : i3 === "boolean" ? (t.toggleAttribute("contenteditable", false), t.classList.toggle("boolean-editable", l.user !== null)) : (s2 !== t.hasAttribute("contenteditable") && t.toggleAttribute("contenteditable", s2), t.classList.toggle("boolean-editable", false));
    } else
      t.toggleAttribute("contenteditable", false), t.classList.toggle("boolean-editable", false);
  }
}
var O3 = (e, o, r) => {
  let s2 = e.querySelectorAll("td"), t = r.get(e);
  if (t) {
    for (let l of s2) {
      let i3 = e.getMeta(l);
      if (i3.x === t.x && i3.y === t.y)
        return document.activeElement !== l && l.focus({ preventScroll: true }), true;
    }
    document.activeElement !== document.body && e.contains(document.activeElement) && document.activeElement.blur();
  }
};
function Te2(e) {
  let o;
  return async function(...r) {
    if (!!o && await o && !!o)
      return;
    let s2;
    o = new Promise((t) => s2 = t), await e.apply(this, r), o = void 0, s2();
  };
}
function fe2() {
  if (this.isContentEditable) {
    let e = document.getSelection().getRangeAt(0), o = e.cloneRange();
    return o.selectNodeContents(this), o.setEnd(e.endContainer, e.endOffset), o.toString().length;
  } else
    return this.target.selectionStart;
}
function Y4(e, o, r) {
  let s2 = e.getMeta(r), t = o._schema[o._column_paths[s2.x]];
  if (s2) {
    let l = r.textContent, i3 = o._ids[s2.y - s2.y0];
    if (t === "float" || t === "integer") {
      if (l = parseFloat(l.replace(/,/g, "")), isNaN(l))
        return false;
    } else if (t === "date" || t === "datetime") {
      if (l = Date.parse(l), isNaN(l))
        return false;
    } else
      t === "boolean" && (l = l === "check" ? false : l === "close" ? true : null);
    let n2 = { __INDEX__: i3, [o._column_paths[s2.x]]: l };
    return o._table.update([n2], { port_id: o._edit_port }), true;
  }
}
function P2(e, o = false) {
  let r = this._config.group_by.length === 0 && this._config.split_by.length === 0, s2 = e.hasAttribute("selectable"), t = o || !!e.children[0]._is_edit_mode;
  return r && !s2 && t;
}
var M3 = Te2(async function(e, o, r, s2, t) {
  let l = e.getMeta(r), i3 = this._column_paths.length, n2 = this._num_rows, a4 = o.get(e);
  if (!a4)
    return;
  l.x + s2 < i3 && 0 <= l.x + s2 && (a4.x = l.x + s2), l.y + t < n2 && 0 <= l.y + t && (a4.y = l.y + t);
  let c6 = Math.max(l.x0 - 10, 0), d2 = Math.min(l.x0 + 10, i3), h2 = Math.max(l.y0 - 5, 0), u = Math.min(l.y0 + 10, n2), _3 = l.x0 + s2, g2 = l.y0 + t;
  for (; !O3(e, void 0, o) && _3 >= c6 && _3 < d2 && g2 >= h2 && g2 < u; )
    await e.scrollToCell(_3, g2, i3, n2), o.set(e, a4), _3 += s2, g2 += t;
});
function me2(e, o, r, s2) {
  if (!P2.call(this, o))
    return;
  let t = document.activeElement;
  switch (s2.target.classList.remove("psp-error"), s2.keyCode) {
    case 13:
      s2.preventDefault(), s2.shiftKey ? M3.call(this, e, r, t, 0, -1) : M3.call(this, e, r, t, 0, 1);
      break;
    case 37:
      fe2.call(t) == 0 && (s2.preventDefault(), M3.call(this, e, r, t, -1, 0));
      break;
    case 38:
      s2.preventDefault(), M3.call(this, e, r, t, 0, -1);
      break;
    case 39:
      fe2.call(t) == t.textContent.length && (s2.preventDefault(), M3.call(this, e, r, t, 1, 0));
      break;
    case 40:
      s2.preventDefault(), M3.call(this, e, r, t, 0, 1);
      break;
    default:
  }
}
function be(e, o, r) {
  let s2 = e.getMeta(r.target);
  if (typeof s2?.x < "u") {
    let t = P2.call(this, o), l = this._is_editable[s2.x], i3 = this.get_psp_type(s2) === "boolean", n2 = r.target.textContent === "-";
    t && l && i3 && !n2 && Y4(e, this, r.target);
  }
}
function ye2(e, o, r, s2) {
  if (P2.call(this, o) && r.has(e)) {
    s2.target.classList.remove("psp-error");
    let t = r.get(e);
    r.delete(e), t.content !== s2.target.textContent && (Y4(e, this, s2.target) || (s2.target.textContent = t.content, s2.target.classList.add("psp-error"), s2.target.focus()));
  }
}
function xe2(e, o, r, s2) {
  let t = e.getMeta(s2.target);
  if (t) {
    let l = { x: t.x, y: t.y, content: s2.target.textContent };
    r.set(e, l);
  }
}
async function C4({ _view: e, _config: o }, r, s2) {
  let t = o.group_by, l = o.split_by, i3 = r >= 0 ? r : 0, n2 = i3 + 1, a4 = await e.to_json({ start_row: i3, end_row: n2 }), d2 = a4.map((w3) => w3.__ROW_PATH__)[0] || [], h2 = t.map((w3, f3) => {
    let m2 = d2[f3];
    return m2 ? [w3, "==", m2] : void 0;
  }).filter((w3) => w3), u = t.length > 0 ? s2 + 1 : s2, _3 = Object.keys(a4[0])[u], g2 = { row: a4[0] }, p2 = [];
  if (_3) {
    let w3 = _3.split("|");
    g2.column_names = [w3[l.length]], p2 = l.map((f3, m2) => {
      let v2 = w3[m2];
      return v2 ? [f3, "==", v2] : void 0;
    }).filter((f3) => f3).filter(([, , f3]) => f3 !== "__ROW_PATH__");
  }
  let y4 = o.filter.concat(h2).concat(p2);
  return g2.config = { filter: y4 }, g2;
}
async function ve2(e, o, r, s2) {
  let t = e.getMeta(s2.target);
  if (!o.hasAttribute("selectable") || s2.handled || s2.which !== 1 || !t)
    return;
  let l = this._ids[t.y - t.y0];
  if (t && t.y >= 0) {
    let i3 = r.get(e), n2 = !!i3 && i3.reduce((_3, g2, p2) => _3 && g2 === l[p2], true), a4 = !!i3 && l.length === i3.length && n2, c6 = { selected: !a4 }, { row: d2, column_names: h2, config: u } = await C4(this, t.y, t.x);
    a4 ? (r.delete(e), c6 = { ...c6, row: d2, config: { filter: structuredClone(this._config.filter) } }) : (r.set(e, l), c6 = { ...c6, row: d2, column_names: h2, config: u }), await e.draw({ preserve_width: true }), s2.handled = true, o.dispatchEvent(new CustomEvent("perspective-select", { bubbles: true, composed: true, detail: c6 }));
  }
}
function we2(e, o, r) {
  if (!o.hasAttribute("selectable"))
    return;
  let s2 = r.has(e), t = r.get(e);
  for (let l of e.querySelectorAll("td"))
    if (!s2)
      l.classList.toggle("psp-row-selected", false), l.classList.toggle("psp-row-subselected", false);
    else {
      let i3 = e.getMeta(l), n2 = this._ids[i3.y - i3.y0], a4 = t.reduce((c6, d2, h2) => c6 && d2 === n2[h2], true);
      l.classList.toggle("psp-row-selected", n2.length === t.length && a4), l.classList.toggle("psp-row-subselected", n2.length !== t.length && a4);
    }
  for (let l of e.querySelectorAll("tbody th")) {
    let i3 = e.getMeta(l), n2 = this._ids[i3.y - i3.y0];
    if (!s2 || !!n2[i3.row_header_x])
      l.classList.toggle("psp-row-selected", false), l.classList.toggle("psp-row-subselected", false);
    else {
      let a4 = t.reduce((c6, d2, h2) => c6 && d2 === n2[h2], true);
      l.classList.toggle("psp-row-selected", n2.length === t.length && a4), l.classList.toggle("psp-row-subselected", n2.length !== t.length && a4);
    }
  }
}
async function ke2(e, o, r) {
  r.delete(e);
  for (let s2 of e.querySelectorAll("td,th"))
    s2.classList.toggle("psp-row-selected", false), s2.classList.toggle("psp-row-subselected", false);
}
var Le2 = { datetime: Intl.DateTimeFormat, date: Intl.DateTimeFormat, integer: Intl.NumberFormat, float: Intl.NumberFormat, boolean: class {
  format(e) {
    return e ? "check" : "close";
  }
} };
var I3 = class {
  constructor() {
    this._formatters = /* @__PURE__ */ new Map();
  }
  create_datetime_formatter(o, r) {
    let s2 = get_type_config(o);
    if (o === "datetime")
      if (r.format !== "custom") {
        let t = { ...s2.format, timeZone: r.timeZone, dateStyle: r.dateStyle, timeStyle: r.timeStyle };
        return t.dateStyle === "disabled" ? t.dateStyle = void 0 : t.dateStyle === void 0 && (t.dateStyle = s2.format.dateStyle), t.timeStyle === "disabled" ? t.timeStyle = void 0 : t.timeStyle === void 0 && (t.timeStyle = s2.format.timeStyle), new Intl.DateTimeFormat([], t);
      } else {
        let t = { timeZone: r.timeZone, second: r.second, minute: r.minute, hour: r.hour, day: r.day, weekday: r.weekday, month: r.month, year: r.year, hour12: r.hour12, fractionalSecondDigits: r.fractionalSecondDigits };
        return t.year === "disabled" ? t.year = void 0 : t.year === void 0 && (t.year = "2-digit"), t.month === "disabled" ? t.month = void 0 : t.month === void 0 && (t.month = "numeric"), t.day === "disabled" ? t.day = void 0 : t.day === void 0 && (t.day = "numeric"), t.weekday === "disabled" && (t.weekday = void 0), t.hour === "disabled" ? t.hour = void 0 : t.hour === void 0 && (t.hour = "numeric"), t.minute === "disabled" ? t.minute = void 0 : t.minute === void 0 && (t.minute = "numeric"), t.second === "disabled" ? t.second = void 0 : t.second === void 0 && (t.second = "numeric"), t.hour12 === void 0 && (t.hour12 = true), new Intl.DateTimeFormat([], t);
      }
    else {
      let t = { ...s2.format, dateStyle: r.dateStyle };
      return t.dateStyle === "disabled" ? t.dateStyle = void 0 : t.dateStyle === void 0 && (t.dateStyle = s2.format.dateStyle), new Intl.DateTimeFormat([], t);
    }
  }
  create_number_formatter(o, r) {
    let { format: s2 } = get_type_config(o);
    return r.fixed !== void 0 && (s2.minimumFractionDigits = r.fixed, s2.maximumFractionDigits = r.fixed), new Le2[o]([], s2);
  }
  create_boolean_formatter(o, r) {
    let s2 = get_type_config(o);
    return new Le2[o]([], s2.format);
  }
  get(o, r) {
    let s2 = [o, r.fixed, r.timeZone, r.dateStyle, r.timeStyle, r.fractionalSecondDigits, r.format, r.year, r.month, r.day, r.weekday, r.hour, r.minute, r.second, r.hour12].join("-");
    if (!this._formatters.has(s2)) {
      let t = get_type_config(o);
      o === "date" || o === "datetime" ? this._formatters.set(s2, this.create_datetime_formatter(o, r)) : o === "integer" || o === "float" ? this._formatters.set(s2, this.create_number_formatter(o, r)) : o === "boolean" ? this._formatters.set(s2, this.create_boolean_formatter(o, r)) : this._formatters.set(s2, false);
    }
    return this._formatters.get(s2);
  }
};
var Ve = new I3();
function N4(e, o, r = {}, s2 = false) {
  if (o === null)
    return "-";
  let t = s2 && this._table_schema[e] || this._schema[e] || "string", l = r[e] || {};
  if ((t === "integer" || t === "float") && l?.number_fg_mode === "bar") {
    let n2 = Math.max(0, Math.min(0.95, Math.abs(o / l.fg_gradient) * 0.95)), a4 = this._div_factory.get(), c6 = o >= 0 ? "left" : "right";
    return a4.setAttribute("style", `width:${(n2 * 100).toFixed(2)}%;position:absolute;${c6}:0;height:80%;top:10%;pointer-events:none;`), a4;
  } else if (l?.format === "link" && t === "string") {
    let n2 = document.createElement("a");
    return n2.setAttribute("href", o), n2.setAttribute("target", "_blank"), n2.textContent = o, n2;
  } else if (l?.format === "bold" && t === "string") {
    let n2 = document.createElement("b");
    return n2.textContent = o, n2;
  } else if (l?.format === "italics" && t === "string") {
    let n2 = document.createElement("i");
    return n2.textContent = o, n2;
  } else {
    let n2 = Ve.get(t, l);
    return n2 ? n2.format(o) : o;
  }
}
function* Ee2(e = [], o, r) {
  let s2 = r[x3];
  for (let t of e) {
    t = ["TOTAL", ...t];
    let l = t[t.length - 1];
    t = t.slice(0, t.length - 1).fill("");
    let i3 = N4.call(this, o[t.length - 1], l, s2, true);
    i3 instanceof HTMLElement ? t = t.concat(i3) : t = t.concat({ toString: () => i3 }), t.length = o.length + 1, yield t;
  }
}
function Se2() {
  let e, o, r, s2, t;
  return async function(i3, n2, a4, c6, d2) {
    let h2 = {}, u;
    c6 - n2 > 0 && d2 - a4 > 0 ? (this._is_old_viewport = this._last_window?.start_row === a4 && this._last_window?.end_row === d2 && this._last_window?.start_col === n2 && this._last_window?.end_col === c6, u = { start_row: a4, start_col: n2, end_row: d2, end_col: c6, id: true }, h2 = JSON.parse(await this._view.to_columns_string(u)), this._last_window = u, this._ids = h2.__ID__, this._reverse_columns = this._column_paths.slice(n2, c6).reduce((f3, m2, v2) => (f3.set(m2, v2), f3), /* @__PURE__ */ new Map()), this._reverse_ids = this._ids.reduce((f3, m2, v2) => (f3.set(m2?.join("|"), v2), f3), /* @__PURE__ */ new Map())) : this._div_factory.clear();
    let _3 = [], g2 = [], p2 = [], y4 = [], w3 = i3.parentElement.parentElement.hasAttribute("settings");
    for (let f3 = n2; f3 < Math.min(c6, this._column_paths.length); ++f3) {
      let m2 = this._column_paths[f3], v2 = m2.split("|"), k4 = h2[m2] || new Array(d2 - a4).fill(null);
      _3.push(k4.map((z4) => N4.call(this, v2[this._config.split_by.length], z4, i3[x3]))), g2.push(k4), w3 && v2.push("Edit"), p2.push(v2), y4.push(m2);
    }
    return c6 - n2 > 0 && d2 - a4 > 0 && (this.last_column_paths = o, this.last_meta = e, this.last_ids = r, this.last_reverse_ids = s2, this.last_reverse_columns = t, o = y4, e = g2, r = this._ids, s2 = this._reverse_ids, t = this._reverse_columns), { num_rows: this._num_rows, num_columns: this._column_paths.length, row_headers: Array.from(Ee2.call(this, h2.__ROW_PATH__, this._config.group_by, i3)), column_headers: p2, data: _3, metadata: g2, column_header_merge_depth: Math.max(0, this._config.split_by.length) };
  };
}
function D4(e, o, r) {
  let s2 = window.getComputedStyle(e).getPropertyValue(o).trim();
  return s2.length > 0 ? s2 : r;
}
var q4 = class {
  constructor(o) {
    this._name = o, this._elements = [], this._index = 0;
  }
  clear() {
    this._index = 0;
  }
  get() {
    this._elements[this._index] || (this._elements[this._index] = document.createElement(this._name));
    let o = this._elements[this._index];
    return this._index += 1, o;
  }
};
function Ye(e) {
  return e.x >= 0 ? this._column_types[e.x] : this._row_header_types[e.row_header_x - 1];
}
async function U4(e, o, r, s2 = {}) {
  let t = await r.get_config(), l = t.expressions.map((L3) => L3[1]), [i3, n2, a4, c6, d2, h2, u] = await Promise.all([o.schema(), o.validate_expressions(l), r.num_rows(), r.schema(), r.expression_schema(), r.column_paths(), this.parentElement.getEditPort()]), _3 = (0, import_chroma_js4.default)(D4(e, "--plugin--background", "#FFFFFF")).rgb(), g2 = b3(D4(e, "--rt-pos-cell--color", "#338DCD")), p2 = b3(D4(e, "--rt-neg-cell--color", "#FF5942")), y4 = b3(V4(g2[0], _3)), w3 = b3(V4(p2[0], _3)), f3 = b3(D4(e, "--active--color", "#ff0000")), m2 = { ...c6, ...d2 }, v2 = { ...i3, ...n2.expression_schema }, k4 = h2.filter((L3) => L3 !== "__ROW_PATH__" && L3 !== "__ID__"), z4 = [], G4 = [];
  for (let L3 of k4) {
    let J3 = L3.split("|")[t.split_by.length];
    G4.push(m2[J3]), z4.push(!!i3[J3]);
  }
  let A6 = Object.assign(s2, { _edit_port: u, _view: r, _table: o, _table_schema: v2, _config: t, _num_rows: a4, _schema: m2, _ids: [], _open_column_styles_menu: [], _plugin_background: _3, _color: f3, _pos_fg_color: g2, _neg_fg_color: p2, _pos_bg_color: y4, _neg_bg_color: w3, _column_paths: k4, _column_types: G4, _is_editable: z4, _row_header_types: t.group_by.map((L3) => v2[L3]), _series_color_map: /* @__PURE__ */ new Map(), _series_color_seed: /* @__PURE__ */ new Map(), get_psp_type: Ye });
  return A6._div_factory = A6._div_factory || new q4("div"), e.setDataListener(Se2().bind(A6, e), { virtual_mode: window.getComputedStyle(e).getPropertyValue("--datagrid-virtual-mode")?.trim() || "both" }), A6;
}
async function Me(e, o, r) {
  let s2 = e.getMeta(r.target);
  if (!s2)
    return;
  let { x: t, y: l } = s2, { row: i3, column_names: n2, config: a4 } = await C4(this, l, t);
  o.dispatchEvent(new CustomEvent("perspective-click", { bubbles: true, composed: true, detail: { row: i3, column_names: n2, config: a4 } }));
}
async function Ce(e) {
  let o = this.parentElement, r = await o.getTable(true);
  if (this._initialized)
    await U4.call(this, this.regular_table, r, e, this.model);
  else {
    this.innerHTML = "", this.appendChild(this.regular_table), this.model = await U4.call(this, this.regular_table, r, e), this.regular_table.addStyleListener(ae3.bind(this.model, this.regular_table)), this.regular_table.addStyleListener(Q3.bind(this.model, this.regular_table)), this.regular_table.addStyleListener(X3.bind(this.model, this.regular_table)), this.regular_table.addEventListener("click", ge2.bind(this.model, this.regular_table)), this.regular_table.addEventListener("mousedown", pe2.bind(this.model, this.regular_table));
    let s2 = /* @__PURE__ */ new WeakMap();
    this.regular_table.addStyleListener(we2.bind(this.model, this.regular_table, o, s2)), this.regular_table.addEventListener("mousedown", ve2.bind(this.model, this.regular_table, o, s2)), this.regular_table.addEventListener("psp-deselect-all", ke2.bind(this.model, this.regular_table, o, s2)), this.regular_table.addEventListener("click", Me.bind(this.model, this.regular_table, o));
    let t = /* @__PURE__ */ new WeakMap();
    this.regular_table.addStyleListener(ue2.bind(this.model, this.regular_table, o)), this.regular_table.addStyleListener(O3.bind(this.model, this.regular_table, o, t)), this.regular_table.addEventListener("click", be.bind(this.model, this.regular_table, o)), this.regular_table.addEventListener("focusin", xe2.bind(this.model, this.regular_table, o, t)), this.regular_table.addEventListener("focusout", ye2.bind(this.model, this.regular_table, o, t)), this.regular_table.addEventListener("keydown", me2.bind(this.model, this.regular_table, o, t)), this._initialized = true;
  }
}
function $3(e, o = false) {
  if (!this._initialized)
    return;
  o && (this._cached_column_sizes = e);
  let r = {}, { group_by: s2, columns: t } = this.model._config, l = s2?.length > 0 ? s2.length + 1 : 0;
  for (let i3 of Object.keys(e))
    if (i3 === "__ROW_PATH__")
      r[l - 1] = e[i3];
    else {
      let n2 = this.model._column_paths.indexOf(i3);
      r[n2 + l] = e[i3];
    }
  this.regular_table._column_sizes.override = r;
}
function F4() {
  if (!this._initialized)
    return [];
  if (this._cached_column_sizes) {
    let l = this._cached_column_sizes;
    return this._cached_column_sizes = void 0, l;
  }
  let e = this.regular_table._column_sizes.override, { group_by: o, columns: r } = this.model._config, s2 = o?.length > 0 ? o.length + 1 : 0, t = {};
  for (let l of Object.keys(e))
    if (e[l] !== void 0) {
      let i3 = l - s2;
      i3 > -1 ? t[this.model._column_paths[i3]] = e[l] : i3 === -1 && (t.__ROW_PATH__ = e[l]);
    }
  return t;
}
function H3(e = void 0) {
  typeof e > "u" && (e = !this._is_edit_mode), this._is_edit_mode = e, this.classList.toggle("editable", e), this._edit_mode !== void 0 && (this._edit_mode.classList.toggle("editable", e), e ? this._edit_mode.children[0].textContent = "Editable" : this._edit_mode.children[0].textContent = "Read Only");
}
function j4(e = void 0) {
  typeof e > "u" && (e = !this._is_scroll_lock), this._is_scroll_lock = e, this.classList.toggle("sub-cell-scroll-disabled", e), this._scroll_lock !== void 0 && (this._scroll_lock.classList.toggle("lock-scroll", e), e ? this._scroll_lock.children[0].textContent = "Align Scroll" : this._scroll_lock.children[0].textContent = "Free Scroll");
}
function ze2(e) {
  e = JSON.parse(JSON.stringify(e));
  let o = {};
  if (e.columns)
    for (let s2 of Object.keys(e.columns)) {
      let t = e.columns[s2];
      t.column_size_override !== void 0 && (o[s2] = t.column_size_override, delete t.column_size_override), t?.pos_fg_color && (t.pos_fg_color = b3(t.pos_fg_color), t.neg_fg_color = b3(t.neg_fg_color)), t?.pos_bg_color && (t.pos_bg_color = b3(t.pos_bg_color), t.neg_bg_color = b3(t.neg_bg_color)), t?.color && (t.color = b3(t.color)), Object.keys(t).length === 0 && delete e.columns[s2];
    }
  "editable" in e && H3.call(this, e.editable), "scroll_lock" in e && j4.call(this, e.scroll_lock);
  let r = this.regular_table;
  try {
    r._resetAutoSize();
  } catch {
  }
  $3.call(this, o, true), r[x3] = e.columns;
}
function Ae2() {
  this._toolbar || (this._toolbar = document.createElement("perspective-viewer-datagrid-toolbar")), this.parentElement.appendChild(this._toolbar);
}
function Oe() {
  if (this.regular_table) {
    let e = this.regular_table, o = { columns: {}, scroll_lock: !!this._is_scroll_lock, editable: !!this._is_edit_mode };
    for (let s2 of Object.keys(e[x3] || {})) {
      let t = Object.assign({}, e[x3][s2]);
      (t?.pos_fg_color || t?.pos_bg_color) && (t.pos_fg_color = t.pos_fg_color?.[0], t.neg_fg_color = t.neg_fg_color?.[0], t.pos_bg_color = t.pos_bg_color?.[0], t.neg_bg_color = t.neg_bg_color?.[0]), t?.color && (t.color = t.color[0]), o.columns[s2] = t;
    }
    let r = F4.call(this);
    for (let s2 of Object.keys(r || {}))
      o.columns[s2] || (o.columns[s2] = {}), o.columns[s2].column_size_override = r[s2];
    return JSON.parse(JSON.stringify(o));
  }
  return {};
}
async function Pe2(e) {
  if (this.parentElement && await this.activate(e), !this.isConnected || this.offsetParent == null)
    return;
  let o = F4.call(this), r = this.regular_table.draw({ invalid_columns: true });
  this.model._preserve_focus_state ? this.model._preserve_focus_state = false : (this.regular_table.scrollTop = 0, this.regular_table.scrollLeft = 0, this.regular_table.dispatchEvent(new CustomEvent("psp-deselect-all", { bubbles: false })), this.regular_table._resetAutoSize()), $3.call(this, o), await r, this._toolbar.classList.toggle("aggregated", this.model._config.group_by.length > 0 || this.model._config.split_by.length > 0);
}
var B4 = class extends HTMLElement {
  constructor() {
    super(), this.regular_table = document.createElement("regular-table"), this._is_scroll_lock = false;
  }
  connectedCallback() {
    return Ae2.call(this);
  }
  disconnectedCallback() {
    this._toolbar.parentElement.removeChild(this._toolbar);
  }
  async activate(o) {
    return await Ce.call(this, o);
  }
  get name() {
    return "Datagrid";
  }
  get category() {
    return "Basic";
  }
  get select_mode() {
    return "toggle";
  }
  get min_config_columns() {
  }
  get config_column_names() {
    return ["Columns"];
  }
  get priority() {
    return 1;
  }
  async draw(o) {
    return await Pe2.call(this, o);
  }
  async update(o) {
    this.model._num_rows = await o.num_rows(), await this.regular_table.draw();
  }
  async resize() {
    !this.isConnected || this.offsetParent == null || this._initialized && await this.regular_table.draw();
  }
  async clear() {
    this.regular_table._resetAutoSize(), this.regular_table.clear();
  }
  save() {
    return Oe.call(this);
  }
  restore(o) {
    return ze2.call(this, o);
  }
  async restyle(o) {
    await this.draw(o);
  }
  delete() {
    this.regular_table.table_model && this.regular_table._resetAutoSize(), this.regular_table.clear();
  }
};
var Re2 = ':host{position:relative;display:block;}:host #container{position:absolute;display:flex;flex-direction:column;justify-content:stretch;align-items:stretch;top:0;left:0;right:0;bottom:0;}:host #toolbar{display:flex;align-items:center;height:36px;}:host #slot-container{flex:1;position:relative;}#scroll_lock.lock-scroll:before{-webkit-mask-image:var(--toolbar-scroll-lock-active--content);}#scroll_lock:before{-webkit-mask-image:var(--toolbar-scroll-lock--content);}#select_mode:before{content:"highlight_alt";}#edit_mode:before{-webkit-mask-image:var(--toolbar-edit-mode--content);}#edit_mode.editable:before{-webkit-mask-image:var(--toolbar-edit-mode-active--content);}:host(.aggregated) #toolbar #edit_mode{display:none;}.button:before{width:25px;height:21px;content:"";-webkit-mask-image:cover;mask-image:cover;background-color:var(--icon--color,#ccc);margin:0 5px;}.button.editable:before,.button.lock-scroll:before{color:inherit;}.button{display:inline-flex;align-items:center;user-select:none;width:37px;height:22px;box-sizing:border-box;white-space:nowrap;border:1px solid transparent;border-radius:3px;}.button>span{display:none;margin:0;padding:0;}.button:hover{background-color:var(--icon--color);color:var(--plugin--background);opacity:1;display:flex;align-items:center;cursor:pointer;min-width:var(--button--min-width,105px);}.button:hover:before{background-color:var(--plugin--background);margin:0 5px 0 5px;}.button:hover>span{display:contents;font-size:9px;line-height:36px;}';
var T2 = class extends HTMLElement {
  connectedCallback() {
    if (this._initialized)
      return;
    this._initialized = true, this.setAttribute("slot", "plugin-settings"), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = `
            <style>
                ${Re2}
            </style>
            <div id="toolbar">
                <span id="scroll_lock" class="button">
                    <span>Free Scroll</span>
                </span>
                <span id="edit_mode" class="button"><span>Read Only</span></span>
            </div>
        `;
    let o = this.parentElement, r = o.querySelector("perspective-viewer-datagrid");
    r._scroll_lock = this.shadowRoot.querySelector("#scroll_lock"), r._scroll_lock.addEventListener("click", () => j4.call(r)), r._edit_mode = this.shadowRoot.querySelector("#edit_mode"), r._edit_mode.addEventListener("click", () => {
      H3.call(r), r.regular_table.draw(), o.dispatchEvent(new Event("perspective-config-update"));
    });
  }
};
function Ue() {
  let e = document.createElement("style");
  e.textContent = Z4, document.head.insertBefore(e, document.head.firstChild);
}
async function Ge2() {
  customElements.define("perspective-viewer-datagrid-toolbar", T2), customElements.define("perspective-viewer-datagrid", B4), await customElements.whenDefined("perspective-viewer"), customElements.get("perspective-viewer").registerPlugin("perspective-viewer-datagrid");
}
Ge2();
Ue();

// node_modules/@finos/perspective-viewer-d3fc/dist/esm/perspective-viewer-d3fc.js
var Qr = __toESM(require_d3fc());
var fe3 = __toESM(require_d3fc());

// node_modules/d3/src/index.js
init_src2();
init_src21();
init_src3();
init_src16();
init_src17();
init_src10();
init_src19();
init_src11();
init_src5();

// node_modules/d3-hierarchy/src/hierarchy/count.js
function count2(node) {
  var sum3 = 0, children2 = node.children, i3 = children2 && children2.length;
  if (!i3)
    sum3 = 1;
  else
    while (--i3 >= 0)
      sum3 += children2[i3].value;
  node.value = sum3;
}
function count_default() {
  return this.eachAfter(count2);
}

// node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default2(callback, that) {
  let index2 = -1;
  for (const node of this) {
    callback.call(that, node, ++index2, this);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback, that) {
  var node = this, nodes = [node], children2, i3, index2 = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index2, this);
    if (children2 = node.children) {
      for (i3 = children2.length - 1; i3 >= 0; --i3) {
        nodes.push(children2[i3]);
      }
    }
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback, that) {
  var node = this, nodes = [node], next = [], children2, i3, n2, index2 = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children2 = node.children) {
      for (i3 = 0, n2 = children2.length; i3 < n2; ++i3) {
        nodes.push(children2[i3]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index2, this);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/find.js
function find_default(callback, that) {
  let index2 = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index2, this)) {
      return node;
    }
  }
}

// node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value) {
  return this.eachAfter(function(node) {
    var sum3 = +value(node.data) || 0, children2 = node.children, i3 = children2 && children2.length;
    while (--i3 >= 0)
      sum3 += children2[i3].value;
    node.value = sum3;
  });
}

// node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default2(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

// node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k4 = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k4, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a4, b4) {
  if (a4 === b4)
    return a4;
  var aNodes = a4.ancestors(), bNodes = b4.ancestors(), c6 = null;
  a4 = aNodes.pop();
  b4 = bNodes.pop();
  while (a4 === b4) {
    c6 = a4;
    a4 = aNodes.pop();
    b4 = bNodes.pop();
  }
  return c6;
}

// node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

// node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  return Array.from(this);
}

// node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

// node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root3 = this, links = [];
  root3.each(function(node) {
    if (node !== root3) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}

// node_modules/d3-hierarchy/src/hierarchy/iterator.js
function* iterator_default2() {
  var node = this, current, next = [node], children2, i3, n2;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children2 = node.children) {
        for (i3 = 0, n2 = children2.length; i3 < n2; ++i3) {
          next.push(children2[i3]);
        }
      }
    }
  } while (next.length);
}

// node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children2) {
  if (data instanceof Map) {
    data = [void 0, data];
    if (children2 === void 0)
      children2 = mapChildren;
  } else if (children2 === void 0) {
    children2 = objectChildren;
  }
  var root3 = new Node2(data), node, nodes = [root3], child, childs, i3, n2;
  while (node = nodes.pop()) {
    if ((childs = children2(node.data)) && (n2 = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i3 = n2 - 1; i3 >= 0; --i3) {
        nodes.push(child = childs[i3] = new Node2(childs[i3]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root3.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d2) {
  return d2.children;
}
function mapChildren(d2) {
  return Array.isArray(d2) ? d2[1] : null;
}
function copyData(node) {
  if (node.data.value !== void 0)
    node.value = node.data.value;
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node2(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node2.prototype = hierarchy.prototype = {
  constructor: Node2,
  count: count_default,
  each: each_default2,
  eachAfter: eachAfter_default,
  eachBefore: eachBefore_default,
  find: find_default,
  sum: sum_default,
  sort: sort_default2,
  path: path_default,
  ancestors: ancestors_default,
  descendants: descendants_default,
  leaves: leaves_default,
  links: links_default,
  copy: node_copy,
  [Symbol.iterator]: iterator_default2
};

// node_modules/d3-hierarchy/src/accessors.js
function required(f3) {
  if (typeof f3 !== "function")
    throw new Error();
  return f3;
}

// node_modules/d3-hierarchy/src/constant.js
function constantZero() {
  return 0;
}
function constant_default7(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-hierarchy/src/treemap/round.js
function round_default2(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}

// node_modules/d3-hierarchy/src/treemap/dice.js
function dice_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, node, i3 = -1, n2 = nodes.length, k4 = parent.value && (x1 - x0) / parent.value;
  while (++i3 < n2) {
    node = nodes[i3], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k4;
  }
}

// node_modules/d3-hierarchy/src/partition.js
function partition_default() {
  var dx = 1, dy = 1, padding = 0, round = false;
  function partition(root3) {
    var n2 = root3.height + 1;
    root3.x0 = root3.y0 = padding;
    root3.x1 = dx;
    root3.y1 = dy / n2;
    root3.eachBefore(positionNode(dy, n2));
    if (round)
      root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(dy2, n2) {
    return function(node) {
      if (node.children) {
        dice_default(node, node.x0, dy2 * (node.depth + 1) / n2, node.x1, dy2 * (node.depth + 2) / n2);
      }
      var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
      if (x1 < x0)
        x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0)
        y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }
  partition.round = function(x5) {
    return arguments.length ? (round = !!x5, partition) : round;
  };
  partition.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], partition) : [dx, dy];
  };
  partition.padding = function(x5) {
    return arguments.length ? (padding = +x5, partition) : padding;
  };
  return partition;
}

// node_modules/d3-hierarchy/src/treemap/slice.js
function slice_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, node, i3 = -1, n2 = nodes.length, k4 = parent.value && (y1 - y0) / parent.value;
  while (++i3 < n2) {
    node = nodes[i3], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k4;
  }
}

// node_modules/d3-hierarchy/src/treemap/squarify.js
var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n2 = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
  while (i0 < n2) {
    dx = x1 - x0, dy = y1 - y0;
    do
      sumValue = nodes[i1++].value;
    while (!sumValue && i1 < n2);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (; i1 < n2; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue)
        minValue = nodeValue;
      if (nodeValue > maxValue)
        maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice)
      dice_default(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else
      slice_default(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }
  return rows;
}
var squarify_default = function custom8(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }
  squarify.ratio = function(x5) {
    return custom8((x5 = +x5) > 1 ? x5 : 1);
  };
  return squarify;
}(phi);

// node_modules/d3-hierarchy/src/treemap/index.js
function treemap_default() {
  var tile = squarify_default, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
  function treemap(root3) {
    root3.x0 = root3.y0 = 0;
    root3.x1 = dx;
    root3.y1 = dy;
    root3.eachBefore(positionNode);
    paddingStack = [0];
    if (round)
      root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(node) {
    var p2 = paddingStack[node.depth], x0 = node.x0 + p2, y0 = node.y0 + p2, x1 = node.x1 - p2, y1 = node.y1 - p2;
    if (x1 < x0)
      x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0)
      y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p2 = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p2;
      y0 += paddingTop(node) - p2;
      x1 -= paddingRight(node) - p2;
      y1 -= paddingBottom(node) - p2;
      if (x1 < x0)
        x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0)
        y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }
  treemap.round = function(x5) {
    return arguments.length ? (round = !!x5, treemap) : round;
  };
  treemap.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], treemap) : [dx, dy];
  };
  treemap.tile = function(x5) {
    return arguments.length ? (tile = required(x5), treemap) : tile;
  };
  treemap.padding = function(x5) {
    return arguments.length ? treemap.paddingInner(x5).paddingOuter(x5) : treemap.paddingInner();
  };
  treemap.paddingInner = function(x5) {
    return arguments.length ? (paddingInner = typeof x5 === "function" ? x5 : constant_default7(+x5), treemap) : paddingInner;
  };
  treemap.paddingOuter = function(x5) {
    return arguments.length ? treemap.paddingTop(x5).paddingRight(x5).paddingBottom(x5).paddingLeft(x5) : treemap.paddingTop();
  };
  treemap.paddingTop = function(x5) {
    return arguments.length ? (paddingTop = typeof x5 === "function" ? x5 : constant_default7(+x5), treemap) : paddingTop;
  };
  treemap.paddingRight = function(x5) {
    return arguments.length ? (paddingRight = typeof x5 === "function" ? x5 : constant_default7(+x5), treemap) : paddingRight;
  };
  treemap.paddingBottom = function(x5) {
    return arguments.length ? (paddingBottom = typeof x5 === "function" ? x5 : constant_default7(+x5), treemap) : paddingBottom;
  };
  treemap.paddingLeft = function(x5) {
    return arguments.length ? (paddingLeft = typeof x5 === "function" ? x5 : constant_default7(+x5), treemap) : paddingLeft;
  };
  return treemap;
}

// node_modules/d3-hierarchy/src/treemap/binary.js
function binary_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, i3, n2 = nodes.length, sum3, sums = new Array(n2 + 1);
  for (sums[0] = sum3 = i3 = 0; i3 < n2; ++i3) {
    sums[i3 + 1] = sum3 += nodes[i3].value;
  }
  partition(0, n2, parent.value, x0, y0, x1, y1);
  function partition(i4, j5, value, x02, y02, x12, y12) {
    if (i4 >= j5 - 1) {
      var node = nodes[i4];
      node.x0 = x02, node.y0 = y02;
      node.x1 = x12, node.y1 = y12;
      return;
    }
    var valueOffset = sums[i4], valueTarget = value / 2 + valueOffset, k4 = i4 + 1, hi = j5 - 1;
    while (k4 < hi) {
      var mid = k4 + hi >>> 1;
      if (sums[mid] < valueTarget)
        k4 = mid + 1;
      else
        hi = mid;
    }
    if (valueTarget - sums[k4 - 1] < sums[k4] - valueTarget && i4 + 1 < k4)
      --k4;
    var valueLeft = sums[k4] - valueOffset, valueRight = value - valueLeft;
    if (x12 - x02 > y12 - y02) {
      var xk = value ? (x02 * valueRight + x12 * valueLeft) / value : x12;
      partition(i4, k4, valueLeft, x02, y02, xk, y12);
      partition(k4, j5, valueRight, xk, y02, x12, y12);
    } else {
      var yk = value ? (y02 * valueRight + y12 * valueLeft) / value : y12;
      partition(i4, k4, valueLeft, x02, y02, x12, yk);
      partition(k4, j5, valueRight, x02, yk, x12, y12);
    }
  }
}

// node_modules/d3/src/index.js
init_src4();
init_src12();
init_src9();
init_src8();
init_src15();
init_src13();
init_src14();
init_src6();
init_src7();
init_src18();
init_src20();
init_src22();

// node_modules/@finos/perspective-viewer-d3fc/dist/esm/perspective-viewer-d3fc.js
var import_d3fc = __toESM(require_d3fc());
var import_d3fc2 = __toESM(require_d3fc());
var Q4 = __toESM(require_d3fc());
init_src2();
var Fe2 = __toESM(require_d3fc());
var de3 = __toESM(require_d3fc());
var import_d3fc3 = __toESM(require_d3fc());
var Ce2 = __toESM(require_d3fc());
var ie4 = __toESM(require_d3fc());
var import_d3fc4 = __toESM(require_d3fc());

// node_modules/d3-svg-legend/node_modules/d3-selection/src/namespaces.js
var xhtml2 = "http://www.w3.org/1999/xhtml";
var namespaces_default2 = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml2,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-svg-legend/node_modules/d3-selection/src/namespace.js
function namespace_default2(name) {
  var prefix2 = name += "", i3 = prefix2.indexOf(":");
  if (i3 >= 0 && (prefix2 = name.slice(0, i3)) !== "xmlns")
    name = name.slice(i3 + 1);
  return namespaces_default2.hasOwnProperty(prefix2) ? { space: namespaces_default2[prefix2], local: name } : name;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/creator.js
function creatorInherit2(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml2 && document2.documentElement.namespaceURI === xhtml2 ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed2(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default2(name) {
  var fullname = namespace_default2(name);
  return (fullname.local ? creatorFixed2 : creatorInherit2)(fullname);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/local.js
var nextId2 = 0;
function local3() {
  return new Local2();
}
function Local2() {
  this._ = "@" + (++nextId2).toString(36);
}
Local2.prototype = local3.prototype = {
  constructor: Local2,
  get: function(node) {
    var id2 = this._;
    while (!(id2 in node))
      if (!(node = node.parentNode))
        return;
    return node[id2];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

// node_modules/d3-svg-legend/node_modules/d3-selection/src/matcher.js
var matcher = function(selector) {
  return function() {
    return this.matches(selector);
  };
};
if (typeof document !== "undefined") {
  element = document.documentElement;
  if (!element.matches) {
    vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
    matcher = function(selector) {
      return function() {
        return vendorMatches.call(this, selector);
      };
    };
  }
}
var element;
var vendorMatches;
var matcher_default2 = matcher;

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/on.js
var filterEvents = {};
var event = null;
if (typeof document !== "undefined") {
  element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
  }
}
var element;
function filterContextListener(listener, index2, group2) {
  listener = contextListener2(listener, index2, group2);
  return function(event2) {
    var related = event2.relatedTarget;
    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event2);
    }
  };
}
function contextListener2(listener, index2, group2) {
  return function(event1) {
    var event0 = event;
    event = event1;
    try {
      listener.call(this, this.__data__, index2, group2);
    } finally {
      event = event0;
    }
  };
}
function parseTypenames3(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i3 = t.indexOf(".");
    if (i3 >= 0)
      name = t.slice(i3 + 1), t = t.slice(0, i3);
    return { type: t, name };
  });
}
function onRemove2(typename) {
  return function() {
    var on2 = this.__on;
    if (!on2)
      return;
    for (var j5 = 0, i3 = -1, m2 = on2.length, o; j5 < m2; ++j5) {
      if (o = on2[j5], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on2[++i3] = o;
      }
    }
    if (++i3)
      on2.length = i3;
    else
      delete this.__on;
  };
}
function onAdd2(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener2;
  return function(d2, i3, group2) {
    var on2 = this.__on, o, listener = wrap(value, i3, group2);
    if (on2)
      for (var j5 = 0, m2 = on2.length; j5 < m2; ++j5) {
        if ((o = on2[j5]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.capture);
          this.addEventListener(o.type, o.listener = listener, o.capture = capture);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, capture);
    o = { type: typename.type, name: typename.name, value, listener, capture };
    if (!on2)
      this.__on = [o];
    else
      on2.push(o);
  };
}
function on_default3(typename, value, capture) {
  var typenames = parseTypenames3(typename + ""), i3, n2 = typenames.length, t;
  if (arguments.length < 2) {
    var on2 = this.node().__on;
    if (on2)
      for (var j5 = 0, m2 = on2.length, o; j5 < m2; ++j5) {
        for (i3 = 0, o = on2[j5]; i3 < n2; ++i3) {
          if ((t = typenames[i3]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on2 = value ? onAdd2 : onRemove2;
  if (capture == null)
    capture = false;
  for (i3 = 0; i3 < n2; ++i3)
    this.each(on2(typenames[i3], value, capture));
  return this;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selector.js
function none2() {
}
function selector_default2(selector) {
  return selector == null ? none2 : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/select.js
function select_default4(select) {
  if (typeof select !== "function")
    select = selector_default2(select);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, subgroup = subgroups[j5] = new Array(n2), node, subnode, i3 = 0; i3 < n2; ++i3) {
      if ((node = group2[i3]) && (subnode = select.call(node, node.__data__, i3, group2))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i3] = subnode;
      }
    }
  }
  return new Selection3(subgroups, this._parents);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selectorAll.js
function empty4() {
  return [];
}
function selectorAll_default2(selector) {
  return selector == null ? empty4 : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/selectAll.js
function selectAll_default4(select) {
  if (typeof select !== "function")
    select = selectorAll_default2(select);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents = [], j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        subgroups.push(select.call(node, node.__data__, i3, group2));
        parents.push(node);
      }
    }
  }
  return new Selection3(subgroups, parents);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/filter.js
function filter_default3(match) {
  if (typeof match !== "function")
    match = matcher_default2(match);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, subgroup = subgroups[j5] = [], node, i3 = 0; i3 < n2; ++i3) {
      if ((node = group2[i3]) && match.call(node, node.__data__, i3, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection3(subgroups, this._parents);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sparse.js
function sparse_default2(update) {
  return new Array(update.length);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/enter.js
function enter_default2() {
  return new Selection3(this._enter || this._groups.map(sparse_default2), this._parents);
}
function EnterNode2(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode2.prototype = {
  constructor: EnterNode2,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-svg-legend/node_modules/d3-selection/src/constant.js
function constant_default8(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/data.js
var keyPrefix = "$";
function bindIndex2(parent, group2, enter, update, exit, data) {
  var i3 = 0, node, groupLength = group2.length, dataLength = data.length;
  for (; i3 < dataLength; ++i3) {
    if (node = group2[i3]) {
      node.__data__ = data[i3];
      update[i3] = node;
    } else {
      enter[i3] = new EnterNode2(parent, data[i3]);
    }
  }
  for (; i3 < groupLength; ++i3) {
    if (node = group2[i3]) {
      exit[i3] = node;
    }
  }
}
function bindKey2(parent, group2, enter, update, exit, data, key) {
  var i3, node, nodeByKeyValue = {}, groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i3 = 0; i3 < groupLength; ++i3) {
    if (node = group2[i3]) {
      keyValues[i3] = keyValue = keyPrefix + key.call(node, node.__data__, i3, group2);
      if (keyValue in nodeByKeyValue) {
        exit[i3] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }
  for (i3 = 0; i3 < dataLength; ++i3) {
    keyValue = keyPrefix + key.call(parent, data[i3], i3, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i3] = node;
      node.__data__ = data[i3];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i3] = new EnterNode2(parent, data[i3]);
    }
  }
  for (i3 = 0; i3 < groupLength; ++i3) {
    if ((node = group2[i3]) && nodeByKeyValue[keyValues[i3]] === node) {
      exit[i3] = node;
    }
  }
}
function data_default2(value, key) {
  if (!value) {
    data = new Array(this.size()), j5 = -1;
    this.each(function(d2) {
      data[++j5] = d2;
    });
    return data;
  }
  var bind = key ? bindKey2 : bindIndex2, parents = this._parents, groups2 = this._groups;
  if (typeof value !== "function")
    value = constant_default8(value);
  for (var m2 = groups2.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    var parent = parents[j5], group2 = groups2[j5], groupLength = group2.length, data = value.call(parent, parent && parent.__data__, j5, parents), dataLength = data.length, enterGroup = enter[j5] = new Array(dataLength), updateGroup = update[j5] = new Array(dataLength), exitGroup = exit[j5] = new Array(groupLength);
    bind(parent, group2, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection3(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/exit.js
function exit_default2() {
  return new Selection3(this._exit || this._groups.map(sparse_default2), this._parents);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/merge.js
function merge_default3(selection3) {
  for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j5 = 0; j5 < m2; ++j5) {
    for (var group0 = groups0[j5], group1 = groups1[j5], n2 = group0.length, merge2 = merges[j5] = new Array(n2), node, i3 = 0; i3 < n2; ++i3) {
      if (node = group0[i3] || group1[i3]) {
        merge2[i3] = node;
      }
    }
  }
  for (; j5 < m0; ++j5) {
    merges[j5] = groups0[j5];
  }
  return new Selection3(merges, this._parents);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/order.js
function order_default2() {
  for (var groups2 = this._groups, j5 = -1, m2 = groups2.length; ++j5 < m2; ) {
    for (var group2 = groups2[j5], i3 = group2.length - 1, next = group2[i3], node; --i3 >= 0; ) {
      if (node = group2[i3]) {
        if (next && next !== node.nextSibling)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sort.js
function sort_default3(compare) {
  if (!compare)
    compare = ascending3;
  function compareNode(a4, b4) {
    return a4 && b4 ? compare(a4.__data__, b4.__data__) : !a4 - !b4;
  }
  for (var groups2 = this._groups, m2 = groups2.length, sortgroups = new Array(m2), j5 = 0; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], n2 = group2.length, sortgroup = sortgroups[j5] = new Array(n2), node, i3 = 0; i3 < n2; ++i3) {
      if (node = group2[i3]) {
        sortgroup[i3] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection3(sortgroups, this._parents).order();
}
function ascending3(a4, b4) {
  return a4 < b4 ? -1 : a4 > b4 ? 1 : a4 >= b4 ? 0 : NaN;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/call.js
function call_default2() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/nodes.js
function nodes_default2() {
  var nodes = new Array(this.size()), i3 = -1;
  this.each(function() {
    nodes[++i3] = this;
  });
  return nodes;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/node.js
function node_default2() {
  for (var groups2 = this._groups, j5 = 0, m2 = groups2.length; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], i3 = 0, n2 = group2.length; i3 < n2; ++i3) {
      var node = group2[i3];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/size.js
function size_default2() {
  var size = 0;
  this.each(function() {
    ++size;
  });
  return size;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/empty.js
function empty_default2() {
  return !this.node();
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/each.js
function each_default3(callback) {
  for (var groups2 = this._groups, j5 = 0, m2 = groups2.length; j5 < m2; ++j5) {
    for (var group2 = groups2[j5], i3 = 0, n2 = group2.length, node; i3 < n2; ++i3) {
      if (node = group2[i3])
        callback.call(node, node.__data__, i3, group2);
    }
  }
  return this;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/attr.js
function attrRemove3(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS3(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant3(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS3(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction3(name, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v2);
  };
}
function attrFunctionNS3(fullname, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v2);
  };
}
function attr_default3(name, value) {
  var fullname = namespace_default2(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS3 : attrRemove3 : typeof value === "function" ? fullname.local ? attrFunctionNS3 : attrFunction3 : fullname.local ? attrConstantNS3 : attrConstant3)(fullname, value));
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/window.js
function window_default2(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/style.js
function styleRemove3(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant3(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction3(name, value, priority) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v2, priority);
  };
}
function style_default3(name, value, priority) {
  var node;
  return arguments.length > 1 ? this.each((value == null ? styleRemove3 : typeof value === "function" ? styleFunction3 : styleConstant3)(name, value, priority == null ? "" : priority)) : window_default2(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/property.js
function propertyRemove2(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant2(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction2(name, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      delete this[name];
    else
      this[name] = v2;
  };
}
function property_default2(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove2 : typeof value === "function" ? propertyFunction2 : propertyConstant2)(name, value)) : this.node()[name];
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/classed.js
function classArray2(string) {
  return string.trim().split(/^|\s+/);
}
function classList2(node) {
  return node.classList || new ClassList2(node);
}
function ClassList2(node) {
  this._node = node;
  this._names = classArray2(node.getAttribute("class") || "");
}
ClassList2.prototype = {
  add: function(name) {
    var i3 = this._names.indexOf(name);
    if (i3 < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i3 = this._names.indexOf(name);
    if (i3 >= 0) {
      this._names.splice(i3, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd2(node, names) {
  var list = classList2(node), i3 = -1, n2 = names.length;
  while (++i3 < n2)
    list.add(names[i3]);
}
function classedRemove2(node, names) {
  var list = classList2(node), i3 = -1, n2 = names.length;
  while (++i3 < n2)
    list.remove(names[i3]);
}
function classedTrue2(names) {
  return function() {
    classedAdd2(this, names);
  };
}
function classedFalse2(names) {
  return function() {
    classedRemove2(this, names);
  };
}
function classedFunction2(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd2 : classedRemove2)(this, names);
  };
}
function classed_default2(name, value) {
  var names = classArray2(name + "");
  if (arguments.length < 2) {
    var list = classList2(this.node()), i3 = -1, n2 = names.length;
    while (++i3 < n2)
      if (!list.contains(names[i3]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction2 : value ? classedTrue2 : classedFalse2)(names, value));
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/text.js
function textRemove2() {
  this.textContent = "";
}
function textConstant3(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction3(value) {
  return function() {
    var v2 = value.apply(this, arguments);
    this.textContent = v2 == null ? "" : v2;
  };
}
function text_default4(value) {
  return arguments.length ? this.each(value == null ? textRemove2 : (typeof value === "function" ? textFunction3 : textConstant3)(value)) : this.node().textContent;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/html.js
function htmlRemove2() {
  this.innerHTML = "";
}
function htmlConstant2(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction2(value) {
  return function() {
    var v2 = value.apply(this, arguments);
    this.innerHTML = v2 == null ? "" : v2;
  };
}
function html_default2(value) {
  return arguments.length ? this.each(value == null ? htmlRemove2 : (typeof value === "function" ? htmlFunction2 : htmlConstant2)(value)) : this.node().innerHTML;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/raise.js
function raise2() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default2() {
  return this.each(raise2);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/lower.js
function lower2() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default2() {
  return this.each(lower2);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/append.js
function append_default2(name) {
  var create2 = typeof name === "function" ? name : creator_default2(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/insert.js
function constantNull2() {
  return null;
}
function insert_default2(name, before) {
  var create2 = typeof name === "function" ? name : creator_default2(name), select = before == null ? constantNull2 : typeof before === "function" ? before : selector_default2(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/remove.js
function remove2() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default3() {
  return this.each(remove2);
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/datum.js
function datum_default2(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent2(node, type2, params) {
  var window2 = window_default2(node), event2 = window2.CustomEvent;
  if (event2) {
    event2 = new event2(type2, params);
  } else {
    event2 = window2.document.createEvent("Event");
    if (params)
      event2.initEvent(type2, params.bubbles, params.cancelable), event2.detail = params.detail;
    else
      event2.initEvent(type2, false, false);
  }
  node.dispatchEvent(event2);
}
function dispatchConstant2(type2, params) {
  return function() {
    return dispatchEvent2(this, type2, params);
  };
}
function dispatchFunction2(type2, params) {
  return function() {
    return dispatchEvent2(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default3(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction2 : dispatchConstant2)(type2, params));
}

// node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js
var root2 = [null];
function Selection3(groups2, parents) {
  this._groups = groups2;
  this._parents = parents;
}
function selection2() {
  return new Selection3([[document.documentElement]], root2);
}
Selection3.prototype = selection2.prototype = {
  constructor: Selection3,
  select: select_default4,
  selectAll: selectAll_default4,
  filter: filter_default3,
  data: data_default2,
  enter: enter_default2,
  exit: exit_default2,
  merge: merge_default3,
  order: order_default2,
  sort: sort_default3,
  call: call_default2,
  nodes: nodes_default2,
  node: node_default2,
  size: size_default2,
  empty: empty_default2,
  each: each_default3,
  attr: attr_default3,
  style: style_default3,
  property: property_default2,
  classed: classed_default2,
  text: text_default4,
  html: html_default2,
  raise: raise_default2,
  lower: lower_default2,
  append: append_default2,
  insert: insert_default2,
  remove: remove_default3,
  datum: datum_default2,
  on: on_default3,
  dispatch: dispatch_default3
};

// node_modules/d3-svg-legend/node_modules/d3-selection/src/select.js
function select_default5(selector) {
  return typeof selector === "string" ? new Selection3([[document.querySelector(selector)]], [document.documentElement]) : new Selection3([[selector]], root2);
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default2(x5, p2) {
  if ((i3 = (x5 = p2 ? x5.toExponential(p2 - 1) : x5.toExponential()).indexOf("e")) < 0)
    return null;
  var i3, coefficient = x5.slice(0, i3);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i3 + 1)
  ];
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js
function exponent_default2(x5) {
  return x5 = formatDecimal_default2(Math.abs(x5)), x5 ? x5[1] : NaN;
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatGroup.js
function formatGroup_default2(grouping, thousands) {
  return function(value, width) {
    var i3 = value.length, t = [], j5 = 0, g2 = grouping[0], length3 = 0;
    while (i3 > 0 && g2 > 0) {
      if (length3 + g2 + 1 > width)
        g2 = Math.max(1, width - length3);
      t.push(value.substring(i3 -= g2, i3 + g2));
      if ((length3 += g2 + 1) > width)
        break;
      g2 = grouping[j5 = (j5 + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatDefault.js
function formatDefault_default(x5, p2) {
  x5 = x5.toPrecision(p2);
  out:
    for (var n2 = x5.length, i3 = 1, i0 = -1, i1; i3 < n2; ++i3) {
      switch (x5[i3]) {
        case ".":
          i0 = i1 = i3;
          break;
        case "0":
          if (i0 === 0)
            i0 = i3;
          i1 = i3;
          break;
        case "e":
          break out;
        default:
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? x5.slice(0, i0) + x5.slice(i1 + 1) : x5;
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent2;
function formatPrefixAuto_default2(x5, p2) {
  var d2 = formatDecimal_default2(x5, p2);
  if (!d2)
    return x5 + "";
  var coefficient = d2[0], exponent = d2[1], i3 = exponent - (prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n2 = coefficient.length;
  return i3 === n2 ? coefficient : i3 > n2 ? coefficient + new Array(i3 - n2 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimal_default2(x5, Math.max(0, p2 + i3 - 1))[0];
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatRounded.js
function formatRounded_default2(x5, p2) {
  var d2 = formatDecimal_default2(x5, p2);
  if (!d2)
    return x5 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatTypes.js
var formatTypes_default2 = {
  "": formatDefault_default,
  "%": function(x5, p2) {
    return (x5 * 100).toFixed(p2);
  },
  "b": function(x5) {
    return Math.round(x5).toString(2);
  },
  "c": function(x5) {
    return x5 + "";
  },
  "d": function(x5) {
    return Math.round(x5).toString(10);
  },
  "e": function(x5, p2) {
    return x5.toExponential(p2);
  },
  "f": function(x5, p2) {
    return x5.toFixed(p2);
  },
  "g": function(x5, p2) {
    return x5.toPrecision(p2);
  },
  "o": function(x5) {
    return Math.round(x5).toString(8);
  },
  "p": function(x5, p2) {
    return formatRounded_default2(x5 * 100, p2);
  },
  "r": formatRounded_default2,
  "s": formatPrefixAuto_default2,
  "X": function(x5) {
    return Math.round(x5).toString(16).toUpperCase();
  },
  "x": function(x5) {
    return Math.round(x5).toString(16);
  }
};

// node_modules/d3-svg-legend/node_modules/d3-format/src/formatSpecifier.js
var re4 = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
function formatSpecifier_default(specifier) {
  return new FormatSpecifier2(specifier);
}
function FormatSpecifier2(specifier) {
  if (!(match = re4.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match, fill = match[1] || " ", align = match[2] || ">", sign2 = match[3] || "-", symbol2 = match[4] || "", zero4 = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type2 = match[9] || "";
  if (type2 === "n")
    comma = true, type2 = "g";
  else if (!formatTypes_default2[type2])
    type2 = "";
  if (zero4 || fill === "0" && align === "=")
    zero4 = true, fill = "0", align = "=";
  this.fill = fill;
  this.align = align;
  this.sign = sign2;
  this.symbol = symbol2;
  this.zero = zero4;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type2;
}
FormatSpecifier2.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + this.type;
};

// node_modules/d3-svg-legend/node_modules/d3-format/src/locale.js
var prefixes2 = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function identity6(x5) {
  return x5;
}
function locale_default2(locale4) {
  var group2 = locale4.grouping && locale4.thousands ? formatGroup_default2(locale4.grouping, locale4.thousands) : identity6, currency = locale4.currency, decimal = locale4.decimal;
  function newFormat(specifier) {
    specifier = formatSpecifier_default(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero4 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type2 = specifier.type;
    var prefix2 = symbol2 === "$" ? currency[0] : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currency[1] : /[%p]/.test(type2) ? "%" : "";
    var formatType = formatTypes_default2[type2], maybeSuffix = !type2 || /[defgprs%]/.test(type2);
    precision = precision == null ? type2 ? 6 : 12 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i3, n2, c6;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
        value = formatType(value, precision);
        if (valueNegative) {
          i3 = -1, n2 = value.length;
          valueNegative = false;
          while (++i3 < n2) {
            if (c6 = value.charCodeAt(i3), 48 < c6 && c6 < 58 || type2 === "x" && 96 < c6 && c6 < 103 || type2 === "X" && 64 < c6 && c6 < 71) {
              valueNegative = true;
              break;
            }
          }
        }
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : "-" : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = valueSuffix + (type2 === "s" ? prefixes2[8 + prefixExponent2 / 3] : "") + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i3 = -1, n2 = value.length;
          while (++i3 < n2) {
            if (c6 = value.charCodeAt(i3), 48 > c6 || c6 > 57) {
              valueSuffix = (c6 === 46 ? decimal + value.slice(i3 + 1) : value.slice(i3)) + valueSuffix;
              value = value.slice(0, i3);
              break;
            }
          }
        }
      }
      if (comma && !zero4)
        value = group2(value, Infinity);
      var length3 = valuePrefix.length + value.length + valueSuffix.length, padding = length3 < width ? new Array(width - length3 + 1).join(fill) : "";
      if (comma && zero4)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          return valuePrefix + value + valueSuffix + padding;
        case "=":
          return valuePrefix + padding + value + valueSuffix;
        case "^":
          return padding.slice(0, length3 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length3);
      }
      return padding + valuePrefix + value + valueSuffix;
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f3 = newFormat((specifier = formatSpecifier_default(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3, k4 = Math.pow(10, -e), prefix2 = prefixes2[8 + e / 3];
    return function(value2) {
      return f3(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/defaultLocale.js
var locale3;
var format2;
var formatPrefix2;
defaultLocale3({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale3(definition) {
  locale3 = locale_default2(definition);
  format2 = locale3.format;
  formatPrefix2 = locale3.formatPrefix;
  return locale3;
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default2(step) {
  return Math.max(0, -exponent_default2(Math.abs(step)));
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default2(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3 - exponent_default2(Math.abs(step)));
}

// node_modules/d3-svg-legend/node_modules/d3-format/src/precisionRound.js
function precisionRound_default2(step, max5) {
  step = Math.abs(step), max5 = Math.abs(max5) - step;
  return Math.max(0, exponent_default2(max5) - exponent_default2(step)) + 1;
}

// node_modules/d3-svg-legend/node_modules/d3-dispatch/src/dispatch.js
var noop2 = { value: function() {
} };
function dispatch2() {
  for (var i3 = 0, n2 = arguments.length, _3 = {}, t; i3 < n2; ++i3) {
    if (!(t = arguments[i3] + "") || t in _3)
      throw new Error("illegal type: " + t);
    _3[t] = [];
  }
  return new Dispatch2(_3);
}
function Dispatch2(_3) {
  this._ = _3;
}
function parseTypenames4(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i3 = t.indexOf(".");
    if (i3 >= 0)
      name = t.slice(i3 + 1), t = t.slice(0, i3);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
Dispatch2.prototype = dispatch2.prototype = {
  constructor: Dispatch2,
  on: function(typename, callback) {
    var _3 = this._, T3 = parseTypenames4(typename + "", _3), t, i3 = -1, n2 = T3.length;
    if (arguments.length < 2) {
      while (++i3 < n2)
        if ((t = (typename = T3[i3]).type) && (t = get3(_3[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i3 < n2) {
      if (t = (typename = T3[i3]).type)
        _3[t] = set4(_3[t], typename.name, callback);
      else if (callback == null)
        for (t in _3)
          _3[t] = set4(_3[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy4 = {}, _3 = this._;
    for (var t in _3)
      copy4[t] = _3[t].slice();
    return new Dispatch2(copy4);
  },
  call: function(type2, that) {
    if ((n2 = arguments.length - 2) > 0)
      for (var args = new Array(n2), i3 = 0, n2, t; i3 < n2; ++i3)
        args[i3] = arguments[i3 + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t = this._[type2], i3 = 0, n2 = t.length; i3 < n2; ++i3)
      t[i3].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t = this._[type2], i3 = 0, n2 = t.length; i3 < n2; ++i3)
      t[i3].value.apply(that, args);
  }
};
function get3(type2, name) {
  for (var i3 = 0, n2 = type2.length, c6; i3 < n2; ++i3) {
    if ((c6 = type2[i3]).name === name) {
      return c6.value;
    }
  }
}
function set4(type2, name, callback) {
  for (var i3 = 0, n2 = type2.length; i3 < n2; ++i3) {
    if (type2[i3].name === name) {
      type2[i3] = noop2, type2 = type2.slice(0, i3).concat(type2.slice(i3 + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default4 = dispatch2;

// node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js
function ascending_default2(a4, b4) {
  return a4 < b4 ? -1 : a4 > b4 ? 1 : a4 >= b4 ? 0 : NaN;
}

// node_modules/d3-svg-legend/node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1)
    compare = ascendingComparator(compare);
  return {
    left: function(a4, x5, lo2, hi) {
      if (lo2 == null)
        lo2 = 0;
      if (hi == null)
        hi = a4.length;
      while (lo2 < hi) {
        var mid = lo2 + hi >>> 1;
        if (compare(a4[mid], x5) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      }
      return lo2;
    },
    right: function(a4, x5, lo2, hi) {
      if (lo2 == null)
        lo2 = 0;
      if (hi == null)
        hi = a4.length;
      while (lo2 < hi) {
        var mid = lo2 + hi >>> 1;
        if (compare(a4[mid], x5) > 0)
          hi = mid;
        else
          lo2 = mid + 1;
      }
      return lo2;
    }
  };
}
function ascendingComparator(f3) {
  return function(d2, x5) {
    return ascending_default2(f3(d2), x5);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector_default(ascending_default2);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;
var bisect_default2 = bisectRight2;

// node_modules/d3-svg-legend/node_modules/d3-array/src/array.js
var array3 = Array.prototype;
var slice3 = array3.slice;
var map4 = array3.map;

// node_modules/d3-svg-legend/node_modules/d3-array/src/range.js
function range_default(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n2 = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n2 < 3 ? 1 : +step;
  var i3 = -1, n2 = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range2 = new Array(n2);
  while (++i3 < n2) {
    range2[i3] = start2 + i3 * step;
  }
  return range2;
}

// node_modules/d3-svg-legend/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);
function ticks_default(start2, stop, count3) {
  var step = tickStep2(start2, stop, count3);
  return range_default(
    Math.ceil(start2 / step) * step,
    Math.floor(stop / step) * step + step / 2,
    step
  );
}
function tickStep2(start2, stop, count3) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e102)
    step1 *= 10;
  else if (error >= e52)
    step1 *= 5;
  else if (error >= e22)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}

// node_modules/d3-svg-legend/node_modules/d3-array/src/max.js
function max_default(array5, f3) {
  var i3 = -1, n2 = array5.length, a4, b4;
  if (f3 == null) {
    while (++i3 < n2)
      if ((b4 = array5[i3]) != null && b4 >= b4) {
        a4 = b4;
        break;
      }
    while (++i3 < n2)
      if ((b4 = array5[i3]) != null && b4 > a4)
        a4 = b4;
  } else {
    while (++i3 < n2)
      if ((b4 = f3(array5[i3], i3, array5)) != null && b4 >= b4) {
        a4 = b4;
        break;
      }
    while (++i3 < n2)
      if ((b4 = f3(array5[i3], i3, array5)) != null && b4 > a4)
        a4 = b4;
  }
  return a4;
}

// node_modules/d3-svg-legend/node_modules/d3-array/src/sum.js
function sum_default2(array5, f3) {
  var s2 = 0, n2 = array5.length, a4, i3 = -1;
  if (f3 == null) {
    while (++i3 < n2)
      if (a4 = +array5[i3])
        s2 += a4;
  } else {
    while (++i3 < n2)
      if (a4 = +f3(array5[i3], i3, array5))
        s2 += a4;
  }
  return s2;
}

// node_modules/d3-collection/src/map.js
var prefix = "$";
function Map2() {
}
Map2.prototype = map5.prototype = {
  constructor: Map2,
  has: function(key) {
    return prefix + key in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this)
      if (property[0] === prefix)
        delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this)
      if (property[0] === prefix)
        keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this)
      if (property[0] === prefix)
        values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this)
      if (property[0] === prefix)
        entries.push({ key: property.slice(1), value: this[property] });
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this)
      if (property[0] === prefix)
        ++size;
    return size;
  },
  empty: function() {
    for (var property in this)
      if (property[0] === prefix)
        return false;
    return true;
  },
  each: function(f3) {
    for (var property in this)
      if (property[0] === prefix)
        f3(this[property], property.slice(1), this);
  }
};
function map5(object, f3) {
  var map7 = new Map2();
  if (object instanceof Map2)
    object.each(function(value, key2) {
      map7.set(key2, value);
    });
  else if (Array.isArray(object)) {
    var i3 = -1, n2 = object.length, o;
    if (f3 == null)
      while (++i3 < n2)
        map7.set(i3, object[i3]);
    else
      while (++i3 < n2)
        map7.set(f3(o = object[i3], i3, object), o);
  } else if (object)
    for (var key in object)
      map7.set(key, object[key]);
  return map7;
}
var map_default = map5;

// node_modules/d3-collection/src/set.js
function Set2() {
}
var proto = map_default.prototype;
Set2.prototype = set5.prototype = {
  constructor: Set2,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};
function set5(object, f3) {
  var set6 = new Set2();
  if (object instanceof Set2)
    object.each(function(value) {
      set6.add(value);
    });
  else if (object) {
    var i3 = -1, n2 = object.length;
    if (f3 == null)
      while (++i3 < n2)
        set6.add(object[i3]);
    else
      while (++i3 < n2)
        set6.add(f3(object[i3], i3, object));
  }
  return set6;
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js
var array4 = Array.prototype;
var map6 = array4.map;
var slice4 = array4.slice;

// node_modules/d3-svg-legend/node_modules/d3-color/src/define.js
function define_default2(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend2(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-svg-legend/node_modules/d3-color/src/color.js
function Color2() {
}
var darker2 = 0.7;
var brighter2 = 1 / darker2;
var reI2 = "\\s*([+-]?\\d+)\\s*";
var reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex2 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
var reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
var reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
var reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
var reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
var reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
var named2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default2(Color2, color2, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex2,
  formatHex: color_formatHex2,
  formatHsl: color_formatHsl2,
  formatRgb: color_formatRgb2,
  toString: color_formatRgb2
});
function color_formatHex2() {
  return this.rgb().formatHex();
}
function color_formatHsl2() {
  return hslConvert2(this).formatHsl();
}
function color_formatRgb2() {
  return this.rgb().formatRgb();
}
function color2(format3) {
  var m2, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m2 = reHex2.exec(format3)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn2(m2) : l === 3 ? new Rgb2(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba2(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba2(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger2.exec(format3)) ? new Rgb2(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent2.exec(format3)) ? new Rgb2(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger2.exec(format3)) ? rgba2(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent2.exec(format3)) ? rgba2(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent2.exec(format3)) ? hsla2(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent2.exec(format3)) ? hsla2(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named2.hasOwnProperty(format3) ? rgbn2(named2[format3]) : format3 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
}
function rgbn2(n2) {
  return new Rgb2(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
}
function rgba2(r, g2, b4, a4) {
  if (a4 <= 0)
    r = g2 = b4 = NaN;
  return new Rgb2(r, g2, b4, a4);
}
function rgbConvert2(o) {
  if (!(o instanceof Color2))
    o = color2(o);
  if (!o)
    return new Rgb2();
  o = o.rgb();
  return new Rgb2(o.r, o.g, o.b, o.opacity);
}
function rgb2(r, g2, b4, opacity) {
  return arguments.length === 1 ? rgbConvert2(r) : new Rgb2(r, g2, b4, opacity == null ? 1 : opacity);
}
function Rgb2(r, g2, b4, opacity) {
  this.r = +r;
  this.g = +g2;
  this.b = +b4;
  this.opacity = +opacity;
}
define_default2(Rgb2, rgb2, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Rgb2(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Rgb2(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex2,
  formatHex: rgb_formatHex2,
  formatRgb: rgb_formatRgb2,
  toString: rgb_formatRgb2
}));
function rgb_formatHex2() {
  return "#" + hex2(this.r) + hex2(this.g) + hex2(this.b);
}
function rgb_formatRgb2() {
  var a4 = this.opacity;
  a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
  return (a4 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a4 === 1 ? ")" : ", " + a4 + ")");
}
function hex2(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h2, s2, l, a4) {
  if (a4 <= 0)
    h2 = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h2 = s2 = NaN;
  else if (s2 <= 0)
    h2 = NaN;
  return new Hsl2(h2, s2, l, a4);
}
function hslConvert2(o) {
  if (o instanceof Hsl2)
    return new Hsl2(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color2))
    o = color2(o);
  if (!o)
    return new Hsl2();
  if (o instanceof Hsl2)
    return o;
  o = o.rgb();
  var r = o.r / 255, g2 = o.g / 255, b4 = o.b / 255, min4 = Math.min(r, g2, b4), max5 = Math.max(r, g2, b4), h2 = NaN, s2 = max5 - min4, l = (max5 + min4) / 2;
  if (s2) {
    if (r === max5)
      h2 = (g2 - b4) / s2 + (g2 < b4) * 6;
    else if (g2 === max5)
      h2 = (b4 - r) / s2 + 2;
    else
      h2 = (r - g2) / s2 + 4;
    s2 /= l < 0.5 ? max5 + min4 : 2 - max5 - min4;
    h2 *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h2;
  }
  return new Hsl2(h2, s2, l, o.opacity);
}
function hsl2(h2, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert2(h2) : new Hsl2(h2, s2, l, opacity == null ? 1 : opacity);
}
function Hsl2(h2, s2, l, opacity) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define_default2(Hsl2, hsl2, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Hsl2(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Hsl2(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
    return new Rgb2(
      hsl2rgb2(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
      hsl2rgb2(h2, m1, m2),
      hsl2rgb2(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a4 = this.opacity;
    a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
    return (a4 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a4 === 1 ? ")" : ", " + a4 + ")");
  }
}));
function hsl2rgb2(h2, m1, m2) {
  return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-svg-legend/node_modules/d3-color/src/math.js
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// node_modules/d3-svg-legend/node_modules/d3-color/src/cubehelix.js
var A4 = -0.14861;
var B6 = 1.78277;
var C6 = -0.29227;
var D6 = -0.90649;
var E5 = 1.97294;
var ED2 = E5 * D6;
var EB2 = E5 * B6;
var BC_DA2 = B6 * C6 - D6 * A4;
function cubehelixConvert2(o) {
  if (o instanceof Cubehelix2)
    return new Cubehelix2(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb2))
    o = rgbConvert2(o);
  var r = o.r / 255, g2 = o.g / 255, b4 = o.b / 255, l = (BC_DA2 * b4 + ED2 * r - EB2 * g2) / (BC_DA2 + ED2 - EB2), bl = b4 - l, k4 = (E5 * (g2 - l) - C6 * bl) / D6, s2 = Math.sqrt(k4 * k4 + bl * bl) / (E5 * l * (1 - l)), h2 = s2 ? Math.atan2(k4, bl) * rad2deg - 120 : NaN;
  return new Cubehelix2(h2 < 0 ? h2 + 360 : h2, s2, l, o.opacity);
}
function cubehelix3(h2, s2, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert2(h2) : new Cubehelix2(h2, s2, l, opacity == null ? 1 : opacity);
}
function Cubehelix2(h2, s2, l, opacity) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define_default2(Cubehelix2, cubehelix3, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Cubehelix2(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Cubehelix2(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb2(
      255 * (l + a4 * (A4 * cosh2 + B6 * sinh2)),
      255 * (l + a4 * (C6 * cosh2 + D6 * sinh2)),
      255 * (l + a4 * (E5 * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/basis.js
function basis2(t12, v0, v1, v2, v3) {
  var t2 = t12 * t12, t3 = t2 * t12;
  return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default3(values) {
  var n2 = values.length - 1;
  return function(t) {
    var i3 = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n2 - 1) : Math.floor(t * n2), v1 = values[i3], v2 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v2, v3 = i3 < n2 - 1 ? values[i3 + 2] : 2 * v2 - v1;
    return basis2((t - i3 / n2) * n2, v0, v1, v2, v3);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default3(values) {
  var n2 = values.length;
  return function(t) {
    var i3 = Math.floor(((t %= 1) < 0 ? ++t : t) * n2), v0 = values[(i3 + n2 - 1) % n2], v1 = values[i3 % n2], v2 = values[(i3 + 1) % n2], v3 = values[(i3 + 2) % n2];
    return basis2((t - i3 / n2) * n2, v0, v1, v2, v3);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/constant.js
function constant_default10(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/color.js
function linear3(a4, d2) {
  return function(t) {
    return a4 + t * d2;
  };
}
function exponential2(a4, b4, y4) {
  return a4 = Math.pow(a4, y4), b4 = Math.pow(b4, y4) - a4, y4 = 1 / y4, function(t) {
    return Math.pow(a4 + t * b4, y4);
  };
}
function hue2(a4, b4) {
  var d2 = b4 - a4;
  return d2 ? linear3(a4, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default10(isNaN(a4) ? b4 : a4);
}
function gamma2(y4) {
  return (y4 = +y4) === 1 ? nogamma2 : function(a4, b4) {
    return b4 - a4 ? exponential2(a4, b4, y4) : constant_default10(isNaN(a4) ? b4 : a4);
  };
}
function nogamma2(a4, b4) {
  var d2 = b4 - a4;
  return d2 ? linear3(a4, d2) : constant_default10(isNaN(a4) ? b4 : a4);
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/rgb.js
var rgb_default2 = function rgbGamma2(y4) {
  var color4 = gamma2(y4);
  function rgb3(start2, end) {
    var r = color4((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g2 = color4(start2.g, end.g), b4 = color4(start2.b, end.b), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g2(t);
      start2.b = b4(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb3.gamma = rgbGamma2;
  return rgb3;
}(1);
function rgbSpline2(spline) {
  return function(colors) {
    var n2 = colors.length, r = new Array(n2), g2 = new Array(n2), b4 = new Array(n2), i3, color4;
    for (i3 = 0; i3 < n2; ++i3) {
      color4 = rgb2(colors[i3]);
      r[i3] = color4.r || 0;
      g2[i3] = color4.g || 0;
      b4[i3] = color4.b || 0;
    }
    r = spline(r);
    g2 = spline(g2);
    b4 = spline(b4);
    color4.opacity = 1;
    return function(t) {
      color4.r = r(t);
      color4.g = g2(t);
      color4.b = b4(t);
      return color4 + "";
    };
  };
}
var rgbBasis2 = rgbSpline2(basis_default3);
var rgbBasisClosed2 = rgbSpline2(basisClosed_default3);

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/numberArray.js
function numberArray_default2(a4, b4) {
  if (!b4)
    b4 = [];
  var n2 = a4 ? Math.min(b4.length, a4.length) : 0, c6 = b4.slice(), i3;
  return function(t) {
    for (i3 = 0; i3 < n2; ++i3)
      c6[i3] = a4[i3] * (1 - t) + b4[i3] * t;
    return c6;
  };
}
function isNumberArray2(x5) {
  return ArrayBuffer.isView(x5) && !(x5 instanceof DataView);
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/array.js
function genericArray2(a4, b4) {
  var nb = b4 ? b4.length : 0, na2 = a4 ? Math.min(nb, a4.length) : 0, x5 = new Array(na2), c6 = new Array(nb), i3;
  for (i3 = 0; i3 < na2; ++i3)
    x5[i3] = value_default2(a4[i3], b4[i3]);
  for (; i3 < nb; ++i3)
    c6[i3] = b4[i3];
  return function(t) {
    for (i3 = 0; i3 < na2; ++i3)
      c6[i3] = x5[i3](t);
    return c6;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/date.js
function date_default2(a4, b4) {
  var d2 = new Date();
  return a4 = +a4, b4 = +b4, function(t) {
    return d2.setTime(a4 * (1 - t) + b4 * t), d2;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/number.js
function number_default3(a4, b4) {
  return a4 = +a4, b4 = +b4, function(t) {
    return a4 * (1 - t) + b4 * t;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/object.js
function object_default2(a4, b4) {
  var i3 = {}, c6 = {}, k4;
  if (a4 === null || typeof a4 !== "object")
    a4 = {};
  if (b4 === null || typeof b4 !== "object")
    b4 = {};
  for (k4 in b4) {
    if (k4 in a4) {
      i3[k4] = value_default2(a4[k4], b4[k4]);
    } else {
      c6[k4] = b4[k4];
    }
  }
  return function(t) {
    for (k4 in i3)
      c6[k4] = i3[k4](t);
    return c6;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/string.js
var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB2 = new RegExp(reA2.source, "g");
function zero3(b4) {
  return function() {
    return b4;
  };
}
function one2(b4) {
  return function(t) {
    return b4(t) + "";
  };
}
function string_default2(a4, b4) {
  var bi = reA2.lastIndex = reB2.lastIndex = 0, am, bm, bs, i3 = -1, s2 = [], q5 = [];
  a4 = a4 + "", b4 = b4 + "";
  while ((am = reA2.exec(a4)) && (bm = reB2.exec(b4))) {
    if ((bs = bm.index) > bi) {
      bs = b4.slice(bi, bs);
      if (s2[i3])
        s2[i3] += bs;
      else
        s2[++i3] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i3])
        s2[i3] += bm;
      else
        s2[++i3] = bm;
    } else {
      s2[++i3] = null;
      q5.push({ i: i3, x: number_default3(am, bm) });
    }
    bi = reB2.lastIndex;
  }
  if (bi < b4.length) {
    bs = b4.slice(bi);
    if (s2[i3])
      s2[i3] += bs;
    else
      s2[++i3] = bs;
  }
  return s2.length < 2 ? q5[0] ? one2(q5[0].x) : zero3(b4) : (b4 = q5.length, function(t) {
    for (var i4 = 0, o; i4 < b4; ++i4)
      s2[(o = q5[i4]).i] = o.x(t);
    return s2.join("");
  });
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/value.js
function value_default2(a4, b4) {
  var t = typeof b4, c6;
  return b4 == null || t === "boolean" ? constant_default10(b4) : (t === "number" ? number_default3 : t === "string" ? (c6 = color2(b4)) ? (b4 = c6, rgb_default2) : string_default2 : b4 instanceof color2 ? rgb_default2 : b4 instanceof Date ? date_default2 : isNumberArray2(b4) ? numberArray_default2 : Array.isArray(b4) ? genericArray2 : typeof b4.valueOf !== "function" && typeof b4.toString !== "function" || isNaN(b4) ? object_default2 : number_default3)(a4, b4);
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/round.js
function round_default3(a4, b4) {
  return a4 = +a4, b4 = +b4, function(t) {
    return Math.round(a4 * (1 - t) + b4 * t);
  };
}

// node_modules/d3-svg-legend/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix4(hue3) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix5(start2, end) {
      var h2 = hue3((start2 = cubehelix3(start2)).h, (end = cubehelix3(end)).h), s2 = nogamma2(start2.s, end.s), l = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h2(t);
        start2.s = s2(t);
        start2.l = l(Math.pow(t, y4));
        start2.opacity = opacity(t);
        return start2 + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default3 = cubehelix4(hue2);
var cubehelixLong2 = cubehelix4(nogamma2);

// node_modules/d3-svg-legend/node_modules/d3-scale/src/constant.js
function constant_default11(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/number.js
function number_default4(x5) {
  return +x5;
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js
var unit2 = [0, 1];
function deinterpolateLinear(a4, b4) {
  return (b4 -= a4 = +a4) ? function(x5) {
    return (x5 - a4) / b4;
  } : constant_default11(b4);
}
function deinterpolateClamp(deinterpolate) {
  return function(a4, b4) {
    var d2 = deinterpolate(a4 = +a4, b4 = +b4);
    return function(x5) {
      return x5 <= a4 ? 0 : x5 >= b4 ? 1 : d2(x5);
    };
  };
}
function reinterpolateClamp(reinterpolate) {
  return function(a4, b4) {
    var r = reinterpolate(a4 = +a4, b4 = +b4);
    return function(t) {
      return t <= 0 ? a4 : t >= 1 ? b4 : r(t);
    };
  };
}
function bimap2(domain, range2, deinterpolate, reinterpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
  else
    d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function(x5) {
    return r0(d0(x5));
  };
}
function polymap2(domain, range2, deinterpolate, reinterpolate) {
  var j5 = Math.min(domain.length, range2.length) - 1, d2 = new Array(j5), r = new Array(j5), i3 = -1;
  if (domain[j5] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i3 < j5) {
    d2[i3] = deinterpolate(domain[i3], domain[i3 + 1]);
    r[i3] = reinterpolate(range2[i3], range2[i3 + 1]);
  }
  return function(x5) {
    var i4 = bisect_default2(domain, x5, 1, j5) - 1;
    return r[i4](d2[i4](x5));
  };
}
function copy3(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
}
function continuous2(deinterpolate, reinterpolate) {
  var domain = unit2, range2 = unit2, interpolate = value_default2, clamp = false, piecewise2, output, input;
  function rescale() {
    piecewise2 = Math.min(domain.length, range2.length) > 2 ? polymap2 : bimap2;
    output = input = null;
    return scale;
  }
  function scale(x5) {
    return (output || (output = piecewise2(domain, range2, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x5);
  }
  scale.invert = function(y4) {
    return (input || (input = piecewise2(range2, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y4);
  };
  scale.domain = function(_3) {
    return arguments.length ? (domain = map6.call(_3, number_default4), rescale()) : domain.slice();
  };
  scale.range = function(_3) {
    return arguments.length ? (range2 = slice4.call(_3), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_3) {
    return range2 = slice4.call(_3), interpolate = round_default3, rescale();
  };
  scale.clamp = function(_3) {
    return arguments.length ? (clamp = !!_3, rescale()) : clamp;
  };
  scale.interpolate = function(_3) {
    return arguments.length ? (interpolate = _3, rescale()) : interpolate;
  };
  return rescale();
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/tickFormat.js
function tickFormat_default(domain, count3, specifier) {
  var start2 = domain[0], stop = domain[domain.length - 1], step = tickStep2(start2, stop, count3 == null ? 10 : count3), precision;
  specifier = formatSpecifier_default(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default2(step, value)))
        specifier.precision = precision;
      return formatPrefix2(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default2(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default2(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format2(specifier);
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js
function linearish2(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d2 = domain();
    return ticks_default(d2[0], d2[d2.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    return tickFormat_default(domain(), count3, specifier);
  };
  scale.nice = function(count3) {
    var d2 = domain(), i3 = d2.length - 1, n2 = count3 == null ? 10 : count3, start2 = d2[0], stop = d2[i3], step = tickStep2(start2, stop, n2);
    if (step) {
      step = tickStep2(Math.floor(start2 / step) * step, Math.ceil(stop / step) * step, n2);
      d2[0] = Math.floor(start2 / step) * step;
      d2[i3] = Math.ceil(stop / step) * step;
      domain(d2);
    }
    return scale;
  };
  return scale;
}
function linear4() {
  var scale = continuous2(deinterpolateLinear, number_default3);
  scale.copy = function() {
    return copy3(scale, linear4());
  };
  return linearish2(scale);
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/time.js
var durationSecond2 = 1e3;
var durationMinute2 = durationSecond2 * 60;
var durationHour2 = durationMinute2 * 60;
var durationDay2 = durationHour2 * 24;
var durationWeek2 = durationDay2 * 7;
var durationMonth2 = durationDay2 * 30;
var durationYear2 = durationDay2 * 365;

// node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js
function colors_default2(s2) {
  return s2.match(/.{6}/g).map(function(x5) {
    return "#" + x5;
  });
}

// node_modules/d3-svg-legend/node_modules/d3-scale/src/category10.js
var category10_default2 = colors_default2("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-svg-legend/node_modules/d3-scale/src/category20b.js
var category20b_default = colors_default2("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

// node_modules/d3-svg-legend/node_modules/d3-scale/src/category20c.js
var category20c_default = colors_default2("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

// node_modules/d3-svg-legend/node_modules/d3-scale/src/category20.js
var category20_default = colors_default2("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

// node_modules/d3-svg-legend/node_modules/d3-scale/src/cubehelix.js
var cubehelix_default4 = cubehelixLong2(cubehelix3(300, 0.5, 0), cubehelix3(-240, 0.5, 1));

// node_modules/d3-svg-legend/node_modules/d3-scale/src/rainbow.js
var warm2 = cubehelixLong2(cubehelix3(-100, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var cool2 = cubehelixLong2(cubehelix3(260, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var rainbow = cubehelix3();

// node_modules/d3-svg-legend/node_modules/d3-scale/src/viridis.js
function ramp2(range2) {
  var n2 = range2.length;
  return function(t) {
    return range2[Math.max(0, Math.min(n2 - 1, Math.floor(t * n2)))];
  };
}
var viridis_default2 = ramp2(colors_default2("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma2 = ramp2(colors_default2("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno2 = ramp2(colors_default2("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma2 = ramp2(colors_default2("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/d3-svg-legend/indexRollupNext.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var d3_identity = function d3_identity2(d2) {
  return d2;
};
var d3_reverse = function d3_reverse2(arr) {
  var mirror = [];
  for (var i3 = 0, l = arr.length; i3 < l; i3++) {
    mirror[i3] = arr[l - i3 - 1];
  }
  return mirror;
};
var d3_textWrapping = function d3_textWrapping2(text, width) {
  text.each(function() {
    var text2 = select_default5(this), words = text2.text().split(/\s+/).reverse(), word, line = [], lineNumber = 0, lineHeight = 1.2, y4 = text2.attr("y"), dy = parseFloat(text2.attr("dy")) || 0, tspan = text2.text(null).append("tspan").attr("x", 0).attr("dy", dy + "em");
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width && line.length > 1) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text2.append("tspan").attr("x", 0).attr("dy", lineHeight + dy + "em").text(word);
      }
    }
  });
};
var d3_mergeLabels = function d3_mergeLabels2() {
  var gen = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var labels = arguments[1];
  var domain = arguments[2];
  var range2 = arguments[3];
  var labelDelimiter = arguments[4];
  if ((typeof labels === "undefined" ? "undefined" : _typeof(labels)) === "object") {
    if (labels.length === 0)
      return gen;
    var i3 = labels.length;
    for (; i3 < gen.length; i3++) {
      labels.push(gen[i3]);
    }
    return labels;
  } else if (typeof labels === "function") {
    var customLabels = [];
    var genLength = gen.length;
    for (var _i = 0; _i < genLength; _i++) {
      customLabels.push(labels({
        i: _i,
        genLength,
        generatedLabels: gen,
        domain,
        range: range2,
        labelDelimiter
      }));
    }
    return customLabels;
  }
  return gen;
};
var d3_linearLegend = function d3_linearLegend2(scale, cells, labelFormat) {
  var data = [];
  if (cells.length > 1) {
    data = cells;
  } else {
    var domain = scale.domain(), increment = (domain[domain.length - 1] - domain[0]) / (cells - 1);
    var i3 = 0;
    for (; i3 < cells; i3++) {
      data.push(domain[0] + i3 * increment);
    }
  }
  var labels = data.map(labelFormat);
  return {
    data,
    labels,
    feature: function feature(d2) {
      return scale(d2);
    }
  };
};
var d3_quantLegend = function d3_quantLegend2(scale, labelFormat, labelDelimiter) {
  var labels = scale.range().map(function(d2) {
    var invert = scale.invertExtent(d2);
    return labelFormat(invert[0]) + " " + labelDelimiter + " " + labelFormat(invert[1]);
  });
  return {
    data: scale.range(),
    labels,
    feature: d3_identity
  };
};
var d3_ordinalLegend = function d3_ordinalLegend2(scale) {
  return {
    data: scale.domain(),
    labels: scale.domain(),
    feature: function feature(d2) {
      return scale(d2);
    }
  };
};
var d3_cellOver = function d3_cellOver2(cellDispatcher, d2, obj) {
  cellDispatcher.call("cellover", obj, d2);
};
var d3_cellOut = function d3_cellOut2(cellDispatcher, d2, obj) {
  cellDispatcher.call("cellout", obj, d2);
};
var d3_cellClick = function d3_cellClick2(cellDispatcher, d2, obj) {
  cellDispatcher.call("cellclick", obj, d2);
};
var helper = {
  d3_drawShapes: function d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path2) {
    if (shape === "rect") {
      shapes.attr("height", shapeHeight).attr("width", shapeWidth);
    } else if (shape === "circle") {
      shapes.attr("r", shapeRadius);
    } else if (shape === "line") {
      shapes.attr("x1", 0).attr("x2", shapeWidth).attr("y1", 0).attr("y2", 0);
    } else if (shape === "path") {
      shapes.attr("d", path2);
    }
  },
  d3_addText: function d3_addText(svg2, enter, labels, classPrefix, labelWidth) {
    enter.append("text").attr("class", classPrefix + "label");
    var text = svg2.selectAll("g." + classPrefix + "cell text." + classPrefix + "label").data(labels).text(d3_identity);
    if (labelWidth) {
      svg2.selectAll("g." + classPrefix + "cell text." + classPrefix + "label").call(d3_textWrapping, labelWidth);
    }
    return text;
  },
  d3_calcType: function d3_calcType(scale, ascending4, cells, labels, labelFormat, labelDelimiter) {
    var type2 = scale.invertExtent ? d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ? d3_linearLegend(scale, cells, labelFormat) : d3_ordinalLegend(scale);
    var range2 = scale.range && scale.range() || scale.domain();
    type2.labels = d3_mergeLabels(type2.labels, labels, scale.domain(), range2, labelDelimiter);
    if (ascending4) {
      type2.labels = d3_reverse(type2.labels);
      type2.data = d3_reverse(type2.data);
    }
    return type2;
  },
  d3_filterCells: function d3_filterCells(type2, cellFilter) {
    var filterCells = type2.data.map(function(d2, i3) {
      return { data: d2, label: type2.labels[i3] };
    }).filter(cellFilter);
    var dataValues = filterCells.map(function(d2) {
      return d2.data;
    });
    var labelValues = filterCells.map(function(d2) {
      return d2.label;
    });
    type2.data = type2.data.filter(function(d2) {
      return dataValues.indexOf(d2) !== -1;
    });
    type2.labels = type2.labels.filter(function(d2) {
      return labelValues.indexOf(d2) !== -1;
    });
    return type2;
  },
  d3_placement: function d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign) {
    cell.attr("transform", cellTrans);
    text.attr("transform", textTrans);
    if (orient === "horizontal") {
      text.style("text-anchor", labelAlign);
    }
  },
  d3_addEvents: function d3_addEvents(cells, dispatcher) {
    cells.on("mouseover.legend", function(d2) {
      d3_cellOver(dispatcher, d2, this);
    }).on("mouseout.legend", function(d2) {
      d3_cellOut(dispatcher, d2, this);
    }).on("click.legend", function(d2) {
      d3_cellClick(dispatcher, d2, this);
    });
  },
  d3_title: function d3_title(svg2, title, classPrefix, titleWidth) {
    if (title !== "") {
      var titleText = svg2.selectAll("text." + classPrefix + "legendTitle");
      titleText.data([title]).enter().append("text").attr("class", classPrefix + "legendTitle");
      svg2.selectAll("text." + classPrefix + "legendTitle").text(title);
      if (titleWidth) {
        svg2.selectAll("text." + classPrefix + "legendTitle").call(d3_textWrapping, titleWidth);
      }
      var cellsSvg = svg2.select("." + classPrefix + "legendCells");
      var yOffset = svg2.select("." + classPrefix + "legendTitle").nodes().map(function(d2) {
        return d2.getBBox().height;
      })[0], xOffset = -cellsSvg.nodes().map(function(d2) {
        return d2.getBBox().x;
      })[0];
      cellsSvg.attr("transform", "translate(" + xOffset + "," + yOffset + ")");
    }
  },
  d3_defaultLocale: {
    format: format2,
    formatPrefix: formatPrefix2
  },
  d3_defaultFormatSpecifier: ".01f",
  d3_defaultDelimiter: "to"
};
function color3() {
  var scale = linear4(), shape = "rect", shapeWidth = 15, shapeHeight = 15, shapeRadius = 10, shapePadding = 2, cells = [5], cellFilter = void 0, labels = [], classPrefix = "", useClass = false, title = "", locale4 = helper.d3_defaultLocale, specifier = helper.d3_defaultFormatSpecifier, labelOffset = 10, labelAlign = "middle", labelDelimiter = helper.d3_defaultDelimiter, labelWrap = void 0, orient = "vertical", ascending4 = false, path2 = void 0, titleWidth = void 0, legendDispatcher = dispatch_default4("cellover", "cellout", "cellclick");
  function legend(svg2) {
    var type2 = helper.d3_calcType(scale, ascending4, cells, labels, locale4.format(specifier), labelDelimiter), legendG = svg2.selectAll("g").data([scale]);
    legendG.enter().append("g").attr("class", classPrefix + "legendCells");
    if (cellFilter) {
      helper.d3_filterCells(type2, cellFilter);
    }
    var cell = svg2.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type2.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg2.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch").data(type2.data);
    helper.d3_addEvents(cellEnter, legendDispatcher);
    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes);
    helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path2);
    var text = helper.d3_addText(svg2, cellEnter, type2.labels, classPrefix, labelWrap);
    cell = cellEnter.merge(cell);
    var textSize = text.nodes().map(function(d2) {
      return d2.getBBox();
    }), shapeSize = shapes.nodes().map(function(d2) {
      return d2.getBBox();
    });
    if (!useClass) {
      if (shape == "line") {
        shapes.style("stroke", type2.feature);
      } else {
        shapes.style("fill", type2.feature);
      }
    } else {
      shapes.attr("class", function(d2) {
        return classPrefix + "swatch " + type2.feature(d2);
      });
    }
    var cellTrans = void 0, textTrans = void 0, textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1;
    if (orient === "vertical") {
      (function() {
        var cellSize = textSize.map(function(d2, i3) {
          return Math.max(d2.height, shapeSize[i3].height);
        });
        cellTrans = function cellTrans2(d2, i3) {
          var height = sum_default2(cellSize.slice(0, i3));
          return "translate(0, " + (height + i3 * shapePadding) + ")";
        };
        textTrans = function textTrans2(d2, i3) {
          return "translate( " + (shapeSize[i3].width + shapeSize[i3].x + labelOffset) + ", " + (shapeSize[i3].y + shapeSize[i3].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      cellTrans = function cellTrans2(d2, i3) {
        return "translate(" + i3 * (shapeSize[i3].width + shapePadding) + ",0)";
      };
      textTrans = function textTrans2(d2, i3) {
        return "translate(" + (shapeSize[i3].width * textAlign + shapeSize[i3].x) + ",\n          " + (shapeSize[i3].height + shapeSize[i3].y + labelOffset + 8) + ")";
      };
    }
    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg2, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }
  legend.scale = function(_3) {
    if (!arguments.length)
      return scale;
    scale = _3;
    return legend;
  };
  legend.cells = function(_3) {
    if (!arguments.length)
      return cells;
    if (_3.length > 1 || _3 >= 2) {
      cells = _3;
    }
    return legend;
  };
  legend.cellFilter = function(_3) {
    if (!arguments.length)
      return cellFilter;
    cellFilter = _3;
    return legend;
  };
  legend.shape = function(_3, d2) {
    if (!arguments.length)
      return shape;
    if (_3 == "rect" || _3 == "circle" || _3 == "line" || _3 == "path" && typeof d2 === "string") {
      shape = _3;
      path2 = d2;
    }
    return legend;
  };
  legend.shapeWidth = function(_3) {
    if (!arguments.length)
      return shapeWidth;
    shapeWidth = +_3;
    return legend;
  };
  legend.shapeHeight = function(_3) {
    if (!arguments.length)
      return shapeHeight;
    shapeHeight = +_3;
    return legend;
  };
  legend.shapeRadius = function(_3) {
    if (!arguments.length)
      return shapeRadius;
    shapeRadius = +_3;
    return legend;
  };
  legend.shapePadding = function(_3) {
    if (!arguments.length)
      return shapePadding;
    shapePadding = +_3;
    return legend;
  };
  legend.labels = function(_3) {
    if (!arguments.length)
      return labels;
    labels = _3;
    return legend;
  };
  legend.labelAlign = function(_3) {
    if (!arguments.length)
      return labelAlign;
    if (_3 == "start" || _3 == "end" || _3 == "middle") {
      labelAlign = _3;
    }
    return legend;
  };
  legend.locale = function(_3) {
    if (!arguments.length)
      return locale4;
    locale4 = locale_default2(_3);
    return legend;
  };
  legend.labelFormat = function(_3) {
    if (!arguments.length)
      return legend.locale().format(specifier);
    specifier = formatSpecifier_default(_3);
    return legend;
  };
  legend.labelOffset = function(_3) {
    if (!arguments.length)
      return labelOffset;
    labelOffset = +_3;
    return legend;
  };
  legend.labelDelimiter = function(_3) {
    if (!arguments.length)
      return labelDelimiter;
    labelDelimiter = _3;
    return legend;
  };
  legend.labelWrap = function(_3) {
    if (!arguments.length)
      return labelWrap;
    labelWrap = _3;
    return legend;
  };
  legend.useClass = function(_3) {
    if (!arguments.length)
      return useClass;
    if (_3 === true || _3 === false) {
      useClass = _3;
    }
    return legend;
  };
  legend.orient = function(_3) {
    if (!arguments.length)
      return orient;
    _3 = _3.toLowerCase();
    if (_3 == "horizontal" || _3 == "vertical") {
      orient = _3;
    }
    return legend;
  };
  legend.ascending = function(_3) {
    if (!arguments.length)
      return ascending4;
    ascending4 = !!_3;
    return legend;
  };
  legend.classPrefix = function(_3) {
    if (!arguments.length)
      return classPrefix;
    classPrefix = _3;
    return legend;
  };
  legend.title = function(_3) {
    if (!arguments.length)
      return title;
    title = _3;
    return legend;
  };
  legend.titleWidth = function(_3) {
    if (!arguments.length)
      return titleWidth;
    titleWidth = _3;
    return legend;
  };
  legend.textWrap = function(_3) {
    if (!arguments.length)
      return textWrap;
    textWrap = _3;
    return legend;
  };
  legend.on = function() {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };
  return legend;
}
function symbol() {
  var scale = linear4(), shape = "path", shapeWidth = 15, shapeHeight = 15, shapeRadius = 10, shapePadding = 5, cells = [5], cellFilter = void 0, labels = [], classPrefix = "", title = "", locale4 = helper.d3_defaultLocale, specifier = helper.d3_defaultFormatSpecifier, labelAlign = "middle", labelOffset = 10, labelDelimiter = helper.d3_defaultDelimiter, labelWrap = void 0, orient = "vertical", ascending4 = false, titleWidth = void 0, legendDispatcher = dispatch_default4("cellover", "cellout", "cellclick");
  function legend(svg2) {
    var type2 = helper.d3_calcType(scale, ascending4, cells, labels, locale4.format(specifier), labelDelimiter), legendG = svg2.selectAll("g").data([scale]);
    if (cellFilter) {
      helper.d3_filterCells(type2, cellFilter);
    }
    legendG.enter().append("g").attr("class", classPrefix + "legendCells");
    var cell = svg2.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type2.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg2.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch");
    helper.d3_addEvents(cellEnter, legendDispatcher);
    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes);
    helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, type2.feature);
    var text = helper.d3_addText(svg2, cellEnter, type2.labels, classPrefix, labelWrap);
    cell = cellEnter.merge(cell);
    var textSize = text.nodes().map(function(d2) {
      return d2.getBBox();
    }), shapeSize = shapes.nodes().map(function(d2) {
      return d2.getBBox();
    });
    var maxH = max_default(shapeSize, function(d2) {
      return d2.height;
    }), maxW = max_default(shapeSize, function(d2) {
      return d2.width;
    });
    var cellTrans = void 0, textTrans = void 0, textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1;
    if (orient === "vertical") {
      (function() {
        var cellSize = textSize.map(function(d2, i3) {
          return Math.max(maxH, d2.height);
        });
        cellTrans = function cellTrans2(d2, i3) {
          var height = sum_default2(cellSize.slice(0, i3));
          return "translate(0, " + (height + i3 * shapePadding) + " )";
        };
        textTrans = function textTrans2(d2, i3) {
          return "translate( " + (maxW + labelOffset) + ",\n              " + (shapeSize[i3].y + shapeSize[i3].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      cellTrans = function cellTrans2(d2, i3) {
        return "translate( " + i3 * (maxW + shapePadding) + ",0)";
      };
      textTrans = function textTrans2(d2, i3) {
        return "translate( " + (shapeSize[i3].width * textAlign + shapeSize[i3].x) + ",\n              " + (maxH + labelOffset) + ")";
      };
    }
    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg2, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }
  legend.scale = function(_3) {
    if (!arguments.length)
      return scale;
    scale = _3;
    return legend;
  };
  legend.cells = function(_3) {
    if (!arguments.length)
      return cells;
    if (_3.length > 1 || _3 >= 2) {
      cells = _3;
    }
    return legend;
  };
  legend.cellFilter = function(_3) {
    if (!arguments.length)
      return cellFilter;
    cellFilter = _3;
    return legend;
  };
  legend.shapePadding = function(_3) {
    if (!arguments.length)
      return shapePadding;
    shapePadding = +_3;
    return legend;
  };
  legend.labels = function(_3) {
    if (!arguments.length)
      return labels;
    labels = _3;
    return legend;
  };
  legend.labelAlign = function(_3) {
    if (!arguments.length)
      return labelAlign;
    if (_3 == "start" || _3 == "end" || _3 == "middle") {
      labelAlign = _3;
    }
    return legend;
  };
  legend.locale = function(_3) {
    if (!arguments.length)
      return locale4;
    locale4 = locale_default2(_3);
    return legend;
  };
  legend.labelFormat = function(_3) {
    if (!arguments.length)
      return legend.locale().format(specifier);
    specifier = formatSpecifier_default(_3);
    return legend;
  };
  legend.labelOffset = function(_3) {
    if (!arguments.length)
      return labelOffset;
    labelOffset = +_3;
    return legend;
  };
  legend.labelDelimiter = function(_3) {
    if (!arguments.length)
      return labelDelimiter;
    labelDelimiter = _3;
    return legend;
  };
  legend.labelWrap = function(_3) {
    if (!arguments.length)
      return labelWrap;
    labelWrap = _3;
    return legend;
  };
  legend.orient = function(_3) {
    if (!arguments.length)
      return orient;
    _3 = _3.toLowerCase();
    if (_3 == "horizontal" || _3 == "vertical") {
      orient = _3;
    }
    return legend;
  };
  legend.ascending = function(_3) {
    if (!arguments.length)
      return ascending4;
    ascending4 = !!_3;
    return legend;
  };
  legend.classPrefix = function(_3) {
    if (!arguments.length)
      return classPrefix;
    classPrefix = _3;
    return legend;
  };
  legend.title = function(_3) {
    if (!arguments.length)
      return title;
    title = _3;
    return legend;
  };
  legend.titleWidth = function(_3) {
    if (!arguments.length)
      return titleWidth;
    titleWidth = _3;
    return legend;
  };
  legend.on = function() {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };
  return legend;
}

// node_modules/@finos/perspective-viewer-d3fc/dist/esm/perspective-viewer-d3fc.js
var import_d3fc5 = __toESM(require_d3fc());
var ve3 = __toESM(require_d3fc());
var Zr = __toESM(require_d3fc());
var un = __toESM(require_d3fc());
var ln = __toESM(require_d3fc());
var hn = __toESM(require_d3fc());
var dn = __toESM(require_d3fc());
var bt = __toESM(require_d3fc());
var vn = __toESM(require_d3fc());
var import_d3fc6 = __toESM(require_d3fc());
var Qe = __toESM(require_d3fc());
var Sn = __toESM(require_d3fc());
var En = __toESM(require_d3fc());
var Tn = __toESM(require_d3fc());
var Pn = __toESM(require_d3fc());
var Se3 = __toESM(require_d3fc());
var _t2 = __toESM(require_d3fc());
var import_d3fc7 = __toESM(require_d3fc());
var St = __toESM(require_d3fc());
var We2 = __toESM(require_d3fc());
var import_d3fc8 = __toESM(require_d3fc());
var wo = __toESM(require_node());
var ko = Object.defineProperty;
var ot2 = (e, t) => {
  for (var r in t)
    ko(e, r, { get: t[r], enumerable: true });
};
Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);
Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);
Element.prototype.closest || (Element.prototype.closest = function(e) {
  var t = this;
  do {
    if (t.matches(e))
      return t;
    t = t.parentElement || t.parentNode;
  } while (t !== null && t.nodeType === 1);
  return null;
});
var C7 = { none: "none", ordinal: "ordinal", time: "time", linear: "linear" };
var Ne2 = (e) => {
  let t = "crossValues", r = null, o = null, n2 = () => {
    let a4 = (l) => {
      let i3 = r ? e[t].filter((s2) => r == s2.name) : e[t];
      return t == "crossValues" && i3.length > 1 ? false : i3.some((s2) => l.includes(s2.type));
    };
    return e[t].length === 0 ? C7.none : o != C7.time && a4(["datetime", "date"]) ? C7.time : o != C7.linear && a4(["integer", "float"]) || o == C7.ordinal ? C7.linear : C7.ordinal;
  };
  return n2.settingName = (...a4) => a4.length ? (t = a4[0], n2) : t, n2.settingValue = (...a4) => a4.length ? (r = a4[0], n2) : r, n2.excludeType = (...a4) => a4.length ? (o = a4[0], n2) : o, n2;
};
var Rt = {};
ot2(Rt, { domain: () => Mo, labelFunction: () => Pt, scale: () => Eo });
var mr = (e) => {
  let t = (r) => (o, n2) => o === void 0 ? n2 : n2 === void 0 ? o : r(o, n2);
  return e.reduce((r, o) => [t(Math.min)(r[0], o[0]), t(Math.max)(r[1], o[1])], [void 0, void 0]);
};
var ue3 = (e) => Array.isArray(e) ? e.flat(1 / 0) : [e];
var Lo = 1;
var at2 = (e) => {
  let t = (r) => e(r);
  return (0, import_d3fc.rebindAll)(t, e), t.bandwidth = (...r) => r.length ? (e.bandwidth(...r), t) : Math.max(e.bandwidth(), Lo), t;
};
var pr = (e) => {
  let t = (r) => e(r);
  return (0, import_d3fc2.rebindAll)(t, e), t.ticks = function() {
    return [];
  }, t;
};
var Eo = () => pr(at2(band()));
var Mo = () => {
  let e = ["crossValue"], t = "horizontal", r = (n2) => {
    let a4 = ue3(n2);
    return o([...new Set(a4.map((l) => l[e[0]]))]);
  }, o = (n2) => t == "vertical" ? n2.reverse() : n2;
  return r.valueName = (...n2) => n2.length ? (e = [n2[0]], r) : e[0], r.valueNames = (...n2) => n2.length ? (e = n2[0], r) : e, r.orient = (...n2) => n2.length ? (t = n2[0], r) : t, r;
};
var Pt = (e) => (t) => t[e].join("|");
var Ht = {};
ot2(Ht, { component: () => Fo, domain: () => It, labelFunction: () => $t, scale: () => No, tickFormatFunction: () => Do });
var lt2 = () => {
  let e = [0, 0], t = "percent", r = (o) => {
    switch (t) {
      case "domain": {
        o[0] -= e[0], o[1] += e[1];
        break;
      }
      case "percent": {
        let n2 = o[1] - o[0];
        o[0] -= e[0] * n2, o[1] += e[1] * n2;
        break;
      }
      default:
        throw new Error("Unknown padUnit: " + t);
    }
    return o;
  };
  return r.pad = function() {
    return arguments.length ? (e = arguments.length <= 0 ? void 0 : arguments[0], r) : e;
  }, r.padUnit = function() {
    return arguments.length ? (t = arguments.length <= 0 ? void 0 : arguments[0], r) : t;
  }, r;
};
var fr = function() {
  let e = [function(a4) {
    return a4;
  }], t = null, r = [], o = lt2(), n2 = function(l) {
    let i3 = new Array(l.length), s2 = true, c6 = false, m2, d2 = e[Symbol.iterator]();
    try {
      for (let p2; !(s2 = (p2 = d2.next()).done); s2 = true) {
        let f3 = p2.value;
        for (let h2 = 0; h2 < l.length; h2++) {
          let g2 = f3(l[h2], h2);
          Array.isArray(g2) ? i3.push.apply(i3, Bt(g2)) : i3.push(g2);
        }
      }
    } catch (p2) {
      c6 = true, m2 = p2;
    } finally {
      try {
        !s2 && d2.return && d2.return();
      } finally {
        if (c6)
          throw m2;
      }
    }
    let u = [min(i3), max2(i3)];
    if (u[0] = u[0] == null ? min(r) : min([u[0]].concat(Bt(r))), u[1] = u[1] == null ? max2(r) : max2([u[1]].concat(Bt(r))), t != null) {
      let p2 = Math.max(Math.abs(u[1] - t), Math.abs(u[0] - t));
      u[0] = t - p2, u[1] = t + p2;
    }
    return o(u);
  };
  return n2.accessors = function() {
    return arguments.length ? (e = arguments.length <= 0 ? void 0 : arguments[0], n2) : e;
  }, n2.pad = function() {
    return arguments.length ? (o.pad(arguments.length <= 0 ? void 0 : arguments[0]), n2) : o.pad;
  }, n2.padUnit = function() {
    return arguments.length ? (o.padUnit(arguments.length <= 0 ? void 0 : arguments[0]), n2) : o.padUnit;
  }, n2.include = function() {
    return arguments.length ? (r = arguments.length <= 0 ? void 0 : arguments[0], n2) : r;
  }, n2.symmetricalAbout = function() {
    return arguments.length ? (t = arguments.length <= 0 ? void 0 : arguments[0], n2) : t;
  }, n2.paddingStrategy = function() {
    return arguments.length ? (o = arguments.length <= 0 ? void 0 : arguments[0], n2) : o;
  }, n2;
};
var Bt = function(e) {
  if (Array.isArray(e)) {
    let t = Array(e.length);
    for (let r = 0; r < e.length; r++)
      t[r] = e[r];
    return t;
  } else
    return Array.from(e);
};
var Oo = 1e7;
var st2 = (e) => Math.abs(e) >= Oo ? format(".3s")(e) : Number.isInteger(e) ? format(",.0f")(e) : format(",.2f")(e);
function De3(e) {
  return e.getRootNode().host;
}
function pe3(e) {
  return e.closest("#container.chart");
}
var No = () => linear2();
var It = () => {
  let e = fr().pad([0, 0.1]).padUnit("percent"), t = ["crossValue"], r = (a4) => (e.accessors(t.map((l) => (i3) => parseFloat(i3[l]))), n2(ue3(a4)));
  Q4.rebindAll(r, e);
  let o = (a4) => {
    let l = t.map((i3) => a4.map((s2) => s2[i3]).sort((s2, c6) => s2 - c6).filter((s2, c6, m2) => c6 === 0 || s2 !== m2[c6 - 1]).reduce((s2, c6, m2, d2) => m2 === 0 || s2 <= c6 - d2[m2 - 1] ? s2 : Math.abs(c6 - d2[m2 - 1])));
    return Math.min(...l);
  }, n2 = (a4) => {
    if (e.padUnit() == "domain") {
      let l = o(a4);
      return e.pad([l / 2, l / 2])(a4);
    } else
      return e(a4);
  };
  return r.valueName = (...a4) => a4.length ? (t = [a4[0]], r) : t[0], r.valueNames = (...a4) => a4.length ? (t = a4[0], r) : t, r;
};
var $t = (e) => (t) => t[e][0];
var Do = st2;
var Fo = (e) => {
  let t = null, r = "horizontal", o = null, n2 = (c6, m2) => {
    try {
      return pe3(c6.node()).querySelector(".cartesian-chart").querySelector(`.${m2}-axis`);
    } catch {
      return null;
    }
  }, a4 = (c6) => {
    let m2 = select_default2(c6).select("text").node();
    m2.style.fontSize = "80%";
  }, l = (c6, m2) => {
    let d2 = c6.getBoundingClientRect();
    m2.each((u, p2, f3) => {
      let h2 = select_default2(f3[p2]).node().getBoundingClientRect();
      (r == "vertical" && d2.width < h2.width || r == "horizontal" && d2.height < h2.height) && a4(f3[p2]);
    });
  }, i3 = (c6, m2, d2) => {
    let u = n2(c6, m2);
    u && l(u, c6);
  }, s2 = () => ({ bottom: Q4.axisBottom, left: Q4.axisLeft, top: Q4.axisTop, right: Q4.axisRight, decorate: i3 });
  return s2.domain = (...c6) => c6.length ? (t = c6[0], s2) : t, s2.orient = (...c6) => c6.length ? (r = c6[0], s2) : r, s2.settingName = (...c6) => c6.length ? (o = c6[0], s2) : o, s2;
};
var jt = {};
ot2(jt, { domain: () => Ro, labelFunction: () => Gt, scale: () => Po });
var Po = () => time();
var Ro = () => {
  let e = Fe2.extentTime(), t = ["crossValue"], r = (a4) => (e.accessors(t.map((l) => (i3) => new Date(i3[l]))), n2(ue3(a4)));
  Fe2.rebindAll(r, e, Fe2.exclude("include", "paddingStrategy"));
  let o = (a4) => {
    let l = t.map((i3) => a4.map((s2) => new Date(s2[i3]).getTime()).sort((s2, c6) => s2 - c6).filter((s2, c6, m2) => c6 === 0 || s2 !== m2[c6 - 1]).reduce((s2, c6, m2, d2) => m2 === 0 || Math.abs(s2) <= Math.abs(c6 - d2[m2 - 1]) ? Math.abs(s2) : Math.abs(c6 - d2[m2 - 1])));
    return Math.min(...l);
  }, n2 = (a4) => {
    let l = Math.abs(o(a4));
    return e.padUnit("domain").pad([l / 2, l / 2])(a4);
  };
  return r.valueName = (...a4) => a4.length ? (t = [a4[0]], r) : t[0], r.valueNames = (...a4) => a4.length ? (t = a4[0], r) : t, r;
};
var Gt = (e) => (t) => new Date(t[e][0]);
var Yt = {};
ot2(Yt, { component: () => Uo, domain: () => Yo, labelFunction: () => Wt, scale: () => Wo });
var gr = (...e) => {
  let t = {}, r = (o) => {
    for (let n2 of Object.keys(t))
      o[n2](t[n2]);
    return o;
  };
  for (let o of e)
    r[o] = (...n2) => n2.length ? (t[o] = n2[0], r) : t[o];
  return r;
};
var ct2 = (e, t, r) => {
  let o = 6, n2 = 6, a4 = gr("tickFormat", "ticks", "tickArguments", "tickValues", "tickPadding"), l = () => {
  }, i3 = null, s2 = (0, import_d3fc3.dataJoin)("g", "group"), c6 = (0, import_d3fc3.dataJoin)("path", "domain"), m2 = (h2, g2) => u() ? `translate(${g2}, ${h2})` : `translate(${h2}, ${g2})`, d2 = (h2) => u() ? h2.map((g2) => [g2[1], g2[0]]) : h2, u = () => e === "left" || e === "right", p2 = (h2) => {
    if (!i3) {
      a4(t(r).decorate(l))(h2);
      return;
    }
    h2.each((g2, y4, x5) => {
      let v2 = x5[y4], b4 = select_default2(v2), w3 = e === "bottom" || e === "right" ? 1 : -1, S5 = r.range(), k4 = d2([[S5[0], w3 * o], [S5[0], 0], [S5[1], 0], [S5[1], w3 * o]]);
      c6(b4, [g2]).attr("d", line_default()(k4)).attr("stroke", "#000").attr("fill", "none");
      let j5 = s2(b4, i3), M4 = (P3) => Array.isArray(n2) ? n2[P3] : n2, L3 = (P3) => {
        let E6 = 0;
        for (let H4 = 0; H4 < P3; H4++)
          E6 += M4(H4);
        return E6;
      };
      j5.attr("transform", (P3, E6) => m2(0, w3 * L3(E6))).each((P3, E6, H4) => {
        let J3 = select_default2(H4[E6]), q5 = f3(r, P3);
        a4(t(q5)).decorate((V5, T3) => l(V5, T3, E6)).tickSizeInner(M4(E6)).tickOffset((V5) => q5.step(V5) / 2)(J3), J3.select("path.domain").attr("visibility", "hidden");
      }), j5.exit().attr("transform", (P3, E6) => m2(0, w3 * L3(E6)));
    });
  }, f3 = (h2, g2) => {
    function y4(x5) {
      let v2 = x5.domain;
      return v2.reduce((b4, w3) => b4 + h2(w3), 0) / v2.length;
    }
    return y4.ticks = () => g2, y4.tickFormat = () => (x5) => x5.text, y4.copy = () => f3(h2, g2), y4.step = (x5) => x5.domain.length * h2.step(), (0, import_d3fc3.rebindAll)(y4, h2, (0, import_d3fc3.exclude)("ticks", "step", "copy")), y4;
  };
  return p2.tickSize = (...h2) => h2.length ? (n2 = o = Number(h2[0]), p2) : n2, p2.tickSizeInner = (...h2) => h2.length ? (n2 = Array.isArray(h2[0]) ? h2[0] : Number(h2[0]), p2) : n2, p2.tickSizeOuter = (...h2) => h2.length ? (o = Number(h2[0]), p2) : o, p2.decorate = (...h2) => h2.length ? (l = h2[0], p2) : l, p2.groups = (...h2) => h2.length ? (i3 = h2[0], p2) : i3, (0, import_d3fc3.rebindAll)(p2, a4), p2;
};
var vr = (e) => ct2("top", import_d3fc3.axisOrdinalTop, e);
var wr = (e) => ct2("bottom", import_d3fc3.axisOrdinalBottom, e);
var _r = (e) => ct2("left", import_d3fc3.axisOrdinalLeft, e);
var Sr = (e) => ct2("right", import_d3fc3.axisOrdinalRight, e);
var Wo = () => at2(band()).padding(0.5);
var Yo = () => {
  let e = ["crossValue"], t = "horizontal", r = (n2) => {
    let a4 = ue3(n2);
    return o([...Array.from(new Set(a4.map((l) => l[e[0]])))]);
  }, o = (n2) => t == "vertical" ? n2.reverse() : n2;
  return r.valueName = (...n2) => n2.length ? (e = [n2[0]], r) : e[0], r.valueNames = (...n2) => n2.length ? (e = n2[0], r) : e, r.orient = (...n2) => n2.length ? (t = n2[0], r) : t, r;
};
var Wt = (e) => (t) => t[e].join("|");
var Uo = (e) => {
  let t = "horizontal", r = "crossValues", o = null, n2 = () => {
    let u = e[r].length > 1, p2 = l(o), f3 = p2.map(i3), h2 = u ? f3.map((b4) => b4.size) : f3[0].size, g2 = f3.reduce((b4, w3) => b4 + w3.size, 0), y4 = (b4) => (w3) => {
      let S5 = b4(w3);
      return u && S5.groups(p2).tickSizeInner(h2).tickSizeOuter(g2), t !== "horizontal" && S5.tickPadding(10), S5;
    }, x5 = (b4, w3, S5) => {
      let k4 = f3[S5].rotation;
      t === "horizontal" && d2(b4, k4), s2(b4, k4);
    }, v2 = a4(u);
    return { bottom: y4(v2.bottom), left: y4(v2.left), right: y4(v2.right), top: y4(v2.top), size: `${g2 + 10}px`, decorate: x5 };
  }, a4 = (u) => u ? { bottom: wr, left: _r, top: vr, right: Sr } : { bottom: de3.axisOrdinalBottom, left: de3.axisOrdinalLeft, top: de3.axisOrdinalTop, right: de3.axisOrdinalRight }, l = (u) => {
    let p2 = [];
    return u.forEach((f3) => {
      (f3 && f3.split ? f3.split("|") : [f3]).forEach((g2, y4) => {
        for (; p2.length <= y4; )
          p2.push([]);
        let x5 = p2[y4];
        x5.length > 0 && x5[x5.length - 1].text === g2 ? x5[x5.length - 1].domain.push(f3) : x5.push({ text: g2, domain: [f3] });
      });
    }), p2.reverse();
  }, i3 = (u) => {
    let p2 = e.size.width, f3 = Math.max(...u.map((h2) => h2.text ? h2.text.length : 0));
    return t === "horizontal" ? u && u.length * 16 > p2 - 100 ? { size: f3 * 5 + 10, rotation: 90 } : u && u.length * (f3 * 6 + 10) > p2 - 100 ? { size: f3 * 3 + 20, rotation: 45 } : { size: 25, rotation: 0 } : { size: f3 * 5 + 10, rotation: 0 };
  }, s2 = (u, p2) => {
    let f3 = (w3) => {
      let S5 = w3.indexOf(",") !== -1 ? "," : " ", k4 = w3.substring(w3.indexOf("(") + 1, w3.indexOf(")")).split(S5).map((F5) => parseInt(F5));
      for (; k4.length < 2; )
        k4.push(0);
      return k4;
    }, y4 = p2 ? (w3, S5) => w3.x + w3.width + 14 > S5.x + S5.width : (w3, S5) => w3.x <= S5.x + S5.width && S5.x <= w3.x + w3.width && w3.y <= S5.y + S5.height && S5.y <= w3.y + w3.height, x5 = (w3, S5) => w3.x >= S5.x && w3.x + w3.width <= S5.x + S5.width && w3.y >= S5.y && w3.y + w3.height <= S5.y + S5.height, v2 = t == "horizontal" ? c6(u) : null, b4 = [];
    u.each((w3, S5, k4) => {
      let F5 = select_default2(k4[S5]), j5 = f3(F5.attr("transform")), M4 = F5.node().getBBox(), L3 = { x: M4.x + j5[0], y: M4.y + j5[1], width: M4.width, height: M4.height }, E6 = b4.some((H4) => y4(H4, L3)) || v2 && !x5(L3, v2);
      F5.attr("visibility", E6 ? "hidden" : ""), E6 || b4.push(L3);
    });
  }, c6 = (u) => {
    let p2 = pe3(u.node());
    if (p2 === null)
      return;
    let f3 = p2.querySelector(".cartesian-chart"), h2 = f3.querySelector(".x-axis"), g2 = f3.getBoundingClientRect(), y4 = h2.getBoundingClientRect();
    return { x: g2.left - y4.left, width: g2.width, y: g2.top - y4.top, height: g2.height };
  }, m2 = (u) => u ? u < 60 ? `rotate(-${u} 5 5)` : `rotate(-${u} 3 7)` : "translate(0, 8)", d2 = (u, p2) => {
    let f3 = m2(p2), h2 = p2 ? "end" : "";
    u.each((g2, y4, x5) => {
      select_default2(x5[y4]).select("text").attr("transform", f3).style("text-anchor", h2);
    });
  };
  return n2.orient = (...u) => u.length ? (t = u[0], n2) : t, n2.settingName = (...u) => u.length ? (r = u[0], n2) : r, n2.domain = (...u) => u.length ? (o = u[0], n2) : o, n2;
};
var Ko = { none: Rt, ordinal: Yt, time: jt, linear: Ht };
var A5 = (e) => {
  let t = null, r = "horizontal", o = "crossValues", n2 = null, a4 = ["crossValue"], l = null, i3 = null, s2 = ["include", "paddingStrategy", "pad"], c6 = {}, m2 = (p2) => {
    let f3 = Ne2(e).excludeType(t).settingName(o).settingValue(n2)(), h2 = Ko[f3], g2 = h2.domain().valueNames(a4);
    s2.forEach((v2) => {
      c6[v2] && g2[v2] && g2[v2](c6[v2]);
    }), g2.orient && g2.orient(r);
    let y4 = g2(p2);
    l !== null && (y4 = l(y4)), i3 && typeof y4[0] == "number" && (i3[0] = y4[0] = Math.min(y4[0], i3[0]), i3[1] = y4[1] = Math.max(y4[1], i3[1]));
    let x5 = h2.component ? d2(h2, y4, p2) : u();
    return { scale: h2.scale(), domain: y4, domainFunction: g2, labelFunction: h2.labelFunction, component: { bottom: x5.bottom, left: x5.left, top: x5.top, right: x5.right }, size: x5.size, decorate: x5.decorate, label: e[o].map((v2) => v2.name).join(", "), tickFormatFunction: h2.tickFormatFunction };
  }, d2 = (p2, f3, h2) => p2.component(e).orient(r).settingName(o).domain(f3)(h2), u = () => ({ bottom: fe3.axisBottom, left: fe3.axisLeft, top: fe3.axisTop, right: fe3.axisRight, decorate: () => {
  } });
  return m2.memoValue = (...p2) => p2.length ? (i3 = p2[0], m2) : i3, m2.excludeType = (...p2) => p2.length ? (t = p2[0], m2) : t, m2.orient = (...p2) => p2.length ? (r = p2[0], m2) : r, m2.settingName = (...p2) => p2.length ? (o = p2[0], m2) : o, m2.settingValue = (...p2) => p2.length ? (n2 = p2[0], m2) : n2, m2.valueName = (...p2) => p2.length ? (a4 = [p2[0]], m2) : a4[0], m2.valueNames = (...p2) => p2.length ? (a4 = p2[0], m2) : a4, m2.modifyDomain = (...p2) => p2.length ? (l = p2[0], m2) : l, s2.forEach((p2) => {
    m2[p2] = (...f3) => f3.length ? (c6[p2] = f3[0], m2) : c6[p2];
  }), m2;
};
var U5 = (e, t) => Vr(e, t, (r, o) => r.svgPlotArea(o), false);
var Pe3 = (e, t) => Vr(e, t, (r, o) => r.canvasPlotArea(o).svgPlotArea(Ce2.seriesSvgPoint()), true);
var Vr = (e, t, r, o) => {
  let n2 = null, a4 = null, l = Ce2.chartCartesian({ xScale: e.scale, yScale: t.scale, xAxis: e.component, yAxis: t.component }).xDomain(e.domain).xLabel(e.label).xAxisHeight(e.size).xDecorate(e.decorate).xTickFormat(e.tickFormatFunction).yDomain(t.domain).yLabel(t.label).yAxisWidth(t.size).yDecorate(t.decorate).yOrient("left").yTickFormat(t.tickFormatFunction);
  e.decorate && l.xDecorate(e.decorate), t.decorate && l.yDecorate(t.decorate), l.xPaddingInner && l.xPaddingInner(1), l.xPaddingOuter && l.xPaddingOuter(0.5), l.yPaddingInner && l.yPaddingInner(1), l.yPaddingOuter && l.yPaddingOuter(0.5), l.axisSplitter = (...s2) => s2.length ? (n2 = s2[0], l) : n2, l.altAxis = (...s2) => s2.length ? (a4 = s2[0], l) : a4, l.plotArea = function(...s2) {
    return s2.length == 0 ? o ? this.canvasPlotArea() : this.svgPlotArea() : r(this, ...s2);
  };
  let i3 = l.decorate();
  return l.decorate((s2, c6) => {
    let m2 = s2.select("d3fc-svg.plot-area"), d2 = m2.select("svg").node();
    d2.setAttribute("viewBox", `0 0 ${m2.node().clientWidth} ${m2.node().clientHeight}`), d2.setAttribute("preserveAspectRatio", "none");
    for (let u of ["x-axis", "y-axis"])
      s2.select(`d3fc-svg.${u} svg`).node().setAttribute("preserveAspectRatio", "none");
    if (i3(s2, c6), o) {
      let u = s2.select(".svg-plot-area").node(), p2 = s2.select(".canvas-plot-area").node();
      selectAll_default2([u, p2]).order();
    }
    if (!!n2) {
      if (n2.haveSplit()) {
        let u = n2.altData(), p2 = Ce2.dataJoin("d3fc-svg", "y2-axis").key((y4) => y4), f3 = Ce2.dataJoin("g", "y-series").key((y4) => y4);
        s2.append("div").attr("class", "y-label right-label").style("grid-column", 5).style("-ms-grid-column", 5).style("grid-row", 3).style("-ms-grid-row", 3).style("width", a4.size || "1em").style("display", "flex").style("align-items", "center").style("justify-content", "center").append("span").attr("class", "y-label splitter-label").style("transform", "rotate(-90deg)");
        let h2 = a4.scale.domain(a4.domain), g2 = a4.component.right(h2);
        if (g2.tickFormat(a4.tickFormatFunction), a4.decorate && g2.decorate(a4.decorate), p2(s2, ["right"]).attr("class", (y4) => `y-axis ${y4}-axis`).on("measure", function(y4, x5) {
          let { width: v2, height: b4 } = y4.detail;
          x5 === "left" && select_default2(y4.currentTarget).select("svg").attr("viewBox", `${-v2} 0 ${v2} ${b4}`).attr("preserveAspectRatio", "none"), h2.range([b4, 0]);
        }).on("draw", function(y4, x5) {
          select_default2(y4.currentTarget).select("svg").call(g2);
        }), o) {
          let y4 = (x5) => {
            let v2 = l.plotArea();
            v2.context(x5.node().getContext("2d")).xScale(e.scale);
            let b4 = [t.scale, h2];
            [c6, u].forEach((w3, S5) => {
              v2.yScale(b4[S5]), v2(w3);
            });
          };
          s2.select("d3fc-canvas.plot-area").on("draw", function(x5, v2) {
            y4(select_default2(x5.currentTarget).select("canvas"));
          });
        } else {
          let y4 = function(x5) {
            let v2 = l.plotArea();
            v2.xScale(e.scale);
            let b4 = [t.scale, h2];
            f3(x5, [c6, u]).each((w3, S5, k4) => {
              v2.yScale(b4[S5]), select_default2(k4[S5]).datum(w3).call(v2);
            });
          };
          s2.select("d3fc-svg.plot-area").on("draw", function(x5, v2) {
            y4(select_default2(x5.currentTarget).select("svg"));
          });
        }
      }
      n2(s2);
    }
  }), l;
};
function O4(e, t, r) {
  let o = e.select(t);
  return o.size() > 0 ? o : r();
}
function ee4(e, t, r = "right") {
  if (r === "right" || r === "bottom")
    return e[r] < t[r];
  if (r === "left" || r === "top")
    return e[r] > t[r];
  throw `Direction being checked for overflow is invalid: ${r}`;
}
function Ut(e, t, r, o = 0) {
  let n2 = e === "x" ? "width" : "height", a4 = t[e], l = t[e] + t[n2], i3 = r[e], s2 = r[e] + r[n2], c6 = i3 + o > a4 && i3 - o < l, m2 = s2 + o > a4 && s2 - o < l, d2 = i3 + o < a4 && s2 - o > l;
  return c6 || m2 || d2;
}
var Cr = `<ul id="tooltip-values"></ul>
`;
var Ar = { types: { float: { filter_operator: "==", aggregate: "sum", format: { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 } }, string: { filter_operator: "==", aggregate: "count" }, integer: { filter_operator: "==", aggregate: "sum", format: {} }, boolean: { filter_operator: "==", aggregate: "count" }, datetime: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short", timeStyle: "medium" }, null_value: -1 }, date: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short" }, null_value: -1 } } };
function Re3(e) {
  let t = {};
  if (kr2().types[e] && Object.assign(t, kr2().types[e]), t.type) {
    let r = Re3(t.type);
    return Object.assign(r, t), r;
  } else
    return t;
}
function Kt(e) {
  return e && typeof e == "object" && !Array.isArray(e);
}
function Xt(e, ...t) {
  if (!t.length)
    return e;
  let r = t.shift();
  if (Kt(e) && Kt(r))
    for (let o in r)
      Kt(r[o]) ? (e[o] || Object.assign(e, { [o]: {} }), Xt(e[o], r[o])) : Object.assign(e, { [o]: r[o] });
  return Xt(e, ...t);
}
function kr2() {
  return globalThis.__PERSPECTIVE_CONFIG__ || (globalThis.__PERSPECTIVE_CONFIG__ = Xt(Ar, globalThis.__TEMPLATE_CONFIG__ || {})), globalThis.__PERSPECTIVE_CONFIG__;
}
function le3(e, t) {
  switch (e) {
    case "date":
    case "datetime":
      return t instanceof Date ? t : new Date(parseInt(t)).toLocaleString([], Re3(e).format);
    case "integer":
      return parseInt(t, 10);
    case "float":
      return parseFloat(t);
  }
  return t;
}
function ut(e, t) {
  return t.crossValues.length === 0 ? [] : e.crossValue.length === 0 ? [] : ((e.crossValue.split ? e.crossValue.split("|") : [e.crossValue]) || [e.key]).map((o, n2) => ({ name: t.crossValues[n2].name, value: le3(t.crossValues[n2].type, o) }));
}
function mt2(e, t) {
  if (t.splitValues.length === 0)
    return [];
  let r = [e.mainValue];
  return e.key ? r = e.key.split("|") : e.mainValue?.split && (r = e.mainValue.split("|")), t.splitValues.map((o, n2) => ({ name: o.name, value: le3(o.type, r[n2]) }));
}
function pt2(e, t) {
  return t.mainValues.length > 1 ? e.mainValues ? t.mainValues.map((r, o) => ({ name: r.name, value: le3(r.type, e.mainValues[o]) })) : t.mainValues.map((r) => ({ name: r.name, value: le3(r.type, e.row[r.name]) })) : [{ name: t.mainValues[0].name, value: le3(t.mainValues[0].type, e.colorValue || e.mainValue - e.baseValue || e.mainValue || e.mainValues) }];
}
function Tr(e, t, r) {
  let o = ut(t, r).concat(mt2(t, r)).concat(pt2(t, r));
  Zo(e, o);
}
function Zo(e, t) {
  e.select("#tooltip-values").selectAll("li").data(t).join("li").each(function(r) {
    select_default2(this).text(`${r.name}: `).append("b").text(Jo(r.value));
  });
}
var Jo = (e) => e == null ? "-" : e.toLocaleString(void 0, { style: "decimal", minimumFractionDigits: Re3("float").precision, maximumFractionDigits: Re3("float").precision });
var Lr = (e) => [e.name, "==", e.value];
var qe = (e, t, r) => {
  let o = pt2(t, r).map((i3) => i3.name), n2 = ut(t, r).map(Lr), a4 = mt2(t, r).map(Lr), l = r.filter.concat(n2).concat(a4);
  e.dispatchEvent(new CustomEvent("perspective-click", { bubbles: true, composed: true, detail: { column_names: o, config: { filter: l }, row: t.row } }));
};
var zr = () => {
  let e = null, t = (r) => {
    let o = r.node();
    r.on("click", (n2, a4) => qe(o, a4, e));
  };
  return t.settings = (...r) => r.length ? (e = r[0], t) : e, t;
};
var ge3 = () => {
  let e = false, t = null, r = null, o = false, n2 = (a4) => {
    let l = a4.node();
    if (!l || !l.isConnected) {
      Er(t);
      return;
    }
    let i3 = select_default2(pe3(l));
    t = Qo(i3);
    let s2 = function(m2, d2) {
      Tr(t, d2, r);
      let u = a4.nodes(), p2 = u.indexOf(this);
      ea(i3.node(), u[p2], t, o), select_default2(u[p2]).style("opacity", "0.7");
    }, c6 = function(m2, d2) {
      Er(t);
      let u = a4.nodes(), p2 = u.indexOf(this);
      u && select_default2(u[p2]).style("opacity", "1");
    };
    e ? a4.each(function(m2) {
      return s2.call(this, void 0, m2);
    }) : (a4.on("mouseover", s2).on("mouseout", c6), zr().settings(r)(a4));
  };
  return n2.alwaysShow = (...a4) => a4.length ? (e = a4[0], n2) : e, n2.centered = (...a4) => a4.length ? (o = a4[0], n2) : o, n2.settings = (...a4) => a4.length ? (r = a4[0], n2) : r, n2;
};
function Qo(e) {
  return O4(e, "div.tooltip", () => e.append("div").attr("class", "tooltip").style("z-index", 3).style("opacity", 0).html(Cr));
}
function ea(e, t, r, o) {
  let n2 = e.getBoundingClientRect(), a4 = t.getBoundingClientRect(), l = a4.left + a4.width / 2 - n2.left, i3 = a4.top - n2.top + e.scrollTop;
  o && (i3 = a4.top + a4.height / 2 - n2.top + e.scrollTop), r.style("left", `${l}px`).style("top", `${i3}px`).style("opacity", 0.9), o && ([l, i3] = ta(r, n2)), ra(r, n2, l, i3, o);
}
function ta(e, t) {
  let r = e.node().getBoundingClientRect(), o = r.width / 2, n2 = r.left - o - t.left;
  e.style("left", `${n2}px`);
  let a4 = r.height / 2, l = r.top - a4 - t.top;
  return e.style("top", `${l}px`), [n2, l];
}
function ra(e, t, r, o, n2 = false) {
  let a4 = e.node().getBoundingClientRect();
  if (ee4(t, a4)) {
    let l = a4.right - t.right;
    e.style("left", `${r - l}px`);
  }
  if (ee4(t, a4, "bottom")) {
    let l = a4.bottom - t.bottom;
    e.style("top", `${o - l}px`);
  }
  if (!!n2) {
    if (ee4(t, a4, "left")) {
      let l = a4.left - t.left;
      e.style("left", `${r - l}px`);
    }
    if (ee4(t, a4, "top")) {
      let l = a4.top - t.top;
      e.style("top", `${o - l}px`);
    }
  }
}
function Er(e) {
  e && e.style("opacity", 0);
}
function dt2(e, t) {
  let r = e.mainValues.length > 1 ? ie4.seriesSvgGrouped(ie4.seriesSvgBar()) : ie4.seriesSvgBar();
  return r = r.decorate((o) => {
    ge3().settings(e)(o), o.style("fill", (n2) => t(n2.key));
  }), ie4.autoBandwidth(na(r)).crossValue((o) => o.crossValue).mainValue((o) => o.mainValue ? o.mainValue : 0).baseValue((o) => o.baseValue);
}
var na = (e) => {
  let t = (r) => e(r);
  return ie4.rebindAll(t, e), t.bandwidth = (...r) => r.length ? (e.bandwidth(Math.max(r[0], 1)), t) : e.bandwidth(), t;
};
function ye3(e) {
  return e.split("|").slice(0, -1).join("|");
}
function te3(e) {
  let t = e.data && e.data.length > 0 ? e.data[0] : {}, r = Object.keys(t).filter((o) => o !== "__ROW_PATH__");
  return Z5().settings(e).domain(r)();
}
function Mr(e, t) {
  let r = e.data, o = e.realValues[t], n2 = r.reduce((a4, l) => {
    let i3 = l[o];
    return a4.includes(i3) ? a4 : [...a4, i3];
  }, []).sort();
  return Z5().settings(e).domain(n2)();
}
function Be2(e, t) {
  let r = Array.from(new Set(t));
  return Z5().settings(e).domain(r)();
}
function Or(e) {
  let t = e.data[0] ?? {}, r = Object.keys(t).reduce((o, n2) => {
    if (n2 === "__ROW_PATH__")
      return o;
    let a4 = ye3(n2);
    return o.includes(a4) ? o : [...o, a4];
  }, []);
  return Z5().settings(e).domain(r)();
}
function Z5() {
  let e = null, t = null, r = {}, o = (a4) => Ae3(a4, r.colorStyles && r.colorStyles.opacity), n2 = () => {
    let a4 = r.colorStyles, l = t || [a4.series];
    if (l || e.length > 1) {
      let i3 = e.length > 1 ? a4.scheme : l;
      return ordinal(i3.map(o)).domain(e);
    }
    return null;
  };
  return n2.domain = (...a4) => a4.length ? (e = a4[0], n2) : e, n2.defaultColors = (...a4) => a4.length ? (t = a4[0], n2) : t, n2.mapFunction = (...a4) => a4.length ? (o = a4[0], n2) : o, n2.settings = (...a4) => a4.length ? (r = a4[0], n2) : r, n2;
}
function re5(e) {
  return ke3(1)(e);
}
function Ae3(e, t = 0.5) {
  return ke3(t)(e);
}
function ke3(e) {
  return (t) => {
    let r = color(t);
    return r != null && (r.opacity = e), r + "";
  };
}
var aa = { none: Pt, ordinal: Wt, time: Gt, linear: $t };
var K4 = (e) => {
  let t = Ne2(e), r = "__ROW_PATH__", o = (n2, a4) => aa[t()](r)(n2, a4);
  return (0, import_d3fc4.rebindAll)(o, t), o.valueName = (...n2) => n2.length ? (r = n2[0], o) : r, o;
};
function Te3(e, t, { stack: r = false, excludeEmpty: o = false } = {}) {
  let n2 = t || e.data;
  return e.splitValues.length > 0 ? la(e, n2, { stack: r, excludeEmpty: o }) : [n2];
}
function la(e, t, { stack: r = false, excludeEmpty: o = false }) {
  let n2 = {};
  return t.forEach((a4) => {
    let l = {}, i3 = {};
    Object.keys(a4).filter((s2) => s2 !== "__ROW_PATH__").filter((s2) => !o || a4[s2] != null && a4[s2] != null).forEach((s2) => {
      let c6 = s2.split("|"), m2 = c6[c6.length - 1], d2 = a4[s2] || 0, u = `${m2}${d2 >= 0 ? "+ve" : "-ve"}`, p2 = c6.slice(0, c6.length - 1).join("|"), f3 = i3[p2] = i3[p2] || { __ROW_PATH__: a4.__ROW_PATH__ }, h2 = l[u] || 0;
      f3.__KEY__ = p2, r ? (f3[m2] = h2 + d2, f3[`__BASE_VALUE__${m2}`] = h2, l[u] = f3[m2]) : f3[m2] = d2, f3.row = a4;
    }), Object.keys(i3).forEach((s2) => {
      (n2[s2] = n2[s2] || []).push(i3[s2]);
    });
  }), Object.keys(n2).map((a4) => {
    let l = n2[a4];
    return l.key = a4, l;
  });
}
function Nr(e, t) {
  let r = { stack: false }, o = Te3(e, t, r).map((n2) => Dr(e, n2, r));
  return e.mainValues.length > 1 ? o.reduce((a4, l) => a4.concat(l)) : o;
}
function ht(e, t) {
  let r = { stack: true };
  return Te3(e, t, r).map((o) => Dr(e, o, r));
}
function ia(e, t, { stack: r = false }) {
  let o = K4(e);
  return (n2) => {
    let a4 = (i3) => r && i3[`__BASE_VALUE__${n2.name}`] || 0, l = t.map((i3, s2) => ({ crossValue: o(i3, s2), mainValue: i3[n2.name] ? i3[n2.name] : null, baseValue: a4(i3), key: i3.__KEY__ ? `${i3.__KEY__}|${n2.name}` : n2.name, row: i3.row || i3 }));
    return l.key = l[0].key, l;
  };
}
function Dr(e, t, { stack: r = false }) {
  let o = ia(e, t, { stack: r });
  return e.mainValues.length > 1 ? e.mainValues.map(o) : o(e.mainValues[0]);
}
var Fr = `<span id="up-arrow">&#9650;</span>
<span id="page-text"></span>
<span id="down-arrow">&#9660;</span>
`;
function Pr(e) {
  let t = e.select("g.legendCells"), r = e.node().getBoundingClientRect();
  if (!ee4(r, t.node().getBoundingClientRect()))
    return;
  let o = e.select(".legend");
  t.selectAll(".label").text((n2, a4, l) => {
    let i3 = l[a4];
    if (ee4(r, i3.getBoundingClientRect())) {
      let s2 = ca(i3, o, r);
      return `${n2.substring(0, s2 - 3)}...`;
    } else
      return n2;
  });
}
function ca(e, t, r) {
  let o = e.getBoundingClientRect(), n2 = t.node().createSVGPoint(), a4 = 3;
  return n2.x = r.right - o.left - a4, n2.y = 0, e.getCharNumAtPosition(n2);
}
var Le3 = 10;
function xe3(e, t, r) {
  let o = select_default2(De3(e).getContainer()).node().getBoundingClientRect(), n2 = e.getBoundingClientRect(), a4 = { top: n2.top + r - Le3, right: n2.right + t + Le3, bottom: n2.bottom + r + Le3, left: n2.left + t - Le3 }, l = { x: t, y: r };
  return [{ edge: "right", dimension: "x" }, { edge: "left", dimension: "x" }, { edge: "top", dimension: "y" }, { edge: "bottom", dimension: "y" }].forEach((s2) => {
    if (ee4(o, a4, s2.edge)) {
      let c6 = a4[s2.edge] - o[s2.edge];
      l[s2.dimension] = l[s2.dimension] - c6;
    }
  }), l;
}
var Zt = "resize.for-dragging";
function Br() {
  let e = true, t = null, r = (o) => {
    let n2 = o.node(), a4 = n2.getRootNode().host.closest("perspective-viewer");
    n2.style.cursor = "move", t.legend && (n2.style.left = t.legend.left, n2.style.top = t.legend.top);
    let l = drag_default().on("drag", function(i3) {
      let s2 = xe3(this, i3.dx, i3.dy);
      this.style.left = `${this.offsetLeft + s2.x}px`, this.style.top = `${this.offsetTop + s2.y}px`;
      let c6 = { left: this.style.left, top: this.style.top };
      t.legend = { ...t.legend, ...c6 }, e = pa(n2) ? ma(n2) : ua(n2, e);
    });
    l.on("end", function(i3) {
      select_default2(window).on(Zt, null), a4?.dispatchEvent(new Event("perspective-config-update"));
    }), o.call(l);
  };
  return r.settings = (...o) => o.length ? (t = o[0], r) : t, r;
}
function ua(e, t) {
  return t !== false && select_default2(window).on(Zt, function() {
    let r = xe3(e, 0, 0);
    e.style.left = `${e.offsetLeft + r.x}px`, e.style.top = `${e.offsetTop + r.y}px`;
  }), false;
}
function ma(e) {
  return select_default2(window).on(Zt, null), e.style.left = "auto", true;
}
function pa(e) {
  let t = e.getBoundingClientRect(), r = select_default2(pe3(e)).node().getBoundingClientRect(), o = 5;
  return t.right + Le3 + o >= r.right && t.top - Le3 - o <= r.top;
}
var Ir = "horizontal-drag-handle";
var $r = "vertical-drag-handle";
var da = "corner-drag-handle";
var Gr = "dragHandles";
var Hr = 0;
var be2 = "resize";
function jr() {
  let e = 9, t = 3, r = null, o = { height: 100, width: 100 }, n2 = { height: null, width: null }, a4 = [], l = (m2, d2) => a4.filter((u) => u.event === m2).forEach((u) => u.execute(d2)), i3 = (m2) => {
    if (ha(m2))
      return;
    let d2 = { left: (_3) => l(be2, { horizontal: J3(_3), vertical: false }), top: (_3) => l(be2, { horizontal: false, vertical: oe3(_3) }), right: (_3) => l(be2, { horizontal: q5(_3), vertical: false }), bottom: (_3) => l(be2, { horizontal: false, vertical: V5(_3) }), topleft: (_3) => l(be2, { horizontal: J3(_3), vertical: oe3(_3) }), topright: (_3) => l(be2, { horizontal: q5(_3), vertical: oe3(_3) }), bottomright: (_3) => l(be2, { horizontal: q5(_3), vertical: V5(_3) }), bottomleft: (_3) => l(be2, { horizontal: J3(_3), vertical: V5(_3) }) }, u = m2.node();
    r.legend && (u.style.height = r.legend.height, u.style.width = r.legend.width);
    let p2 = u.getBoundingClientRect(), f3 = m2.append("svg").attr("id", Gr).attr("width", p2.width).attr("height", p2.height), h2 = f3.append("g"), g2 = (_3) => _3 === "left" || _3 === "right", y4 = { left: 0, top: e, right: p2.width - e, bottom: e }, x5 = { left: e, top: 0, right: e, bottom: p2.height - e }, v2 = ["left", "top", "right", "bottom"], [b4, w3, S5, k4] = v2.map((_3) => h2.append("rect").attr("id", `drag${_3}`).attr("class", g2(_3) ? $r : Ir).attr("y", x5[_3]).attr("x", y4[_3]).attr("height", g2(_3) ? p2.height - e * 2 : e).attr("width", g2(_3) ? e : p2.width - e * 2).attr("fill", g2(_3) ? "lightgreen" : "lightblue").attr("fill-opacity", Hr).style("z-index", t).attr("cursor", g2(_3) ? "ew-resize" : "ns-resize").call(drag_default().on("drag", d2[_3]))), F5 = (_3) => `${_3[0]}${_3[1]}`, j5 = { topleft: "nwse", topright: "nesw", bottomright: "nwse", bottomleft: "nesw" }, M4 = [["top", "left"], ["top", "right"], ["bottom", "right"], ["bottom", "left"]], [L3, P3, E6, H4] = M4.map((_3) => h2.append("rect").attr("id", `drag${F5(_3)}`).attr("class", `${da} ${_3[0]} ${_3[1]}`).attr("height", e).attr("width", e).attr("fill", "red").attr("fill-opacity", Hr).style("z-index", t).attr("cursor", `${j5[F5(_3)]}-resize`).call(drag_default().on("drag", d2[F5(_3)])));
    Ue2("height", "y", k4), Ue2("width", "x", S5), ce3(f3);
    function J3(_3) {
      let z4 = c6(xe3(b4.node(), _3.x, 0).x, f3, "width", (W4, ae4) => W4 - ae4);
      return u.style.left = `${u.offsetLeft + z4}px`, u.style.width = `${u.offsetWidth - z4}px`, T3(), Y6(S5, z4, "width", "x");
    }
    function q5(_3) {
      let z4 = -c6(xe3(S5.node(), _3.dx, 0).x, f3, "width", (W4, ae4) => W4 + ae4);
      return s2(z4, "x", S5, _3) ? false : (u.style.width = `${u.offsetWidth - z4}px`, T3(), Y6(S5, z4, "width", "x"));
    }
    function oe3(_3) {
      let z4 = c6(xe3(w3.node(), 0, _3.y).y, f3, "height", (W4, ae4) => W4 - ae4);
      return u.style.top = `${u.offsetTop + z4}px`, u.style.height = `${u.offsetHeight - z4}px`, T3(), Y6(k4, z4, "height", "y");
    }
    function V5(_3) {
      let z4 = -c6(xe3(k4.node(), 0, _3.dy).y, f3, "height", (W4, ae4) => W4 + ae4);
      return s2(z4, "y", k4, _3) ? false : (u.style.height = `${u.offsetHeight - z4}px`, T3(), Y6(k4, z4, "height", "y"));
    }
    function T3() {
      let _3 = { top: u.style.top, left: u.style.left, height: u.style.height, width: u.style.width };
      r.legend = { ...r.legend, ..._3 };
    }
    function Y6(_3, z4, W4, ae4) {
      return ya(f3, W4, z4), ga(_3, ae4, z4), fa(f3, z4, W4, W4 === "height" ? $r : Ir), ce3(f3), z4 != 0;
    }
    function ce3(_3) {
      L3.attr("y", 0, "x", 0), P3.attr("y", 0).attr("x", _3.attr("width") - e), E6.attr("y", _3.attr("height") - e).attr("x", _3.attr("width") - e), H4.attr("y", _3.attr("height") - e).attr("x", 0);
    }
    function Ue2(_3, z4, W4) {
      !!n2[_3] && n2[_3] < p2[_3] && (u.style[_3] = `${n2[_3]}px`, Y6(W4, p2[_3] - n2[_3], _3, z4));
    }
  };
  i3.on = (m2, d2) => (a4.push({ event: m2, execute: d2 }), i3), i3.zIndex = (m2) => (t = m2, i3), i3.settings = (...m2) => m2.length ? (r = m2[0], i3) : r, i3.minWidth = (m2) => (o.width = m2, n2.width && (n2.width = Math.max(o.width, n2.width)), i3), i3.minHeight = (m2) => (o.height = m2, n2.height && (n2.height = Math.max(o.height, n2.height)), i3), i3.handleWidth = (m2) => (e = m2, i3), i3.maxWidth = (m2) => (n2.width = m2, o.width = Math.min(o.width, n2.width), i3), i3.maxHeight = (m2) => (n2.height = m2, o.height = Math.min(o.height, n2.height), i3);
  function s2(m2, d2, u, p2) {
    let f3 = (g2, y4, x5, v2) => g2 < 0 && v2[y4] < Number(x5.attr(y4)), h2 = (g2, y4, x5, v2) => g2 > 0 && v2[y4] > Number(x5.attr(y4));
    return f3(m2, d2, u, p2) || h2(m2, d2, u, p2);
  }
  function c6(m2, d2, u, p2) {
    let f3 = p2(Number(d2.attr(u)), m2);
    if (f3 < o[u]) {
      let h2 = o[u] - f3;
      return p2(m2, h2);
    }
    if (!!n2[u] && f3 > n2[u]) {
      let h2 = n2[u] - f3;
      return p2(m2, h2);
    }
    return m2;
  }
  return i3;
}
var fa = (e, t, r, o) => {
  e.selectAll(`.${o}`).each((a4, l, i3) => {
    let s2 = i3[l];
    select_default2(s2).attr(r, s2.getBoundingClientRect()[r] - t);
  });
};
var ha = (e) => e.select(`#${Gr}`).size() > 0;
var ga = (e, t, r) => e.attr(t, Number(e.attr(t)) - r);
var ya = (e, t, r) => e.attr(t, e.node().getBoundingClientRect()[t] - r);
var Wr = 16;
var Yr = 20;
var Jt = (e, t) => {
  let r = e || color3(), o = [], n2 = 1, a4, l = t.legend && t.legend.pageIndex ? t.legend.pageIndex : 0, i3 = () => {
  }, s2 = Br().settings(t), c6, m2 = (b4) => {
    o = r.scale().domain(), c6 = jr().settings(t).maxHeight(o.length * Wr + Yr).on("resize", () => d2(b4)), c6(b4), s2(b4), d2(b4);
  }, d2 = (b4) => {
    g2(b4), u(b4), p2(b4), Pr(b4);
  }, u = (b4) => {
    let w3 = x5(b4);
    w3.style("display", n2 <= 1 ? "none" : "block"), w3.select("#page-text").text(`${l + 1}/${n2}`), w3.select("#up-arrow").attr("class", l === 0 ? "disabled" : "").on("click", () => {
      l > 0 && (f3(l - 1), d2(b4));
    }), w3.select("#down-arrow").attr("class", l >= n2 - 1 ? "disabled" : "").on("click", () => {
      l < n2 - 1 && (f3(l + 1), d2(b4));
    });
  }, p2 = (b4) => {
    n2 > 1 && r.cellFilter(h2()), b4.select("g.legendCells").remove();
    let w3 = v2(b4);
    w3.call(r);
    let S5 = b4.select("g.legendCells").node().getBBox();
    w3.attr("height", S5.height + Yr), i3(b4);
  }, f3 = (b4) => {
    l = b4, t.legend = { ...t.legend, pageIndex: l };
  }, h2 = () => (b4, w3) => w3 >= a4 * l && w3 < a4 * l + a4, g2 = (b4) => {
    let w3 = b4.node().getBoundingClientRect(), S5 = Math.floor(w3.height / Wr) - 1;
    a4 = S5 < o.length ? S5 - 1 : S5, n2 = y4(S5), l = Math.min(l, n2 - 1);
  }, y4 = (b4) => Math.ceil(o.length / b4), x5 = (b4) => O4(b4, ".legend-controls", () => b4.append("g").attr("class", "legend-controls").html(Fr)), v2 = (b4) => O4(b4, ".legend", () => b4.append("svg").attr("class", "legend"));
  return m2.decorate = (...b4) => b4.length ? (i3 = b4[0], m2) : i3, (0, import_d3fc5.rebindAll)(m2, r), m2;
};
var Kr = (e) => Jt(color3().shape("circle").shapeRadius(6), e);
var ba = (e) => Jt(symbol().shapePadding(1).labelOffset(3), e);
var R3 = () => Qt(Kr);
var Je = () => Qt(ba, qr);
var Xr = () => Qt(Kr, qr);
function qr(e) {
  if (!e)
    return null;
  let t = e.domain(), r = e.range().map((o) => Symbol2().type(o)());
  return ordinal().domain(t).range(r);
}
function Qt(e, t) {
  let r = {}, o = null, n2 = null;
  function a4(l) {
    if (o && o.range().length > 1) {
      let i3 = e(r);
      i3.scale(o).orient("vertical").on("cellclick", function(c6) {
        let m2 = this.__data__;
        r.hideKeys = r.hideKeys || [], r.hideKeys.includes(m2) ? r.hideKeys = r.hideKeys.filter((d2) => d2 !== m2) : r.hideKeys.push(m2), De3(this)._draw();
      }), i3.labels((c6) => {
        let m2 = c6.domain[c6.i].split("|");
        return r.mainValues.length <= 1 && m2.length > 1 ? m2.slice(0, m2.length - 1).join("|") : c6.domain[c6.i];
      });
      let s2 = O4(l, "div.legend-container", () => l.append("div"));
      i3.decorate((c6) => {
        let m2 = (u) => r.hideKeys && r.hideKeys.includes(u), d2 = c6.select("g.legendCells").attr("transform", "translate(20,20)").selectAll("g.cell");
        d2.classed("hidden", m2), d2.append("title").html((u) => u), n2 && d2.select("circle, path").style("fill", (u) => m2(u) ? null : n2(u)).style("stroke", (u) => m2(u) ? null : re5(n2(u)));
      }), s2.attr("class", "legend-container").attr("borderbox-on-hover", true).style("z-index", "2").call(i3);
    }
  }
  return a4.settings = (...l) => l.length ? (r = l[0], a4) : r, a4.scale = (...l) => l.length ? (o = t ? t(l[0]) : l[0], a4) : o, a4.color = (...l) => l.length ? (n2 = l[0], a4) : n2, a4;
}
function X5(e, t) {
  let r = t || e.data;
  return e.hideKeys && e.hideKeys.length > 0 ? r.map((o) => {
    let n2 = { ...o };
    return e.hideKeys.forEach((a4) => {
      delete n2[a4];
    }), n2;
  }) : r;
}
function Ie2(e, t) {
  let r = t || e.data;
  return e.hideKeys && e.hideKeys.length > 0 ? r.map((o) => {
    let n2 = {};
    return Object.keys(o).map((a4) => {
      e.hideKeys.includes(ye3(a4)) || (n2[a4] = o[a4]);
    }), n2;
  }) : r;
}
var va = (e) => (t) => t.style("stroke-width", "1.0").style("stroke", e ? e.colorStyles.grid.gridLineColor : "#bbb");
var wa = (e) => (t) => {
  t.strokeStyle = e ? e.colorStyles.grid.gridLineColor : "#bbb", t.lineWidth = 1;
};
var _a2 = (e) => e.style("display", "none");
var Sa = (e) => (t) => {
  t.lineWidth = 1, t.strokeStyle = e ? e.colorStyles.grid.gridLineColor : "#bbb";
};
var N5 = (e, t) => {
  let r = "both", o = false, n2 = null, a4 = null, l = null, i3 = ve3.seriesSvgMulti(), s2 = ve3.annotationSvgGridline(), c6 = va(t), m2 = _a2, d2 = function(...u) {
    o && (i3 = ve3.seriesCanvasMulti().context(l), s2 = ve3.annotationCanvasGridline(), c6 = wa(t), m2 = Sa(t));
    let p2 = i3.xScale(n2).yScale(a4), f3 = r === "vertical" ? m2 : c6, h2 = r === "horizontal" ? m2 : c6, g2 = s2.xDecorate(f3).yDecorate(h2);
    return p2.series([g2, e])(...u);
  };
  return d2.orient = (...u) => u.length ? (r = u[0], d2) : r, d2.canvas = (...u) => u.length ? (o = u[0], d2) : o, d2.xScale = (...u) => u.length ? (n2 = u[0], d2) : n2, d2.yScale = (...u) => u.length ? (a4 = u[0], d2) : a4, d2.context = (...u) => u.length ? (l = u[0], d2) : l, d2;
};
var B7 = () => {
  let e = lt2(), t = (r) => {
    let o = e.pad(), n2 = e.padUnit(), a4 = 1;
    switch (n2) {
      case "domain":
        break;
      case "percent": {
        a4 = r[1] - r[0];
        break;
      }
      default:
        throw new Error("Unknown padUnit: " + n2);
    }
    let l = r[0] - o[0] * a4, i3 = r[1] + o[1] * a4;
    return r[0] = r[0] >= 0 && l < 0 ? 0 : l, r[1] = r[1] <= 0 && i3 > 0 ? 0 : i3, r;
  };
  return Zr.rebindAll(t, e), t;
};
var Jr = `<button id="zoom-reset">Reset zoom</button>
<button id="one-year">1 Year</button>
<button id="six-months">6 Months</button>
<button id="one-month">1 Month</button>
`;
var D7 = () => {
  let e = null, t = null, r = null, o = null, n2 = null, a4 = null, l = false, i3 = false, s2 = () => {
  };
  function c6(p2) {
    let f3 = `d3fc-${i3 ? "canvas" : "svg"}.plot-area`;
    if (r || n2) {
      let h2 = o && o.domain()[0] instanceof Date, g2 = zoom_default2().on("zoom", (x5) => {
        let { transform: v2 } = x5;
        t.zoom = { k: v2.k, x: v2.x, y: v2.y }, m2(v2), p2.call(e);
        let b4 = v2.k === 1 && v2.x === 0 && v2.y === 0, w3 = d2(p2).style("display", b4 ? "none" : "");
        w3.select("#zoom-reset").on("click", () => p2.select(f3).call(g2.transform, identity5));
        let S5 = w3.select("#one-year").style("display", h2 ? "" : "none"), k4 = w3.select("#six-months").style("display", h2 ? "" : "none"), F5 = w3.select("#one-month").style("display", h2 ? "" : "none");
        if (h2) {
          let j5 = (M4) => () => {
            let L3 = new Date(r.domain()[0]), P3 = new Date(L3);
            M4(L3, P3);
            let E6 = o.range(), H4 = (E6[1] - E6[0]) / (o(P3) - o(L3)), J3 = -o(L3) * H4, q5 = 0;
            if (n2) {
              let oe3 = n2.domain().reduce((V5, T3) => V5 + T3) / 2;
              q5 = -a4(oe3) * H4 + n2(oe3);
            }
            p2.select(f3).call(g2.transform, identity5.translate(J3, q5).scale(H4));
          };
          S5.on("click", j5((M4, L3) => L3.setYear(M4.getFullYear() + 1))), k4.on("click", j5((M4, L3) => L3.setMonth(M4.getMonth() + 6))), F5.on("click", j5((M4, L3) => L3.setMonth(M4.getMonth() + 1)));
        }
      }), y4 = e.decorate();
      e.decorate((x5, v2) => {
        if (y4(x5, v2), !l) {
          l = true;
          let b4 = x5.select(f3), w3 = i3 ? window.devicePixelRatio : 1;
          b4.on("measure.zoom-range", (S5) => {
            if (o && o.range([0, S5.detail.width / w3]), a4 && a4.range([0, S5.detail.height / w3]), t.zoom) {
              let k4 = identity5.translate(t.zoom.x, t.zoom.y).scale(t.zoom.k);
              b4.call(g2.transform, k4);
            }
          }).call(g2);
        }
      });
    }
    p2.call(e);
  }
  c6.chart = (...p2) => p2.length ? (e = p2[0], c6) : e, c6.settings = (...p2) => p2.length ? (t = p2[0], c6) : t, c6.xScale = (...p2) => p2.length ? (r = u(p2[0]), o = r ? r.copy() : null, c6) : r, c6.yScale = (...p2) => {
    if (!p2.length)
      return n2;
    if (n2 = u(p2[0]), a4 = n2 ? n2.copy() : null, a4) {
      let f3 = a4.domain();
      a4.domain([f3[1], f3[0]]);
    }
    return c6;
  }, c6.canvas = (...p2) => p2.length ? (i3 = p2[0], c6) : i3, c6.onChange = (...p2) => p2.length ? (s2 = p2[0], c6) : s2;
  let m2 = (p2) => {
    let f3 = { ...p2 };
    if (r && (r.domain(p2.rescaleX(o).domain()), f3.xDomain = r.domain()), n2) {
      let h2 = p2.rescaleY(a4).domain();
      n2.domain([h2[1], h2[0]]), f3.yDomain = n2.domain();
    }
    s2(f3);
  }, d2 = (p2) => O4(p2, ".zoom-controls", () => p2.append("div").attr("class", "zoom-controls").style("display", "none").html(Jr)), u = (p2) => p2 && p2.nice ? p2 : null;
  return c6;
};
function en(e, t) {
  let r = ht(t, X5(t)), o = te3(t), n2 = R3().settings(t).scale(o), a4 = dt2(t, o).orient("horizontal"), l = Qr.seriesSvgMulti().mapping((d2, u) => d2[u]).series(r.map(() => a4)), i3 = A5(t).settingName("mainValues").valueName("mainValue").memoValue(t.axisMemo[0]).excludeType(C7.ordinal).include([0]).paddingStrategy(B7())(r), s2 = A5(t).excludeType(C7.linear).settingName("crossValues").valueName("crossValue").orient("vertical")(r), c6 = U5(i3, s2).plotArea(N5(l, t).orient("horizontal"));
  c6.yPaddingInner && (c6.yPaddingInner(0.5), c6.yPaddingOuter(0.25), a4.align("left")), c6.xNice && c6.xNice();
  let m2 = D7().chart(c6).settings(t).yScale(s2.scale);
  e.datum(r).call(m2), e.call(n2);
}
en.plugin = { name: "X Bar", category: "X Chart", max_cells: 1e3, max_columns: 50, render_warning: true, initial: { names: ["X Axis"] } };
var tn = en;
var an = (e, t) => {
  if (!rn(e) || !rn(t))
    return;
  let r = nn(e), o = nn(t);
  r > o ? t[0] = on(t, r) : e[0] = on(e, o);
};
var rn = (e) => e.length === 2 && !isNaN(e[0]) && !isNaN(e[1]) && e[0] !== e[1];
var nn = (e) => (0 - e[0]) / (e[1] - e[0]);
var on = (e, t) => t * e[1] / (t - 1);
var sn = (e) => {
  let t = [], r = false, o, n2 = (l) => {
    l.text("");
    let i3 = ln.dataJoin("span", "splitter-label").key((m2) => m2), s2 = !r && t.length === 1, c6 = o && e.splitValues.length === 0;
    i3(l, t).classed("disabled", s2).text((m2) => m2.name).style("color", (m2) => c6 ? re5(o(m2.name)) : void 0).on("click", (m2, d2) => {
      s2 || (r ? e.splitMainValues = e.splitMainValues.filter((u) => u != d2.name) : e.splitMainValues = [d2.name].concat(e.splitMainValues || []), m2.target.getRootNode().host.closest("perspective-viewer")?.dispatchEvent(new Event("perspective-config-update")), a4(l));
    });
  }, a4 = (l) => {
    let i3 = De3(l.node());
    i3._container.innerHTML = "", i3._draw();
  };
  return n2.labels = (...l) => l.length ? (t = l[0], n2) : t, n2.alt = (...l) => l.length ? (r = l[0], n2) : r, n2.color = (...l) => l.length ? (o = l[0], n2) : o, n2;
};
var we3 = (e, t, r = Ca) => {
  let o, n2, a4, l = e.splitMainValues || [], i3 = (m2) => {
    let d2 = m2.split("|");
    return l.includes(d2[d2.length - 1]);
  }, s2 = e.mainValues.some((m2) => i3(m2.name));
  n2 = s2 ? r(t, (m2) => !i3(m2)) : t, a4 = s2 ? r(t, i3) : null;
  let c6 = (m2) => {
    if (e.mainValues.length === 1)
      return;
    let d2 = e.mainValues.map((h2, g2) => ({ index: g2, name: h2.name })), u = d2.filter((h2) => !i3(h2.name)), p2 = d2.filter((h2) => i3(h2.name)), f3 = () => sn(e).color(o);
    m2.select(".y-label.left-label").call(f3().labels(u)), m2.select(".y-label.right-label").call(f3().labels(p2).alt(true));
  };
  return c6.color = (...m2) => m2.length ? (o = m2[0], c6) : o, c6.haveSplit = () => s2, c6.data = (...m2) => m2.length ? (n2 = m2[0], c6) : n2, c6.altData = (...m2) => m2.length ? (a4 = m2[0], c6) : a4, c6;
};
var Ca = (e, t) => e.map((r) => r.filter((o) => t(o.key)));
var er = (e, t) => e.map((r) => t(r.key) ? r : r.map((o) => Object.assign({}, o, { mainValue: null })));
var cn = (e, t) => e.map((r) => er(r, t));
function mn(e, t) {
  let r = ht(t, X5(t)), o = te3(t), n2 = R3().settings(t).scale(o), a4 = dt2(t, o).orient("vertical"), l = un.seriesSvgMulti().mapping((h2, g2) => h2[g2]).series(r.map(() => a4)), i3 = A5(t).excludeType(C7.linear).settingName("crossValues").valueName("crossValue")(r), s2 = A5(t).settingName("mainValues").valueName("mainValue").memoValue(t.axisMemo[1]).excludeType(C7.ordinal).orient("vertical").include([0]).paddingStrategy(B7()), c6 = t.mainValues.length > 1 ? cn : er, m2 = we3(t, r, c6).color(o), d2 = s2(m2.data()), u = m2.haveSplit() ? l : N5(l, t).orient("vertical"), p2 = U5(i3, d2).axisSplitter(m2).plotArea(u);
  p2.xPaddingInner && (p2.xPaddingInner(0.5), p2.xPaddingOuter(0.25), a4.align("left")), p2.yNice && p2.yNice();
  let f3 = D7().chart(p2).settings(t).xScale(i3.scale);
  if (m2.haveSplit()) {
    let h2 = s2(m2.altData());
    an(d2.domain, h2.domain), p2.yDomain(d2.domain).altAxis(h2);
  }
  e.datum(m2.data()).call(f3), e.call(n2);
}
mn.plugin = { name: "Y Bar", category: "Y Chart", max_cells: 1e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var pn = mn;
function He2(e, t) {
  let r = dn.seriesSvgLine(), o = e.data.length * (e.data?.length > 0 ? Object.keys(e.data[0]).length - (e.crossValues?.length > 0 ? 1 : 0) : 0), n2 = Math.max(1, Math.min(3, Math.floor(e.size.width / o / 2)));
  return r = r.decorate((a4) => {
    a4.style("stroke", (l) => re5(t(l[0] && l[0].key))).style("stroke-width", n2);
  }), r.crossValue((a4) => a4.crossValue).mainValue((a4) => a4.mainValue);
}
function fn(e, t) {
  let r = K4(e);
  return t.map((o, n2) => Object.keys(o).filter((a4) => a4 !== "__ROW_PATH__").map((a4) => ({ key: a4, crossValue: r(o, n2), mainValue: o[a4], row: o })));
}
var xt = function(e) {
  let t = [];
  for (let r of e)
    for (let o = 0; o < r.length; o++)
      r[o].mainValue !== null && (t[o] = t[o] || [], t[o].push(r[o]));
  return t;
};
var tr = (e, t, r = Math.min) => {
  let o = (l) => l.reduce((i3, s2) => {
    let c6 = n2(s2, t);
    return c6 && (!i3 || r(i3.value, c6.value) === c6.value) ? c6 : i3;
  }, null), n2 = (l) => {
    if (Array.isArray(l))
      return o(l, t);
    let i3 = t(l);
    return i3 !== null ? { item: l, value: i3 } : null;
  }, a4 = o(e, t);
  return a4 ? a4.item : null;
};
var G3 = () => {
  let e = ge3().alwaysShow(true), t = null, r = null, o = null, n2 = null, a4 = false, l = null, i3 = "crossValue", s2 = "mainValue", c6 = null, m2 = 1;
  function d2(f3) {
    let h2 = `d3fc-${a4 ? "canvas" : "svg"}.plot-area`;
    if (t || r) {
      let g2 = null, y4 = bt.pointer().on("point", (x5) => {
        let v2 = x5.length ? p2(x5[0]) : null;
        g2 = v2 ? [v2.data] : [];
        let b4 = v2 ? v2.scale : r;
        u(f3, g2, b4);
      });
      f3.select(h2).on("measure.nearbyTip", () => u(f3, [])).on("click", () => {
        g2.length && qe(f3.node(), g2[0], e.settings());
      }).call(y4);
    }
  }
  let u = (f3, h2, g2 = r) => {
    let y4 = f3.select("d3fc-svg.plot-area svg").selectAll("circle.nearbyTip").data(h2);
    y4.exit().remove(), y4.enter().append("circle").attr("class", "nearbyTip").merge(y4).attr("r", (x5) => n2 ? m2 * Math.sqrt(n2(x5.size)) : 10).attr("transform", (x5) => `translate(${t(x5[i3])},${g2(x5[s2])})`).style("stroke", "none").style("fill", (x5) => o && x5.key && Ae3(o(x5.key))), e(y4);
  }, p2 = (f3) => {
    let h2 = (x5) => (v2) => v2[s2] === void 0 || v2[s2] === null || v2[i3] === void 0 || v2[i3] === null ? null : Math.sqrt(Math.pow(t(v2[i3]) - f3.x, 2) + Math.pow(x5(v2[s2]) - f3.y, 2)), g2 = h2(r), y4 = tr(l, g2, Math.min);
    if (c6) {
      let x5 = h2(c6.yScale), v2 = tr(c6.data, x5, Math.min);
      return g2(y4) <= x5(v2) ? { data: y4, scale: r } : { data: v2, scale: c6.yScale };
    }
    return { data: y4, scale: r };
  };
  return d2.scaleFactor = (...f3) => f3.length ? (m2 = f3[0], d2) : m2, d2.xScale = (...f3) => f3.length ? (t = f3[0], d2) : t, d2.yScale = (...f3) => f3.length ? (r = f3[0], d2) : r, d2.color = (...f3) => f3.length ? (o = f3[0], d2) : o, d2.size = (...f3) => f3.length ? (n2 = f3[0] ? f3[0].copy().range([40, 4e3]) : null, d2) : n2, d2.canvas = (...f3) => f3.length ? (a4 = f3[0], d2) : a4, d2.data = (...f3) => f3.length ? (l = f3[0], d2) : l, d2.xValueName = (...f3) => f3.length ? (i3 = f3[0], d2) : i3, d2.yValueName = (...f3) => f3.length ? (s2 = f3[0], d2) : s2, d2.altDataWithScale = (...f3) => f3.length ? (c6 = f3[0], d2) : c6, bt.rebindAll(d2, e), d2;
};
function gn(e, t) {
  let r = fn(t, X5(t)), o = te3(t), n2 = R3().settings(t).scale(o), a4 = hn.seriesSvgRepeat().series(He2(t, o)).orient("horizontal"), l = B7().pad([0.1, 0.1]).padUnit("percent"), i3 = we3(t, xt(r)).color(o), s2 = A5(t).excludeType(C7.linear).settingName("crossValues").valueName("crossValue")(r), c6 = A5(t).settingName("mainValues").valueName("mainValue").memoValue(i3.haveSplit() ? null : t.axisMemo[0]).orient("vertical").paddingStrategy(l), m2 = c6(i3.data()), d2 = i3.haveSplit() ? a4 : N5(a4, t).orient("vertical"), u = U5(s2, m2).axisSplitter(i3).plotArea(d2);
  u.yNice && u.yNice();
  let p2 = D7().chart(u).settings(t).xScale(s2.scale), f3 = G3().settings(t).xScale(s2.scale).yScale(m2.scale).color(o).data(r);
  if (i3.haveSplit()) {
    let g2 = c6(i3.altData());
    u.altAxis(g2), f3.data(i3.data()).altDataWithScale({ yScale: g2.scale, data: i3.altData() });
  }
  let h2 = i3.data();
  e.datum(h2).call(p2), e.call(f3), e.call(n2);
}
gn.plugin = { name: "Y Line", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var yn = gn;
var Aa = [circle_default, cross_default, diamond_default, square_default, star_default, triangle_default, wye_default];
function vt(e) {
  return e.length > 1 ? ordinal().domain(e).range(Aa) : null;
}
var Ta = 8;
var La = 1;
function xn(e, t, r, o, n2, a4, l = 1) {
  let i3 = (0, import_d3fc6.seriesCanvasPoint)().crossValue((s2) => s2.x).mainValue((s2) => s2.y);
  return r && i3.size((s2) => Math.round(l * r(s2.size))), a4 && i3.type(a4(t)), i3.decorate((s2, c6) => {
    let m2 = o(c6.colorValue), d2 = e.colorStyles && e.colorStyles.opacity;
    if (n2) {
      let { type: u } = e.mainValues.find((f3) => f3.name === n2), p2 = le3(u, c6.row[n2]);
      if (p2 !== null) {
        s2.fillStyle = e.textStyles.color, s2.font = e.textStyles.font;
        let f3 = 0;
        r && (f3 = Math.sqrt(l * r(c6.size) / Math.PI) * La);
        let h2 = f3 + Ta;
        s2.fillText(p2, h2, 4);
      }
    }
    s2.strokeStyle = re5(m2), s2.fillStyle = Ae3(m2, d2);
  }), i3;
}
function wt(e) {
  let t = e.data && e.data.length > 0 ? e.data[0] : {}, r = [];
  return Object.keys(t).forEach((o) => {
    if (o !== "__ROW_PATH__") {
      let n2 = ye3(o);
      r.includes(n2) || r.push(n2);
    }
  }), vt(r);
}
function bn(e, t) {
  let r = e.mainValues.length;
  return t.map((o) => {
    let n2 = Object.keys(o).filter((l) => l !== "__ROW_PATH__"), a4 = new Array(n2.length / r);
    for (let l = 0; l < n2.length / r; l++)
      a4[l] = { key: ye3(n2[l * r]), crossValue: o[n2[l * r]], mainValue: o[n2[l * r + 1]], row: o };
    return a4;
  });
}
function wn(e, t) {
  let r = xt(bn(t, Ie2(t))), o = Or(t), n2 = wt(t), a4 = null;
  o.domain().length >= 2 && (a4 = Xr().settings(t).scale(n2).color(o));
  let l = vn.seriesSvgRepeat().series(He2(t, o)).orient("horizontal"), i3 = B7().pad([0.1, 0.1]).padUnit("percent"), s2 = A5(t).settingName("mainValues").settingValue(t.mainValues[0].name).valueName("crossValue").memoValue(t.axisMemo[0]).paddingStrategy(i3), m2 = A5(t).settingName("mainValues").settingValue(t.mainValues[1].name).valueName("mainValue").memoValue(t.axisMemo[1]).orient("vertical").paddingStrategy(i3)(r), d2 = s2(r), u = N5(l, t).orient("vertical"), p2 = U5(d2, m2).xLabel(t.mainValues[0].name).yLabel(t.mainValues[1].name).plotArea(u);
  p2.xNice && p2.xNice(), p2.yNice && p2.yNice();
  let f3 = D7().chart(p2).settings(t).xScale(d2.scale).yScale(m2.scale), h2 = G3().settings(t).xScale(d2.scale).yScale(m2.scale).color(o).data(r);
  e.datum(r).call(f3), e.call(h2), a4 && e.call(a4);
}
wn.plugin = { name: "X/Y Line", category: "X/Y Chart", max_cells: 5e4, max_columns: 50, render_warning: true, initial: { type: "number", count: 2, names: ["X Axis", "Y Axis", "Tooltip"] }, selectMode: "toggle" };
var _n = wn;
function Vn(e, t) {
  let r = Sn.seriesSvgArea();
  return r = r.decorate((o) => {
    o.style("fill", (n2) => t(n2[0].key)).style("opacity", 0.5);
  }), r.crossValue((o) => o.crossValue).mainValue((o) => o.mainValue).baseValue((o) => o.baseValue);
}
function Cn(e, t) {
  let r = K4(e);
  return t.map((o, n2) => {
    let a4 = {};
    return Object.keys(o).filter((l) => l !== "__ROW_PATH__").map((l) => {
      let i3 = l.split("|"), s2 = i3[i3.length - 1], c6 = a4[s2] || 0, m2 = c6 + o[l];
      return a4[s2] = m2, { key: l, crossValue: r(o, n2), mainValue: m2, baseValue: c6, row: o };
    });
  });
}
function An(e, t) {
  let r = Cn(t, X5(t)), o = te3(t), n2 = R3().settings(t).scale(o), a4 = Qe.seriesSvgRepeat().series(Vn(t, o).orient("vertical")), l = Qe.seriesSvgRepeat().series(He2(t, o)).orient("vertical"), i3 = Qe.seriesSvgMulti().series([a4, l]), s2 = A5(t).excludeType(C7.linear).settingName("crossValues").valueName("crossValue")(r), c6 = A5(t).settingName("mainValues").valueName("mainValue").memoValue(t.axisMemo[1]).excludeType(C7.ordinal).orient("vertical").include([0]).paddingStrategy(B7()), m2 = we3(t, r).color(o), d2 = c6(m2.data()), u = m2.haveSplit() ? i3 : N5(i3, t).orient("vertical"), p2 = U5(s2, d2).axisSplitter(m2).plotArea(u);
  p2.yNice && p2.yNice();
  let f3 = D7().chart(p2).settings(t).xScale(s2.scale), h2 = G3().settings(t).xScale(s2.scale).yScale(d2.scale).color(o).data(r);
  if (m2.haveSplit()) {
    let g2 = c6(m2.altData());
    p2.altAxis(g2), h2.data(m2.data()).altDataWithScale({ yScale: g2.scale, data: m2.altData() });
  }
  e.datum(m2.data()).call(f3), e.call(h2), e.call(n2);
}
An.plugin = { name: "Y Area", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var kn = An;
function Ln(e, t, r, o) {
  let n2 = Tn.seriesSvgPoint().size(100), a4 = e.colorStyles && e.colorStyles.opacity;
  return o && n2.type(o(t)), n2.decorate((l) => {
    l.style("stroke", (i3) => re5(r(i3.colorValue || t))).style("fill", (i3) => Ae3(r(i3.colorValue || t), a4));
  }), n2.crossValue((l) => l.crossValue).mainValue((l) => l.mainValue);
}
function zn(e) {
  let t = e.data && e.data.length > 0 ? e.data[0] : {}, r = Object.keys(t).filter((o) => o !== "__ROW_PATH__");
  return vt(r);
}
function Mn(e, t) {
  let r = Nr(t, X5(t)), o = zn(t), n2 = te3(t), a4 = Je().settings(t).scale(o).color(n2), l = En.seriesSvgMulti().mapping((g2, y4) => g2[y4]).series(r.map((g2) => Ln(t, g2.key, n2, o))), i3 = B7().pad([0.05, 0.05]).padUnit("percent"), s2 = A5(t).excludeType(C7.linear).settingName("crossValues").valueName("crossValue")(r), c6 = A5(t).settingName("mainValues").valueName("mainValue").memoValue(t.axisMemo[1]).orient("vertical").paddingStrategy(i3), m2 = we3(t, r).color(n2), d2 = c6(m2.data()), u = m2.haveSplit() ? l : N5(l, t).orient("vertical"), p2 = U5(s2, d2).axisSplitter(m2).plotArea(u);
  p2.yNice && p2.yNice();
  let f3 = D7().chart(p2).settings(t).xScale(s2.scale), h2 = G3().settings(t).xScale(s2.scale).yScale(d2.scale).color(n2).data(r);
  if (m2.haveSplit()) {
    let g2 = c6(m2.altData());
    p2.altAxis(g2), h2.data(m2.data()).altDataWithScale({ yScale: g2.scale, data: m2.altData() });
  }
  e.datum(m2.data()).call(f3), e.call(h2), a4 && e.call(a4);
}
Mn.plugin = { name: "Y Scatter", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var On = Mn;
function Nn(e, t) {
  return Te3(e, t, { excludeEmpty: true }).map((r) => za(e, r));
}
function za(e, t) {
  let r = K4(e), o = t.map((n2, a4) => ({ crossValue: r(n2, a4), mainValues: e.mainValues.map((l) => n2[l.name]), x: n2[e.mainValues[0].name], y: n2[e.mainValues[1].name], colorValue: e.realValues[2] ? n2[e.realValues[2]] : void 0, size: e.realValues[3] ? n2[e.realValues[3]] : void 0, key: t.key, row: n2 }));
  return o.key = t.key, o;
}
function Dn(e, t, r, o) {
  return linear2().domain(Fn(t, r, o));
}
function _e4(e, t, r, o) {
  let n2 = Fn(t, r, o), a4 = e.colorStyles.gradient.full;
  if (n2[0] >= 0)
    a4 = e.colorStyles.gradient.positive;
  else if (n2[1] <= 0)
    a4 = e.colorStyles.gradient.negative;
  else {
    let i3 = Math.max(-n2[0], n2[1]);
    n2 = [-i3, i3];
  }
  let l = Ea(a4);
  return sequential(l).domain(n2);
}
var Fn = (e, t, r) => r || It().valueName(t).pad([0, 0])(e);
var Ea = (e) => {
  let t = e.slice(1).map((r, o) => value_default(e[o][1], r[1]));
  return (r) => {
    let o = e.findIndex((i3, s2) => s2 < e.length - 1 && r <= e[s2 + 1][0] && r > i3[0]);
    if (o === -1)
      return r <= e[0][0] ? e[0][1] : e[e.length - 1][1];
    let n2 = t[o], [a4] = e[o], [l] = e[o + 1];
    return n2((r - a4) / (l - a4));
  };
};
function Ve2() {
  let e = null;
  function t(r) {
    let o = O4(r, "div.legend-container", () => r.append("div").attr("class", "legend-container legend-color").style("z-index", "2")), { width: n2, height: a4 } = o.node().getBoundingClientRect(), l = band().domain([0, 1]).range([0, n2]), i3 = e.copy().nice().domain(), s2 = Se3.extentLinear().pad([0.1, 0.1]).padUnit("percent")(i3), [c6, m2] = s2, d2 = range(c6, m2, (m2 - c6) / a4), u = linear2().domain(s2).range([a4, 0]), p2 = Se3.autoBandwidth(Se3.seriesSvgBar()).xScale(l).yScale(u).crossValue(0).baseValue((b4, w3) => d2[Math.max(0, w3 - 1)]).mainValue((b4) => b4).decorate((b4) => {
      b4.selectAll("path").style("fill", (w3) => e(w3));
    }), f3 = i3[0] < 0 && i3[1] > 0 ? 0 : Math.round((i3[1] + i3[0]) / 2), h2 = [...i3, f3], g2 = Se3.axisRight(u).tickValues(h2).tickSizeOuter(0).tickFormat((b4) => st2(b4)), y4 = O4(o, "svg", () => o.append("svg")).style("width", n2).style("height", a4), x5 = O4(y4, "g", () => y4.append("g")).datum(d2).call(p2), v2 = Math.abs(x5.node().getBBox().x);
    O4(y4, "#legend-axis", () => y4.append("g").attr("id", "legend-axis")).attr("transform", `translate(${v2})`).datum(d2).call(g2).select(".domain").attr("visibility", "hidden");
  }
  return t.scale = (...r) => r.length ? (e = r[0], t) : e, t;
}
function Ma([e, t], [r, o]) {
  let n2 = (o - t) / (r - e), a4 = o - n2 * r;
  return function(l) {
    let i3 = l.node(), s2 = Math.min(i3.clientWidth, i3.clientHeight);
    return Math.min(o, Math.max(t, n2 * s2 + a4));
  };
}
function Rn(e, t) {
  let r = Nn(t, Ie2(t)), o = wt(t), n2 = null, a4 = null, l = 2, i3 = t.realValues[l], s2 = i3 != null, c6 = t.mainValues.find((w3) => w3.name === i3)?.type === "string", m2 = t.splitValues.length > 0;
  s2 ? c6 ? m2 ? (n2 = Be2(t, r), a4 = Je().settings(t).scale(o)) : (n2 = Mr(t, l), a4 = R3().settings(t).scale(n2)) : (n2 = _e4(t, r, "colorValue"), a4 = Ve2().scale(n2)) : (n2 = Z5().settings(t).domain([""])(), a4 = Je().settings(t).scale(o));
  let d2 = t.realValues[3] ? Dn(t, r, "size").range([10, 1e4]) : null, u = t.realValues[4], p2 = Ma([600, 0.1], [1600, 1])(e), f3 = Pn.seriesCanvasMulti().mapping((w3, S5) => w3[S5]).series(r.map((w3) => xn(t, w3.key, d2, n2, u, o, p2))), h2 = () => A5(t).settingName("mainValues").paddingStrategy(B7()).pad([0.1, 0.1]), g2 = h2().settingValue(t.mainValues[0].name).memoValue(t.axisMemo[0]).valueName("x")(r), y4 = h2().orient("vertical").settingValue(t.mainValues[1].name).memoValue(t.axisMemo[1]).valueName("y")(r), x5 = Pe3(g2, y4).xLabel(t.mainValues[0].name).yLabel(t.mainValues[1].name).plotArea(N5(f3, t).canvas(true));
  x5.xNice && x5.xNice(), x5.yNice && x5.yNice();
  let v2 = D7().chart(x5).settings(t).xScale(g2.scale).yScale(y4.scale).canvas(true), b4 = G3().scaleFactor(p2).settings(t).canvas(true).xScale(g2.scale).xValueName("x").yValueName("y").yScale(y4.scale).color(!s2 && n2).size(d2).data(r);
  e.datum(r).call(v2), e.call(b4), a4 && e.call(a4);
}
Rn.plugin = { name: "X/Y Scatter", category: "X/Y Chart", max_cells: 5e4, max_columns: 50, render_warning: true, initial: { type: "number", count: 2, names: ["X Axis", "Y Axis", "Color", "Size", "Label", "Tooltip"] }, selectMode: "toggle" };
var Bn = Rn;
function In(e, t) {
  let r = _t2.seriesCanvasHeatmap();
  return r.decorate((o, n2) => {
    o.fillStyle = t(n2.colorValue);
  }), _t2.autoBandwidth(r).xValue((o) => o.crossValue).yValue((o) => o.mainValue).colorValue((o) => o.colorValue).colorInterpolate(t.interpolator()).widthFraction(1);
}
function $n(e, t) {
  let r = K4(e), o = Ne2(e).excludeType(C7.linear).settingName("splitValues")(), n2 = [];
  return t.forEach((a4, l) => {
    let i3 = r(a4, l);
    Object.keys(a4).filter((s2) => s2 !== "__ROW_PATH__").forEach((s2) => {
      let c6 = Oa(s2);
      n2.push({ crossValue: i3, mainValue: o === C7.time ? new Date(c6) : c6, colorValue: a4[s2], row: a4 });
    });
  }), n2;
}
function Oa(e) {
  let t = e.split("|");
  return t.pop(), t.join("|");
}
function Hn(e, t) {
  let r = $n(t, X5(t)), o = _e4(t, r, "colorValue"), n2 = In(t, o), a4 = Ve2().scale(o), l = A5(t).excludeType(C7.linear).settingName("crossValues").valueName("crossValue")(r), i3 = A5(t).excludeType(C7.linear).settingName("splitValues").valueName("mainValue").modifyDomain((d2) => !isNaN(d2[0]) ? d2.reverse() : d2).orient("vertical")(r), s2 = Pe3(l, i3).plotArea(N5(n2, t).canvas(true));
  s2.xPaddingInner && (s2.xPaddingInner(0), s2.xPaddingOuter(0), n2.xAlign("right")), s2.yPaddingInner && (s2.yPaddingInner(0), s2.yPaddingOuter(0), n2.yAlign("top"));
  let c6 = D7().chart(s2).settings(t).xScale(l.scale).yScale(i3.scale).canvas(true), m2 = G3().settings(t).canvas(true).xScale(l.scale).yScale(i3.scale).color(o).data(r);
  e.datum(r).call(c6), e.call(a4), e.call(m2);
}
Hn.plugin = { name: "Heatmap", category: "Hierarchial Chart", max_cells: 5e4, max_columns: 500, render_warning: true, initial: { names: ["Color"] } };
var Gn = Hn;
function jn(e, t) {
  return Te3(e, t, { excludeEmpty: true }).map((r) => Na(e, r));
}
function Na(e, t) {
  let r = K4(e), o = (a4) => t[a4 < t.length - 1 ? a4 + 1 : a4][e.realValues[0]], n2 = t.map((a4, l) => {
    let i3 = e.realValues[0] ? a4[e.realValues[0]] : void 0, s2 = e.realValues[1] ? a4[e.realValues[1]] : o(l);
    return { crossValue: r(a4, l), mainValues: e.mainValues.map((c6) => a4[c6.name]), openValue: i3, closeValue: s2, highValue: e.realValues[2] ? a4[e.realValues[2]] : Math.max(i3, s2), lowValue: e.realValues[3] ? a4[e.realValues[3]] : Math.min(i3, s2), key: t.key, row: a4 };
  });
  return n2.key = t.key, n2;
}
var Da = (e) => e.closeValue >= e.openValue;
function Wn(e, t, r) {
  let o = r.domain(), n2 = Z5().domain(o).settings(e).defaultColors([e.colorStyles["series-2"]]).mapFunction(ke3(0.5))(), a4 = Z5().settings(e).domain(o)(), l = t().crossValue((c6) => c6.crossValue).openValue((c6) => c6.openValue).highValue((c6) => c6.highValue).lowValue((c6) => c6.lowValue).closeValue((c6) => c6.closeValue).decorate((c6, m2) => {
    let d2 = Da(m2) ? r(m2.key) : n2(m2.key);
    c6.fillStyle = d2, c6.strokeStyle = d2;
  }), i3 = We2.seriesCanvasLine().mainValue((c6) => c6.bollinger.average).crossValue((c6) => c6.crossValue).decorate((c6, m2) => {
    c6.strokeStyle = a4(m2[0].key);
  }), s2 = We2.seriesCanvasArea().mainValue((c6) => c6.bollinger.upper).baseValue((c6) => c6.bollinger.lower).crossValue((c6) => c6.crossValue).decorate((c6, m2) => {
    c6.fillStyle = ke3(0.25)(a4(m2[0].key));
  });
  return We2.seriesCanvasMulti().series([s2, l, i3]);
}
function Fa(e) {
  return function(t, r) {
    let o = jn(r, Ie2(r)), n2 = St.indicatorBollingerBands().value((y4) => y4.openValue), a4 = o.map((y4) => {
      let x5 = n2(y4);
      return y4.map((v2, b4) => Object.assign({ bollinger: x5[b4] }, v2));
    }), l = o.map((y4) => y4.key).concat(r.hideKeys ? r.hideKeys : []).sort(), i3 = Z5().domain(l).settings(r).mapFunction(ke3(1))(), s2 = R3().settings(r).scale(l.length > 1 ? i3 : null), c6 = Wn(r, e, i3), m2 = St.seriesCanvasMulti().mapping((y4, x5) => y4[x5]).series(a4.map(() => c6)), d2 = B7().pad([0.1, 0.1]).padUnit("percent"), u = A5(r).settingName("crossValues").valueName("crossValue")(a4), p2 = A5(r).settingName("mainValues").valueNames(["lowValue", "highValue"]).memoValue(r.axisMemo[1]).orient("vertical").paddingStrategy(d2)(a4), f3 = Pe3(u, p2).plotArea(N5(m2, r).orient("vertical").canvas(true));
    f3.yNice && f3.yNice();
    let h2 = D7().chart(f3).settings(r).xScale(u.scale).onChange((y4) => {
      let x5 = a4.map((v2) => v2.filter((b4) => b4.crossValue >= y4.xDomain[0] && b4.crossValue <= y4.xDomain[1]));
      f3.yDomain(p2.domainFunction(x5));
    }).canvas(true), g2 = G3().settings(r).xScale(u.scale).yScale(p2.scale).yValueName("closeValue").color(i3).data(a4).canvas(true);
    t.datum(a4).call(h2), t.call(g2), t.call(s2);
  };
}
var Vt = Fa;
var Yn = Vt(import_d3fc7.seriesCanvasOhlc);
Yn.plugin = { name: "OHLC", category: "Y Chart", max_cells: 3500, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Open", "Close", "High", "Low", "Tooltip"] }, selectMode: "toggle" };
var Un = Yn;
var Kn = Vt(import_d3fc8.seriesCanvasCandlestick);
Kn.plugin = { name: "Candlestick", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Open", "Close", "High", "Low", "Tooltip"] }, selectMode: "toggle" };
var Xn = Kn;
function qn(e, t) {
  if (e.realValues.length > 1 && e.realValues[1] !== null) {
    let r = e.realValues[1];
    if (e.mainValues.find((o) => o.name === r)?.type === "string") {
      let o = t.map((n2) => n2.data).filter((n2) => n2.height > 0).map((n2) => Zn(n2)).reduce((n2, a4) => n2.concat(a4));
      return Be2(e, o);
    } else
      return _e4(e, null, null, mr(t.map((o) => o.extents)));
  }
}
function Zn(e, t = []) {
  return e.children && e.children.length > 0 ? e.children.forEach((r) => t.concat(Zn(r, t))) : e.data.color && t.push(e.data.color), t;
}
function At(e) {
  let t = {}, r = e.realValues.map((n2) => n2 === null ? null : e.mainValues.find((a4) => a4.name === n2));
  return e.data.forEach((n2, a4) => {
    let l = n2.__ROW_PATH__;
    Ia(n2).forEach((s2) => {
      let c6;
      t[s2] || (t[s2] = []), c6 = t[s2], l.forEach((m2, d2) => {
        let u = c6.find((p2) => p2.name === m2);
        if (u || (u = { name: m2, children: [] }, c6.push(u)), e.realValues.length > 1 && e.realValues[1] !== null) {
          let p2 = d2 === l.length - 1, f3 = Ye2(p2 ? n2 : e.agg_paths[a4][d2 + 1] || n2, e.mainValues[1], s2);
          f3 !== void 0 && (u.color = f3);
        }
        if (e.realValues.length > 2 && e.realValues[2] !== null) {
          u.tooltip = [];
          for (let p2 = 2; p2 < e.realValues.length; ++p2)
            u.tooltip.push(Ye2(n2, r[p2], s2));
        }
        if (d2 === l.length - 1) {
          if (u.name = l.slice(-1)[0], e.crossValues.length === 0)
            u.size = Ye2(n2, e.mainValues[0], "");
          else if (l.length === e.crossValues.length) {
            let p2 = Ye2(n2, e.mainValues[0], s2);
            u.size = p2 > 0 ? p2 : 0;
          }
        }
        c6 = u.children;
      });
    });
  }), Object.entries(t).map((n2) => {
    let a4 = { name: "root", children: n2[1] }, l = hierarchy(a4).sum((s2) => s2.size), i3 = partition_default().size([2 * Math.PI, l.height + 1])(l);
    return i3.each((s2) => {
      s2.current = s2, s2.mainValues = e.realValues.length === 1 || e.realValues[1] === null && e.realValues[2] === null ? s2.value : [s2.value, s2.data.color].concat(s2.data.tooltip || []).filter((c6) => c6 !== void 0), s2.crossValue = s2.ancestors().slice(0, -1).reverse().map((c6) => c6.data.name), s2.key = n2[0], s2.label = le3(e.crossValues[s2.depth - 1 < 0 ? 0 : s2.depth - 1]?.type || e.mainValues[0].type, s2.data.name);
    }), { split: n2[0], data: i3, extents: Ba(e, n2) };
  });
}
var Ye2 = (e, t, r) => r.length ? e[`${r}|${t.name}`] : e[t.name];
function Ba(e, [t, r]) {
  if (e.realValues.length > 1 && e.realValues[1] !== null) {
    let o = Math.min(...e.data.map((a4) => Ye2(a4, e.mainValues[1], t))), n2 = Math.max(...r.map((a4) => a4.color));
    return [o, n2];
  }
}
function Ia(e) {
  let t = [];
  return Object.keys(e).forEach((r) => {
    if (r !== "__ROW_PATH__") {
      let o = r.split("|").slice(0, -1).join("|");
      t.includes(o) || t.push(o);
    }
  }), t;
}
var kt = (e) => arc_default().startAngle((t) => t.x0).endAngle((t) => t.x1).padAngle((t) => Math.min((t.x1 - t.x0) / 2, 5e-3)).padRadius(e).innerRadius((t) => Math.max(1, (t.y0 - 1) * e)).outerRadius((t) => Math.max((t.y0 - 1) * e, (t.y1 - 1) * e - 1));
var se4 = (e) => e.y0 >= 1 && e.x1 > e.x0;
var et2 = (e) => e.y1 <= 3 && e.y0 >= 1 && (e.y1 - e.y0) * (e.x1 - e.x0) > 0.06;
function Tt(e, t) {
  let r = (e.x0 + e.x1) / 2 * 180 / Math.PI, o = (e.y0 - 1 + (e.y1 - 1)) / 2 * t;
  return `rotate(${r - 90}) translate(${o},0) rotate(${r < 180 ? 0 : 180})`;
}
function Jn(e, t) {
  let r = this.getBBox().width;
  if (r > t) {
    let o = e.label, n2 = select_default2(this);
    for (; r > t; )
      o = o.substring(0, o.length - 1), n2.text(() => o), r = this.getBBox().width;
    n2.text(() => `${o.substring(0, o.length - 3).replace(/\s+$/, "")}...`);
  }
}
var Qn = (e, t, r, o, n2, a4, l, i3, s2) => (c6, m2) => {
  s2.sunburstLevel[i3] = c6.data.name, c6.parent ? (r.datum(c6.parent), r.style("cursor", "pointer"), o.html(`&#8682; ${c6.label}`)) : (r.datum(e), r.style("cursor", "default"), o.html("")), e.each((u) => u.target = { x0: Math.max(0, Math.min(1, (u.x0 - c6.x0) / (c6.x1 - c6.x0))) * 2 * Math.PI, x1: Math.max(0, Math.min(1, (u.x1 - c6.x0) / (c6.x1 - c6.x0))) * 2 * Math.PI, y0: Math.max(0, u.y0 - c6.depth), y1: Math.max(0, u.y1 - c6.depth) });
  let d2 = t.transition().duration(m2 ? 0 : 750);
  n2.transition(d2).tween("data", (u) => {
    let p2 = value_default(u.current, u.target);
    return (f3) => u.current = p2(f3);
  }).filter(function(u) {
    return +this.getAttribute("fill-opacity") || se4(u.target);
  }).attr("fill-opacity", (u) => se4(u.target) ? 1 : 0).attr("user-select", (u) => se4(u.target) ? "initial" : "none").style("pointer-events", (u) => se4(u.target) ? "initial" : "none").attrTween("d", (u) => () => kt(l)(u.current)), a4.filter(function(u) {
    return +this.getAttribute("fill-opacity") || et2(u.target);
  }).transition(d2).attr("fill-opacity", (u) => +et2(u.target)).attrTween("transform", (u) => () => Tt(u.current, l));
};
function eo() {
  let e = null, t = null, r = null, o = null, n2 = null, a4 = (l) => {
    let i3 = l.selectAll("g.segment").data(r.descendants().slice(1)), s2 = i3.enter().append("g").attr("class", "segment");
    s2.append("path"), s2.append("text").attr("class", "segment").attr("dy", "0.35em");
    let c6 = s2.merge(i3), m2 = c6.select("path").attr("fill-opacity", (h2) => se4(h2.current) ? 1 : 0).attr("user-select", (h2) => se4(h2.current) ? "initial" : "none").style("pointer-events", (h2) => se4(h2.current) ? "initial" : "none").attr("d", (h2) => kt(n2)(h2.current));
    o && m2.style("fill", (h2) => o(h2.data.color));
    let d2 = c6.select("text").attr("fill-opacity", (h2) => +et2(h2.current)).attr("transform", (h2) => Tt(h2.current, n2)).text((h2) => h2.label).each(function(h2) {
      Jn.call(this, h2, n2);
    }), u = l.select("text.parent"), p2 = l.select("circle").attr("r", n2).datum(r), f3 = Qn(r, l, p2, u, m2, d2, n2, t, e);
    if (e.sunburstLevel) {
      let h2 = r.descendants().find((g2) => g2.data.name === e.sunburstLevel[t]);
      h2 && f3(h2, true);
    } else
      e.sunburstLevel = {};
    p2.on("click", (h2) => f3(h2, false)), m2.filter((h2) => h2.children).style("cursor", "pointer").on("click", (h2) => f3(h2, false));
  };
  return a4.settings = (...l) => l.length ? (e = l[0], a4) : e, a4.split = (...l) => l.length ? (t = l[0], a4) : t, a4.data = (...l) => l.length ? (r = l[0], a4) : r, a4.color = (...l) => l.length ? (o = l[0], a4) : o, a4.radius = (...l) => l.length ? (n2 = l[0], a4) : n2, a4;
}
function Lt() {
  let e = "element-prefix-unset", t = null, r = null, o = null, n2 = null, a4 = null, l = null, i3 = (s2) => {
    let c6 = O4(s2, "div.inner-container", () => s2.append("div").attr("class", "inner-container")), m2 = c6.node().getBoundingClientRect(), d2 = m2.height, u = m2.width - (a4 ? 70 : 0), p2 = 300, f3 = s2.datum(), h2 = Math.max(1, Math.min(f3.length, Math.floor(u / p2))), g2 = Math.ceil(f3.length / h2);
    l = { width: u / Math.max(h2, 1), height: Math.min(d2, Math.max(d2 / g2, u / Math.max(h2, 1))) }, d2 / g2 > l.height * 0.75 && (l.height = d2 / g2), f3.length > 1 ? (c6.style("grid-template-columns", `repeat(${h2}, ${100 / h2}%)`), c6.style("grid-template-rows", `repeat(${g2}, ${l.height}px)`)) : (c6.style("grid-template-columns", "repeat(1, 100%)"), c6.style("grid-template-rows", "repeat(1, 100%)")), o = c6.selectAll(`div.${e}-container`).data(f3, (y4) => y4.split), o.exit().remove(), r = o.enter().append("div").attr("class", `${e}-container`), n2 = r.append("div").attr("class", "title-container").style("text-align", "center").attr("display", "inline-block").append("text").attr("class", "title").style("text-align", "left"), t = r.append("svg").append("g").attr("class", e);
  };
  return i3.elementsPrefix = (...s2) => s2.length ? (e = s2[0], i3) : e, i3.chartContainer = () => t, i3.chartEnter = () => r, i3.chartDiv = () => o, i3.chartTitle = () => n2, i3.containerSize = () => l, i3;
}
function ro(e, t) {
  let r = At(t), o = qn(t, r), n2 = Lt().elementsPrefix("sunburst");
  if (e.datum(r).call(n2), o) {
    let m2 = t.realValues[1];
    if (t.mainValues.find((d2) => d2.name === m2)?.type === "string") {
      let d2 = R3().settings(t).scale(o);
      e.call(d2);
    } else {
      let d2 = Ve2().scale(o);
      e.call(d2);
    }
  }
  let a4 = n2.chartContainer(), l = n2.chartEnter(), i3 = n2.chartDiv(), s2 = n2.chartTitle(), c6 = n2.containerSize();
  s2.each((m2, d2, u) => select_default2(u[d2]).text(m2.split)), a4.append("circle").attr("fill", "none").style("pointer-events", "all"), a4.append("text").attr("class", "parent"), l.merge(i3).select("svg").select("g.sunburst").attr("transform", `translate(${c6.width / 2}, ${c6.height / 2})`).each(function({ split: m2, data: d2 }) {
    let u = select_default2(this), p2 = this.parentNode, { width: f3, height: h2 } = p2.getBoundingClientRect(), g2 = (Math.min(f3, h2) - 24) / Math.max(2, t.crossValues.length * 2);
    eo().settings(t).split(m2).data(d2).color(o).radius(g2)(u), ge3().settings(t)(u.selectAll("g.segment"));
  });
}
ro.plugin = { name: "Sunburst", category: "Hierarchial Chart", max_cells: 7500, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Size", "Color", "Tooltip"] } };
var no = ro;
function oo(e, t) {
  if (e.realValues.length < 1 || e.realValues[1] === null || e.realValues[1] === void 0)
    return;
  let r = e.realValues[1], o = t.filter((n2) => n2.height > 0).map((n2) => ao(n2)).reduce((n2, a4) => n2.concat(a4));
  if (e.mainValues.find((n2) => n2.name === r)?.type === "string")
    return Be2(e, o);
  {
    let n2 = Math.min(...o), a4 = Math.max(...o);
    return _e4(e, null, null, [n2, a4]);
  }
}
function ao(e, t = []) {
  return e.children && e.children.length > 0 ? e.children.forEach((r) => t.concat(ao(r, t))) : e.data.color && t.push(e.data.color), t;
}
var lo = 7;
var zt = (e) => !!(e.target && e.target.textAttributes);
var Et = (e, t, r) => {
  e.selectAll("text").each(function(n2, a4) {
    let l = Ua(n2, t, r);
    this.style = l;
  });
  let o = rt2(e);
  ja(o), rr(o);
};
var io = (e) => {
  e.each((t, r, o) => {
    select_default2(o[r]).selectAll("text").attr("dx", t.target.textAttributes.dx).attr("dy", t.target.textAttributes.dy).attr("style", t.target.textAttributes.style);
  });
};
var rr = (e) => {
  let o = (a4) => a4.getBoundingClientRect(), n2 = [];
  e.selectAll("text").filter((a4, l, i3) => select_default2(i3[l]).attr("style") === Ee3.high).each((a4, l, i3) => n2.push(i3[l])), e.selectAll("text").filter((a4, l, i3) => select_default2(i3[l]).attr("style") === Ee3.low).each((a4, l, i3) => {
    let s2 = i3[l];
    n2.filter((c6) => Ut("x", o(c6), o(s2)) && Ut("y", o(c6), o(s2), -2)).forEach(() => select_default2(s2).attr("dy", Number(select_default2(s2).attr("dy")) + 14));
  });
};
var so = (e) => select_default2(e).style("opacity", tt2[select_default2(e).attr("class")]);
var co = (e) => select_default2(e).style("opacity", null);
var tt2 = { top: 1, mid: 0.7, lower: 0 };
var rt2 = (e) => e.filter((t, r, o) => select_default2(o[r]).selectAll("text").attr("style") !== Ee3.zero);
var Mt = (e) => e.selectAll("text").each((t, r, o) => Wa(o[r]));
var ja = (e) => e.selectAll("text").each((t, r, o) => uo(o[r]));
var uo = (e) => {
  let t = select_default2(e), r = e.getBoundingClientRect();
  t.attr("dx", 0 - r.width / 2).attr("dy", 0 + r.height / 4);
};
var Wa = (e) => {
  let r = e.parentNode.childNodes[0], o = e.getBBox(), n2 = r.getBBox();
  Ya(e, n2, o) || select_default2(e).attr("style", select_default2(e).attr("style"));
};
var Ya = (e, t, r) => {
  let o = Math.min(t.height / r.height, t.width / r.width);
  if (o < 1) {
    let n2 = parseInt(select_default2(e).style("font-size")), a4 = Math.floor(n2 * o);
    return n2 > lo && a4 > lo ? (select_default2(e).style("font-size", `${a4}px`), uo(e)) : (select_default2(e).style("font-size", null), select_default2(e).style("opacity", "0")), true;
  }
  return false;
};
var Ua = (e, t, r) => {
  if (!r.filter((o) => o !== "").every((o) => e.crossValue.includes(o)))
    return Ee3.zero;
  switch (e.depth) {
    case t + 1:
      return Ee3.high;
    case t + 2:
      return Ee3.low;
    default:
      return Ee3.zero;
  }
};
var Ee3 = { high: "font-size:14px;z-index:5;pointer-events: none;", low: "font-size:8px;opacity:0.7;z-index:4;", zero: "font-size:0px;opacity:0;z-index:4;" };
var Nt = (e, t) => {
  let r = treemap_default().size([e, t]).paddingInner((o) => 1 + 2 * (o.height - 1));
  return r.tile(binary_default), r;
};
var Xa = (e, t) => t.every((r) => e.crossValue.includes(r));
function or(e, t, r, o, n2, a4) {
  qa(e, t, r, o, n2), e.mapLevel[o].levelRoot = true, Za(e, a4.node().getBoundingClientRect().width, a4.node().getBoundingClientRect().height, o), po(r, o);
}
function mo(e, t) {
  e.each((r) => {
    r.mapLevel = [], r.mapLevel[0] = { x0: r.x0, x1: Me2(r) + r.x0, y0: r.y0, y1: Oe2(r) + r.y0, visible: true, opacity: 1 };
  }), t.mapLevel[0].levelRoot = true, po(e, 0);
}
var Dt = (e, t) => {
  e.each((r, o, n2) => {
    let a4 = select_default2(n2[o]).selectAll("text");
    r.mapLevel[t].textAttributes = { dx: a4.attr("dx"), dy: a4.attr("dy"), class: a4.attr("class"), "font-size": a4.style("font-size") };
  });
};
function qa(e, t, r, o, n2) {
  let a4 = { x: e.x0, y: e.y0, width: e.x1 - e.x0, height: e.y1 - e.y0 }, l = { width: n2.x1 - n2.x0, height: n2.y1 - n2.y0 }, i3 = { width: l.width / a4.width, height: l.height / a4.height };
  r.each((s2) => {
    let c6 = (s2.x0 - a4.x) * i3.width, m2 = (s2.y0 - a4.y) * i3.height, d2 = Me2(s2) * i3.width, u = Oe2(s2) * i3.height, p2 = Xa(s2, t) && s2.data.name !== t[o - 1];
    s2.mapLevel[o] = { x0: c6, x1: d2 + c6, y0: m2, y1: u + m2, visible: p2, opacity: p2 ? 1 : 0 };
  }), e.mapLevel[o].levelRoot = true;
}
function Za(e, t, r, o) {
  let l = Nt(t, r)(hierarchy(e.data).sum((s2) => s2.size)).descendants(), i3 = e.descendants();
  l.forEach((s2, c6) => {
    i3[c6].mapLevel[o].x0 = l[c6].x0, i3[c6].mapLevel[o].x1 = l[c6].x1, i3[c6].mapLevel[o].y0 = l[c6].y0, i3[c6].mapLevel[o].y1 = l[c6].y1;
  });
}
function po(e, t) {
  e.selectAll("text").each((r, o, n2) => {
    let a4 = select_default2(n2[o]), l = select_default2(n2[o]).datum(), i3 = a4.attr("class");
    l.mapLevel[t].textLockedAt = { opacity: tt2[i3] };
  });
}
function fo(e, t, r, o, n2, a4, l, i3, s2) {
  if (o.treemapLevel > 0) {
    let c6 = l.crossValue;
    lr(l, e, t, r, o, n2, a4, l, 0, c6, i3, s2, 1, false), o.treemapRoute.slice(1, o.treemapRoute.length).forEach((m2) => {
      let d2 = t.filter((p2) => p2.crossValue === m2).datum(), u = d2.crossValue;
      or(d2, u, t, d2.depth, l, n2), lr(d2, e, t, r, o, n2, a4, l, d2.depth, u, i3, s2, 1, false);
    });
  }
}
function ir(e, t, r, o, n2, a4, l, i3, s2, c6) {
  if (!e.children)
    return;
  n2.treemapLevel < e.depth ? n2.treemapRoute.push(e.crossValue) : n2.treemapRoute.pop(), n2.treemapLevel = e.depth;
  let m2 = e.crossValue;
  (!e.mapLevel[n2.treemapLevel] || !e.mapLevel[n2.treemapLevel].levelRoot) && or(e, m2, r, n2.treemapLevel, i3, a4), lr(e, t, r, o, n2, a4, l, i3, n2.treemapLevel, m2, s2, c6);
}
function lr(e, t, r, o, n2, a4, l, i3, s2, c6, m2, d2, u = 500, p2 = true) {
  let f3 = e.parent, h2 = l.transition("main transition").duration(u).ease(cubicOut);
  r.each((y4) => y4.target = y4.mapLevel[s2]), zt(e) || tl(r, m2), r.transition(h2).tween("data", (y4) => {
    let x5 = value_default(y4.current, y4.target);
    return (v2) => y4.current = x5(v2);
  }).styleTween("opacity", (y4) => () => y4.current.opacity).attrTween("pointer-events", (y4) => () => y4.target.visible ? "all" : "none"), t.transition(h2).filter((y4) => y4.target.visible).styleTween("x", (y4) => () => `${y4.current.x0}px`).styleTween("y", (y4) => () => `${y4.current.y0}px`).styleTween("width", (y4) => () => `${y4.current.x1 - y4.current.x0}px`).styleTween("height", (y4) => () => `${y4.current.y1 - y4.current.y0}px`), o.transition(h2).filter((y4) => y4.target.visible).attrTween("x", (y4) => () => y4.current.x0 + Me2(y4.current) / 2).attrTween("y", (y4) => () => y4.current.y0 + Oe2(y4.current) / 2).end().catch(() => ar(r)).then(() => {
    zt(e) || (rr(g2), Mt(g2), Ja(o, l, u), p2 && Dt(r, s2), ar(r, m2, f3));
  }).catch((y4) => {
    console.error("Exception completing promises after main transition", y4), ar(r, m2, f3);
  }), zt(e) ? io(r) : (o.each((y4, x5, v2) => so(v2[x5])), Et(r, s2, c6));
  let g2 = rt2(r);
  f3 ? m2.hide(false).text(e.label).onClick(() => {
    ir(f3, t, r, o, n2, a4, l, i3, m2, d2);
    let y4 = a4.node().getRootNode().host.parentElement;
    qe(y4, f3, d2);
  })() : m2.hide(true)();
}
async function Ja(e, t, r = 400) {
  let o = t.transition("text fade transition").duration(r).ease(cubicOut);
  await e.transition(o).filter((n2) => n2.target.visible).tween("data", (n2, a4, l) => {
    let i3 = l[a4], s2 = value_default(Qa(n2), el(i3));
    return (c6) => n2.current.opacity = s2(c6);
  }).styleTween("opacity", (n2) => () => n2.current.opacity).end().catch((n2) => console.error("Exception in text fade transition", n2)).then(() => e.each((n2, a4, l) => co(l[a4])));
}
var Qa = (e) => e.target.textLockedAt.opacity;
var el = (e) => tt2[select_default2(e).attr("class")];
var tl = (e, t) => {
  t.deactivate(true), e.each((r, o, n2) => {
    select_default2(n2[o]).selectAll("rect").style("pointer-events", "none");
  });
};
var ar = (e, t) => {
  t && t.deactivate(false), e.each((r, o, n2) => {
    select_default2(n2[o]).selectAll("rect").style("pointer-events", null);
  });
};
var ho = `<button id="goto-parent">Goto parent</button>
`;
function go(e) {
  let t = null, r = null, o = true, n2 = false, a4 = O4(e, ".parent-controls", () => e.append("div").attr("class", "parent-controls").style("display", o ? "none" : "").html(ho)), l = () => {
    a4.style("display", o ? "none" : "").select("#goto-parent").style("pointer-events", n2 ? "none" : null).html(`\u21EA ${r}`).on("click", () => t());
  };
  return l.deactivate = (...i3) => {
    if (!i3.length)
      return n2;
    n2 = i3[0];
    let s2 = a4.select("#goto-parent");
    return n2 ? s2.style("pointer-events", "none") : s2.style("pointer-events", null), l;
  }, l.hide = (...i3) => i3.length ? (o = i3[0], l) : o, l.text = (...i3) => i3.length ? (r = i3[0], l) : r, l.onClick = (...i3) => i3.length ? (t = i3[0], l) : t, l;
}
var Ft = { leaf: "leafnode", branch: "branchnode", root: "rootnode" };
var Me2 = (e) => e.x1 - e.x0;
var Oe2 = (e) => e.y1 - e.y0;
var nl = (e, t) => t.depth === e;
var yo = (e, t) => t.depth === 0 ? Ft.root : nl(e, t) ? Ft.leaf : Ft.branch;
function xo() {
  let e = null, t = null, r = null, o = null, n2 = null, a4 = null, l = (i3) => {
    a4 = go(n2), a4();
    let s2 = r.height;
    e.treemapLevel || (e.treemapLevel = 0), e.treemapRoute || (e.treemapRoute = []), Nt(n2.node().getBoundingClientRect().width, n2.node().getBoundingClientRect().height)(r);
    let m2 = i3.selectAll("g").data(r.descendants()), d2 = m2.enter().append("g");
    d2.append("rect"), d2.append("text");
    let u = d2.merge(m2).sort((g2, y4) => y4.depth - g2.depth), p2 = u.select("rect").attr("class", (g2) => `treerect ${yo(s2, g2)}`).style("x", (g2) => g2.x0).style("y", (g2) => g2.y0).style("width", (g2) => Me2(g2)).style("height", (g2) => Oe2(g2));
    p2.style("fill", (g2) => yo(s2, g2) === Ft.leaf ? g2.data.color ? o(g2.data.color) : t.colorStyles.series : "transparent");
    let f3 = u.filter((g2) => g2.value !== 0).select("text").attr("x", (g2) => g2.x0 + Me2(g2) / 2).attr("y", (g2) => g2.y0 + Oe2(g2) / 2).text((g2) => g2.label), h2 = p2.filter((g2) => g2.crossValue.length === 0).datum();
    mo(u, h2), Et(u, 0, []), Mt(rt2(u)), Dt(u, 0), e.treemapRoute.length === 0 && e.treemapRoute.push(h2.crossValue), p2.filter((g2) => g2.children).on("click", (g2, y4) => ir(y4, p2, u, f3, e, n2, i3, h2, a4, t)), fo(p2, u, f3, e, n2, i3, h2, a4, t);
  };
  return l.settings = (...i3) => i3.length ? (e = i3[0], t = i3[1], l) : e, l.data = (...i3) => i3.length ? (r = i3[0], l) : r, l.color = (...i3) => i3.length ? (o = i3[0], l) : o, l.container = (...i3) => i3.length ? (n2 = i3[0], l) : n2, l;
}
function bo(e, t) {
  t.treemaps || (t.treemaps = {});
  let r = At(t), o = oo(t, r.map((s2) => s2.data));
  o && this._container.classList.add("has-legend");
  let n2 = Lt().elementsPrefix("treemap");
  if (e.datum(r).call(n2), o) {
    let s2 = t.realValues[1];
    if (t.mainValues.find((c6) => c6.name === s2)?.type === "string") {
      let c6 = R3().settings(t).scale(o);
      e.call(c6);
    } else {
      let c6 = Ve2().scale(o);
      e.call(c6);
    }
  }
  let a4 = n2.chartEnter(), l = n2.chartDiv();
  n2.chartTitle().each((s2, c6, m2) => select_default2(m2[c6]).text(s2.split)), a4.merge(l).select("svg").select("g.treemap").each(function({ split: s2, data: c6 }) {
    let m2 = select_default2(this);
    t.treemaps[s2] || (t.treemaps[s2] = {}), xo().settings(t.treemaps[s2], t).data(c6).container(select_default2(select_default2(this.parentNode).node().parentNode)).color(o)(m2), ge3().settings(t).centered(true)(m2.selectAll("g"));
  });
}
bo.plugin = { type: "Treemap", name: "Treemap", category: "Hierarchial Chart", max_cells: 3e3, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Size", "Color", "Tooltip"] } };
var vo = bo;
var ol = [tn, pn, yn, _n, kn, On, Bn, Un, Xn, vo, no, Gn];
var sr = ol;
var _o = (e, t) => {
  if (!t.colorStyles) {
    let r = { scheme: [], gradient: {}, interpolator: {}, grid: {} }, o = il(e);
    r.series = o("--d3fc-local-series");
    for (let a4 = 1; ; a4++) {
      let l = `series-${a4}`, i3 = o(`--d3fc-local-${l}`);
      if (!i3)
        break;
      r[l] = i3, r.scheme.push(i3);
    }
    r.opacity = al(r.series), r.grid.gridLineColor = o`--d3fc-gridline--color`, ["full", "positive", "negative"].forEach((a4) => {
      let l = o(`--d3fc-local-${a4}--gradient`);
      r.gradient[a4] = sl(l, r.opacity);
    }), t.colorStyles = r;
  }
  if (!t.textStyles) {
    let r = window.getComputedStyle(e), o = r.getPropertyValue("color"), n2 = `12px ${r.getPropertyValue("font-family")}`;
    t.textStyles = { color: o, font: n2 };
  }
};
var al = (e) => color(e).opacity;
var ll = (e, t) => {
  let r = color(`#${e}`);
  return r.opacity = t, r + "";
};
var il = (e) => {
  let t = getComputedStyle(e);
  return (r) => t?.getPropertyValue(r);
};
var sl = (e, t) => {
  let r = wo.parse(e)[0].colorStops;
  return r.map((o, n2) => [o.length ? o.length.value / 100 : n2 / (r.length - 1), ll(o.value, t)]).sort((o, n2) => o[0] - n2[0]);
};
var So = ':host .chart{--d3fc-local-full--gradient:var(--d3fc-full--gradient,linear-gradient(#4d342f 0%,#e4521b 22.5%,#feeb65 42.5%,#f0f0f0 50%,#dcedc8 57.5%,#42b3d5 67.5%,#1a237e 100%));--d3fc-local-positive--gradient:var(--d3fc-positive--gradient,linear-gradient(#dcedc8 0%,#42b3d5 35%,#1a237e 100%));--d3fc-local-negative--gradient:var(--d3fc-negative--gradient,linear-gradient(#feeb65 100%,#e4521b 70%,#4d342f 0%));--d3fc-local-series:var(--d3fc-series,rgba(31,119,180,0.5));--d3fc-local-series-1:var(--d3fc-series-1,#0366d6);--d3fc-local-series-2:var(--d3fc-series-2,#ff7f0e);--d3fc-local-series-3:var(--d3fc-series-3,#2ca02c);--d3fc-local-series-4:var(--d3fc-series-4,#d62728);--d3fc-local-series-5:var(--d3fc-series-5,#9467bd);--d3fc-local-series-6:var(--d3fc-series-6,#8c564b);--d3fc-local-series-7:var(--d3fc-series-7,#e377c2);--d3fc-local-series-8:var(--d3fc-series-8,#7f7f7f);--d3fc-local-series-9:var(--d3fc-series-9,#bcbd22);--d3fc-local-series-10:var(--d3fc-series-10,#17becf);}:host .chart .series{fill:var(--d3fc-local-series);}:host .chart .series-1{fill:var(--d3fc-local-series-1);}:host .chart .series-2{fill:var(--d3fc-local-series-2);}:host .chart .series-3{fill:var(--d3fc-local-series-3);}:host .chart .series-4{fill:var(--d3fc-local-series-4);}:host .chart .series-5{fill:var(--d3fc-local-series-5);}:host .chart .series-6{fill:var(--d3fc-local-series-6);}:host .chart .series-7{fill:var(--d3fc-local-series-7);}:host .chart .series-8{fill:var(--d3fc-local-series-8);}:host .chart .series-9{fill:var(--d3fc-local-series-9);}:host .chart .series-10{fill:var(--d3fc-local-series-10);}:host{user-select:none;}:host .chart{position:absolute;box-sizing:border-box;left:0;top:0;width:100%;height:100%;padding:12px;overflow:hidden;}:host .chart.heatmap d3fc-group.cartesian-chart,:host .chart.treemap d3fc-group.cartesian-chart{grid-template-columns:minmax(0em,max-content)auto 1fr auto minmax(0em,max-content);grid-template-rows:minmax(0em,max-content)auto 1fr auto minmax(0em,max-content);}:host .chart .chart-label{display:none;}:host .chart.heatmap{padding-right:120px;}:host .chart.sunburst{padding:0;font-size:14px;}:host .chart.sunburst .inner-container{width:100%;height:100%;display:inline-grid;padding:0;margin:0;overflow-x:hidden;overflow-y:auto;}:host .chart.sunburst .inner-container div{overflow:hidden;}:host .chart.sunburst .inner-container .sunburst-container:not(:only-child) svg{transform:translate(0,-27px);}:host .chart.sunburst .inner-container svg{width:100%;height:100%;}:host .chart.sunburst .inner-container path{fill:var(--d3fc-series,rgba(31,119,180,0.5));}:host .chart.sunburst .inner-container text.segment,:host .chart.sunburst .inner-container text.parent{text-anchor:middle;user-select:none;pointer-events:none;fill:var(--d3fc-treedata--labels,rgb(51,51,51));}:host .chart.sunburst .inner-container div.title-container{margin-top:5px;}:host .chart.has-legend{padding-right:120px;}:host .chart.treemap .treemap-container{position:relative;}:host .chart.treemap .treemap-container:not(:only-child){width:calc(100% - 12px);height:calc(100% - 12px);}:host .chart.treemap .inner-container{width:100%;height:100%;display:inline-grid;padding:0;margin:0;overflow-x:hidden;overflow-y:auto;}:host .chart.treemap .inner-container div{overflow:hidden;}:host .chart.treemap .inner-container svg{width:100%;height:100%;}:host .chart.treemap .inner-container .treerect{stroke:var(--d3fc-treedata-axis--lines,var(--d3fc-axis--lines,white));fill:var(--d3fc-series,rgba(31,119,180,0.5));}:host .chart.treemap .inner-container .treerect:hover{cursor:pointer;stroke:var(--d3fc-treedata--hover-highlight,black);stroke-opacity:1;}:host .chart.treemap .inner-container .rootnode{opacity:0;pointer-events:none;z-index:0;}:host .chart.treemap .inner-container .branchnode{opacity:0;}:host .chart.treemap .inner-container .branchnode:hover{fill-opacity:0.1;opacity:1;fill:var(--d3fc-treedata--hover-highlight,black);}:host .chart.treemap .inner-container .leafnode{fill-opacity:0.8;}:host .chart.treemap .inner-container .leafnode:hover{fill-opacity:0.5;}:host .chart.treemap .inner-container #hidden{opacity:0;pointer-events:none;z-index:0;}:host .chart.treemap .inner-container .top{font-size:14px;z-index:5;pointer-events:none;}:host .chart.treemap .inner-container .mid{font-size:8px;opacity:0.7;z-index:4;}:host .chart.treemap .inner-container .lower{font-size:0px;opacity:0;z-index:4;}:host .chart.treemap .inner-container text{fill:var(--d3fc-treedata--labels,rgb(51,51,51));}:host .chart.treemap .inner-container text.title{dominant-baseline:hanging;}:host .chart.treemap .inner-container .parent-controls{position:absolute;top:12px;right:auto;left:30px;width:auto;z-index:4;transition:box-shadow 1s;}:host .chart.treemap .inner-container .parent-controls:hover{box-shadow:2px 2px 6px#000;transition:box-shadow 0.2s;}:host .chart .x-label{height:1.2em!important;line-height:1em!important;}:host .chart .x-label,:host .chart .y-label{color:var(--d3fc-label--color,inherit);font-size:14px;}:host .chart d3fc-canvas.plot-area{display:none;}:host .chart.xyscatter d3fc-canvas.plot-area,:host .chart.xyline d3fc-canvas.plot-area,:host .chart.ohlc d3fc-canvas.plot-area,:host .chart.candlestick d3fc-canvas.plot-area,:host .chart.heatmap d3fc-canvas.plot-area{display:block;}:host .chart .y-axis text,:host .chart .x-axis text{fill:var(--d3fc-axis-ticks--color,rgb(80,80,80));font-size:11px;}:host .chart .y-axis path,:host .chart .x-axis path{stroke:var(--d3fc-axis--lines,rgb(180,210,225));}:host .chart .splitter-label{display:inline-block;margin:0 10px;cursor:pointer;}:host .chart .splitter-label::after{margin-left:5px;color:var(--d3fc-axis--lines,rgb(180,210,225));}:host .chart .splitter-label:hover::after{color:var(--d3fc-axis-ticks--color,rgb(80,80,80));}:host .chart .splitter-label.disabled::after{color:rgba(80,80,80,0.3);}:host .chart .splitter-label.disabled{cursor:default;}:host .chart .y-label.left-label .splitter-label::after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:16px;height:12px;-webkit-mask-image:var(--sort-desc-icon--mask-image);mask-image:var(--sort-desc-icon--mask-image);}:host .chart .y-label.right-label .splitter-label::after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:16px;height:12px;-webkit-mask-image:var(--sort-asc-icon--mask-image);mask-image:var(--sort-asc-icon--mask-image);}:host .chart.ybar .y-axis path,:host .chart.yline .y-axis path,:host .chart.xyline .y-axis path,:host .chart.xyline .x-axis path,:host .chart.yarea .y-axis path,:host .chart.yscatter .y-axis path,:host .chart.xyscatter .y-axis path,:host .chart.xyscatter .x-axis path,:host .chart.xbar .x-axis path{visibility:hidden;}:host .chart .y-label{white-space:nowrap;}:host .chart .nearbyTip{fill:var(--d3fc-series,rgba(31,119,180,0.5));}:host #dragHandles{position:absolute;top:0px;right:0px;left:auto;pointer-events:none;}:host #dragHandles rect{pointer-events:all;}:host .label rect{fill:none;}:host .legend-container{position:absolute;top:12px;right:12px;left:auto;width:150px;height:280px;}:host .legend-container.legend-color{width:90px;height:150px;}:host .legend-container[borderbox-on-hover="true"]{transition:box-shadow 1s;}:host .legend-container[borderbox-on-hover="true"]:hover{background-color:var(--d3fc-legend--background,#ffffff);transition:box-shadow 0.2s,background-color 0.2s;}:host .legend-container .legend{font-size:8pt;width:100%;}:host .legend-container .legend .cell{cursor:pointer;}:host .legend-container .legend .cell path{fill:var(--d3fc-series,rgba(31,119,180,0.5));stroke:var(--d3fc-series,rgb(31,119,180));}:host .legend-container .legend .cell.hidden path{fill:rgba(204,204,204,0.5);stroke:rgb(204,204,204);}:host .legend-container .legend .cell.hidden circle{fill:rgb(204,204,204)!important;}:host .legend-container text{fill:var(--d3fc-legend--text,rgb(51,51,51));}:host .legend-container .label:hover{fill:rgb(34,160,206);}:host .legend-container #legend-axis path{stroke:var(--d3fc-legend--text,rgb(51,51,51));}:host .legend-container .legend-controls{margin-left:12px;}:host .legend-container .legend-controls #up-arrow,:host .legend-container .legend-controls #down-arrow{cursor:pointer;color:rgb(31,119,180);}:host .legend-container .legend-controls #up-arrow.disabled,:host .legend-container .legend-controls #down-arrow.disabled{cursor:default;color:rgb(51,51,51);}:host .heatmap .legend-container.legend-color{height:200px;}:host .treemap .legend-container.legend-color{height:200px;}:host .treemap .legend-container:not(.legend-color){width:100px;}:host .zoom-controls{position:absolute;top:10px;left:0;width:100%;text-align:center;}:host .zoom-controls button{-webkit-appearance:none;background:var(--plugin--background,rgb(247,247,247));border:1px solid var(--inactive--color,rgb(204,204,204));color:var(--d3fc-label--color,inherit);font-size:12px;padding:8px;opacity:0.5;cursor:pointer;}:host .zoom-controls button:hover{opacity:1;}:host .parent-controls{position:absolute;top:30px;right:145px;width:100%;text-align:right;}:host .parent-controls button{-webkit-appearance:none;background:rgb(247,247,247);border:1px solid rgb(204,204,204);padding:10px;opacity:0.5;cursor:pointer;}:host .parent-controls button:hover{background:rgb(230,230,230);}:host div.tooltip{position:absolute;text-align:left;font-size:12px;font-weight:300;white-space:nowrap;padding:0.5em;background:var(--d3fc-tooltip--background,#ffffff);color:var(--d3fc-tooltip--color,black);border:1px solid var(--d3fc-tooltip--border-color,#777777);box-shadow:var(--d3fc-tooltip--box-shadow,none);pointer-events:none;}:host div.tooltip ul{margin:0;padding:0;list-style-type:none;}';
var Vo = { initial: { type: "number", count: 1 }, selectMode: "select" };
var ul = `${So}${ml()}`;
var ur = ["crossValues", "mainValues", "realValues", "splitValues", "filter", "data", "size", "colorStyles", "textStyles", "agg_paths", "treemaps", "axisMemo"];
function ml() {
  let e = document.querySelector("head").querySelectorAll("style"), t = [];
  return e.forEach((r) => {
    r.innerText.indexOf("d3fc-") !== -1 && t.push(r.innerText);
  }), t.join("");
}
function pl(e) {
  customElements.get("perspective-viewer").registerPlugin(e);
}
function Ao(...e) {
  e = new Set(e.length > 0 ? e : sr.map((t) => t.plugin.name)), sr.forEach((t) => {
    if (e.has(t.plugin.name)) {
      let r = t.plugin.name.toLowerCase().replace(/[ \t\r\n\/]*/g, ""), o = `perspective-viewer-d3fc-${r}`;
      customElements.define(o, class extends HTMLElement {
        constructor() {
          super(), this._chart = null, this._settings = null, this.render_warning = true;
        }
        connectedCallback() {
          this._initialized || (this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = `<style>${ul}</style>`, this.shadowRoot.innerHTML += '<div id="container" class="chart"></div>', this._container = this.shadowRoot.querySelector(".chart"), this._initialized = true);
        }
        get name() {
          return t.plugin.name;
        }
        get category() {
          return t.plugin.category;
        }
        get select_mode() {
          return t.plugin.selectMode || "select";
        }
        get min_config_columns() {
          return t.plugin.initial?.count || Vo.initial.count;
        }
        get config_column_names() {
          return t.plugin.initial?.names || Vo.initial.names;
        }
        get max_cells() {
          return t.plugin.max_cells || 4e3;
        }
        set max_cells(n2) {
          t.plugin.max_cells = n2;
        }
        get max_columns() {
          return t.plugin.max_columns || 50;
        }
        set max_columns(n2) {
          t.plugin.max_columns = n2;
        }
        async render() {
          var n2 = document.createElement("canvas"), a4 = this.shadowRoot.querySelector("#container");
          n2.width = a4.offsetWidth, n2.height = a4.offsetHeight;
          let l = n2.getContext("2d");
          l.fillStyle = window.getComputedStyle(this).getPropertyValue("--plugin--background") || "white", l.fillRect(0, 0, n2.width, n2.height);
          let i3 = window.getComputedStyle(this).getPropertyValue("color"), s2 = Array.from(this.shadowRoot.querySelectorAll("svg:not(#dragHandles)"));
          for (let u of s2.reverse()) {
            var c6 = document.createElement("img");
            c6.width = u.parentNode.offsetWidth, c6.height = u.parentNode.offsetHeight;
            let p2 = u.cloneNode(true);
            p2.hasAttribute("viewBox") || p2.setAttribute("viewBox", `0 0 ${c6.width} ${c6.height}`), p2.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            for (let h2 of p2.querySelectorAll("text"))
              h2.setAttribute("fill", i3);
            var m2 = new XMLSerializer().serializeToString(p2);
            m2 = m2.replace(/[^\x00-\x7F]/g, "");
            let f3 = new Promise((h2, g2) => {
              c6.onload = h2, c6.onerror = g2;
            });
            try {
              c6.src = `data:image/svg+xml;base64,${btoa(m2)}`, await f3;
            } catch {
              let g2 = new Promise((y4, x5) => {
                c6.onload = y4, c6.onerror = x5;
              });
              c6.src = `data:image/svg+xml;utf8,${m2}`, await g2;
            }
            l.drawImage(c6, u.parentNode.offsetLeft, u.parentNode.offsetTop, c6.width, c6.height);
          }
          let d2 = Array.from(this.shadowRoot.querySelectorAll("canvas"));
          for (let u of d2.reverse())
            l.drawImage(u, u.parentNode.offsetLeft, u.parentNode.offsetTop, u.width / window.devicePixelRatio, u.height / window.devicePixelRatio);
          return await new Promise((u) => n2.toBlob((p2) => u(p2)), "image/png");
        }
        async draw(n2, a4, l) {
          if (this.offsetParent === null) {
            this._staged_view = [n2, a4, l];
            return;
          }
          this._staged_view = void 0, this._settings && (this._settings.axisMemo = [[1 / 0, -1 / 0], [1 / 0, -1 / 0]]), await this.update(n2, a4, l, true);
        }
        async update(n2, a4, l, i3 = false) {
          if (this.offsetParent === null)
            return;
          let s2 = this.parentElement, c6, m2, d2 = t.plugin.name !== "Sunburst";
          a4 && l ? c6 = n2.to_columns_string({ end_row: l, end_col: a4, leaves_only: d2 }) : a4 ? c6 = n2.to_columns_string({ end_col: a4, leaves_only: d2 }) : l ? c6 = n2.to_columns_string({ end_row: l, leaves_only: d2 }) : c6 = n2.to_columns_string({ leaves_only: d2 }), m2 = await Promise.all([s2.save(), s2.getTable().then((V5) => V5.schema(false)), n2.expression_schema(false), n2.schema(false), c6, n2.get_config()]);
          let [u, p2, f3, h2, g2, y4] = m2, x5 = JSON.parse(g2), v2 = Object.keys(x5), b4 = { row(V5) {
            let T3 = {};
            for (let Y6 of v2)
              T3[Y6] = x5[Y6][V5];
            return T3;
          } };
          this.config = u;
          let w3 = this.config.columns, S5 = function(V5) {
            let T3 = p2[V5];
            return T3 || (T3 = f3[V5]), T3;
          }, { columns: k4, group_by: F5, split_by: j5, filter: M4 } = y4, L3 = x5[Object.keys(x5)[0]] || [], P3 = F5.length > 0 ? L3.reduce((V5, T3, Y6) => {
            let ce3 = b4.row(Y6);
            if (ce3.__ROW_PATH__ && ce3.__ROW_PATH__.length == F5.length)
              V5.agg_paths.push(V5.aggs.slice()), V5.rows.push(ce3);
            else {
              let Ue2 = ce3.__ROW_PATH__.filter((_3) => _3 !== void 0).length;
              V5.aggs[Ue2] = ce3, V5.aggs = V5.aggs.slice(0, Ue2 + 1);
            }
            return V5;
          }, { rows: [], aggs: [], agg_paths: [] }) : { rows: L3.map((V5, T3) => b4.row(T3)) }, E6 = (V5, T3) => F5.length ? V5 : { ...V5, __ROW_PATH__: [T3] }, H4 = P3.rows.map(E6), J3 = { realValues: w3, crossValues: F5.map((V5) => ({ name: V5, type: S5(V5) })), mainValues: k4.map((V5) => ({ name: V5, type: h2[V5] })), splitValues: j5.map((V5) => ({ name: V5, type: S5(V5) })), filter: M4, data: H4, agg_paths: P3.agg_paths };
          this._chart = t;
          let q5 = { set: (V5, T3, Y6) => (ur.includes(T3) || this._container && this._container.dispatchEvent(new Event("perspective-plugin-update", { bubbles: true, composed: true })), V5[T3] = Y6, true) }, oe3 = [[1 / 0, -1 / 0], [1 / 0, -1 / 0]];
          this._settings = new Proxy({ axisMemo: oe3, ...this._settings, ...J3 }, q5), this._settings.splitMainValues && this._settings.splitMainValues.length >= k4.length && (this._settings.splitMainValues = []), _o(this._container, this._settings), i3 && (this._container.innerHTML = ""), this._draw(), await new Promise((V5) => requestAnimationFrame(V5));
        }
        async clear() {
          this._container && (this._container.innerHTML = "");
        }
        _draw() {
          if (this.offsetParent !== null) {
            let n2 = select_default2(this._container), a4 = `chart ${r}`;
            this._settings.size = this._container.getBoundingClientRect(), this._settings.data.length > 0 ? this._chart(n2.attr("class", a4), this._settings) : n2.attr("class", `${a4} disabled`);
          }
        }
        async resize(n2) {
          if (this.offsetParent !== null)
            if (this._settings?.data !== void 0)
              this._draw();
            else {
              let [a4, l, i3] = this._staged_view;
              this._staged_view = void 0, this.draw(a4, l, i3);
            }
        }
        async restyle(...n2) {
          let a4 = this._settings;
          a4 && (delete a4.colorStyles, delete a4.textStyles, await this.draw(...n2));
        }
        async delete() {
          this._container.innerHTML = "";
        }
        getContainer() {
          return this._container;
        }
        save() {
          let n2 = { ...this._settings };
          return ur.forEach((a4) => {
            delete n2[a4];
          }), n2;
        }
        restore(n2) {
          let a4 = {};
          for (let l of ur)
            this._settings?.[l] !== void 0 && (a4[l] = this._settings?.[l]);
          this._settings = { ...a4, ...n2 };
        }
      }), customElements.whenDefined("perspective-viewer").then(() => pl(o));
    }
  });
}
Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector);
Ao();

// node_modules/superstore-arrow/superstore.lz4.arrow
var superstore_lz4_default = "./superstore.lz4.arrow";

// src/index.js
var req = fetch(superstore_lz4_default);
var worker = Ge.shared_worker();
window.addEventListener("DOMContentLoaded", async () => {
  const viewer = document.createElement("perspective-viewer");
  document.body.append(viewer);
  const resp = await req;
  const buffer = await resp.arrayBuffer();
  const table = worker.table(buffer);
  viewer.load(table);
  viewer.restore({ theme: "Solarized" });
  window.viewer = viewer;
});
/**
	ColorBrewer colors for chroma.js

	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
	Pennsylvania State University.

	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at	
	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software distributed
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
	CONDITIONS OF ANY KIND, either express or implied. See the License for the
	specific language governing permissions and limitations under the License.

    @preserve
 */
/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 * 
 * Copyright (c) 2011-2017, Gregor Aisch
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
